// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vcraescu/akeneo-client/client/asset"
	"github.com/vcraescu/akeneo-client/client/asset_attribute"
	"github.com/vcraescu/akeneo-client/client/asset_attribute_option"
	"github.com/vcraescu/akeneo-client/client/asset_family"
	"github.com/vcraescu/akeneo-client/client/asset_media_file"
	"github.com/vcraescu/akeneo-client/client/association_type"
	"github.com/vcraescu/akeneo-client/client/attribute"
	"github.com/vcraescu/akeneo-client/client/attribute_group"
	"github.com/vcraescu/akeneo-client/client/attribute_option"
	"github.com/vcraescu/akeneo-client/client/authentication"
	"github.com/vcraescu/akeneo-client/client/category"
	"github.com/vcraescu/akeneo-client/client/channel"
	"github.com/vcraescu/akeneo-client/client/currency"
	"github.com/vcraescu/akeneo-client/client/family"
	"github.com/vcraescu/akeneo-client/client/family_variant"
	"github.com/vcraescu/akeneo-client/client/locale"
	"github.com/vcraescu/akeneo-client/client/measure_family"
	"github.com/vcraescu/akeneo-client/client/measurement_family"
	"github.com/vcraescu/akeneo-client/client/overview"
	"github.com/vcraescu/akeneo-client/client/p_a_m_asset"
	"github.com/vcraescu/akeneo-client/client/p_a_m_asset_category"
	"github.com/vcraescu/akeneo-client/client/p_a_m_asset_reference_file"
	"github.com/vcraescu/akeneo-client/client/p_a_m_asset_tag"
	"github.com/vcraescu/akeneo-client/client/p_a_m_asset_variation_file"
	"github.com/vcraescu/akeneo-client/client/product"
	"github.com/vcraescu/akeneo-client/client/product_media_file"
	"github.com/vcraescu/akeneo-client/client/product_model"
	"github.com/vcraescu/akeneo-client/client/published_product"
	"github.com/vcraescu/akeneo-client/client/reference_entity"
	"github.com/vcraescu/akeneo-client/client/reference_entity_attribute"
	"github.com/vcraescu/akeneo-client/client/reference_entity_attribute_option"
	"github.com/vcraescu/akeneo-client/client/reference_entity_media_file"
	"github.com/vcraescu/akeneo-client/client/reference_entity_record"
)

// Default akeneo HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "demo.akeneo.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new akeneo HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Akeneo {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new akeneo HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Akeneo {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new akeneo client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Akeneo {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Akeneo)
	cli.Transport = transport
	cli.Asset = asset.New(transport, formats)
	cli.AssetAttribute = asset_attribute.New(transport, formats)
	cli.AssetAttributeOption = asset_attribute_option.New(transport, formats)
	cli.AssetFamily = asset_family.New(transport, formats)
	cli.AssetMediaFile = asset_media_file.New(transport, formats)
	cli.AssociationType = association_type.New(transport, formats)
	cli.Attribute = attribute.New(transport, formats)
	cli.AttributeGroup = attribute_group.New(transport, formats)
	cli.AttributeOption = attribute_option.New(transport, formats)
	cli.Authentication = authentication.New(transport, formats)
	cli.Category = category.New(transport, formats)
	cli.Channel = channel.New(transport, formats)
	cli.Currency = currency.New(transport, formats)
	cli.Family = family.New(transport, formats)
	cli.FamilyVariant = family_variant.New(transport, formats)
	cli.Locale = locale.New(transport, formats)
	cli.MeasureFamily = measure_family.New(transport, formats)
	cli.MeasurementFamily = measurement_family.New(transport, formats)
	cli.Overview = overview.New(transport, formats)
	cli.PamAsset = p_a_m_asset.New(transport, formats)
	cli.PamAssetCategory = p_a_m_asset_category.New(transport, formats)
	cli.PamAssetReferenceFile = p_a_m_asset_reference_file.New(transport, formats)
	cli.PamAssetTag = p_a_m_asset_tag.New(transport, formats)
	cli.PamAssetVariationFile = p_a_m_asset_variation_file.New(transport, formats)
	cli.Product = product.New(transport, formats)
	cli.ProductMediaFile = product_media_file.New(transport, formats)
	cli.ProductModel = product_model.New(transport, formats)
	cli.PublishedProduct = published_product.New(transport, formats)
	cli.ReferenceEntity = reference_entity.New(transport, formats)
	cli.ReferenceEntityAttribute = reference_entity_attribute.New(transport, formats)
	cli.ReferenceEntityAttributeOption = reference_entity_attribute_option.New(transport, formats)
	cli.ReferenceEntityMediaFile = reference_entity_media_file.New(transport, formats)
	cli.ReferenceEntityRecord = reference_entity_record.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Akeneo is a client for akeneo
type Akeneo struct {
	Asset asset.ClientService

	AssetAttribute asset_attribute.ClientService

	AssetAttributeOption asset_attribute_option.ClientService

	AssetFamily asset_family.ClientService

	AssetMediaFile asset_media_file.ClientService

	AssociationType association_type.ClientService

	Attribute attribute.ClientService

	AttributeGroup attribute_group.ClientService

	AttributeOption attribute_option.ClientService

	Authentication authentication.ClientService

	Category category.ClientService

	Channel channel.ClientService

	Currency currency.ClientService

	Family family.ClientService

	FamilyVariant family_variant.ClientService

	Locale locale.ClientService

	MeasureFamily measure_family.ClientService

	MeasurementFamily measurement_family.ClientService

	Overview overview.ClientService

	PamAsset p_a_m_asset.ClientService

	PamAssetCategory p_a_m_asset_category.ClientService

	PamAssetReferenceFile p_a_m_asset_reference_file.ClientService

	PamAssetTag p_a_m_asset_tag.ClientService

	PamAssetVariationFile p_a_m_asset_variation_file.ClientService

	Product product.ClientService

	ProductMediaFile product_media_file.ClientService

	ProductModel product_model.ClientService

	PublishedProduct published_product.ClientService

	ReferenceEntity reference_entity.ClientService

	ReferenceEntityAttribute reference_entity_attribute.ClientService

	ReferenceEntityAttributeOption reference_entity_attribute_option.ClientService

	ReferenceEntityMediaFile reference_entity_media_file.ClientService

	ReferenceEntityRecord reference_entity_record.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Akeneo) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Asset.SetTransport(transport)
	c.AssetAttribute.SetTransport(transport)
	c.AssetAttributeOption.SetTransport(transport)
	c.AssetFamily.SetTransport(transport)
	c.AssetMediaFile.SetTransport(transport)
	c.AssociationType.SetTransport(transport)
	c.Attribute.SetTransport(transport)
	c.AttributeGroup.SetTransport(transport)
	c.AttributeOption.SetTransport(transport)
	c.Authentication.SetTransport(transport)
	c.Category.SetTransport(transport)
	c.Channel.SetTransport(transport)
	c.Currency.SetTransport(transport)
	c.Family.SetTransport(transport)
	c.FamilyVariant.SetTransport(transport)
	c.Locale.SetTransport(transport)
	c.MeasureFamily.SetTransport(transport)
	c.MeasurementFamily.SetTransport(transport)
	c.Overview.SetTransport(transport)
	c.PamAsset.SetTransport(transport)
	c.PamAssetCategory.SetTransport(transport)
	c.PamAssetReferenceFile.SetTransport(transport)
	c.PamAssetTag.SetTransport(transport)
	c.PamAssetVariationFile.SetTransport(transport)
	c.Product.SetTransport(transport)
	c.ProductMediaFile.SetTransport(transport)
	c.ProductModel.SetTransport(transport)
	c.PublishedProduct.SetTransport(transport)
	c.ReferenceEntity.SetTransport(transport)
	c.ReferenceEntityAttribute.SetTransport(transport)
	c.ReferenceEntityAttributeOption.SetTransport(transport)
	c.ReferenceEntityMediaFile.SetTransport(transport)
	c.ReferenceEntityRecord.SetTransport(transport)
}

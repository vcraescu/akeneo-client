// Code generated by go-swagger; DO NOT EDIT.

package asset_attribute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchAssetFamilyAttributesCodeReader is a Reader for the PatchAssetFamilyAttributesCode structure.
type PatchAssetFamilyAttributesCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAssetFamilyAttributesCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPatchAssetFamilyAttributesCodeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchAssetFamilyAttributesCodeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchAssetFamilyAttributesCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAssetFamilyAttributesCodeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchAssetFamilyAttributesCodeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAssetFamilyAttributesCodeCreated creates a PatchAssetFamilyAttributesCodeCreated with default headers values
func NewPatchAssetFamilyAttributesCodeCreated() *PatchAssetFamilyAttributesCodeCreated {
	return &PatchAssetFamilyAttributesCodeCreated{}
}

/*PatchAssetFamilyAttributesCodeCreated handles this case with default header values.

Created
*/
type PatchAssetFamilyAttributesCodeCreated struct {
	/*URI of the created resource
	 */
	Location string
}

func (o *PatchAssetFamilyAttributesCodeCreated) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{asset_family_code}/attributes/{code}][%d] patchAssetFamilyAttributesCodeCreated ", 201)
}

func (o *PatchAssetFamilyAttributesCodeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewPatchAssetFamilyAttributesCodeNoContent creates a PatchAssetFamilyAttributesCodeNoContent with default headers values
func NewPatchAssetFamilyAttributesCodeNoContent() *PatchAssetFamilyAttributesCodeNoContent {
	return &PatchAssetFamilyAttributesCodeNoContent{}
}

/*PatchAssetFamilyAttributesCodeNoContent handles this case with default header values.

No content to return
*/
type PatchAssetFamilyAttributesCodeNoContent struct {
	/*URI of the updated resource
	 */
	Location string
}

func (o *PatchAssetFamilyAttributesCodeNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{asset_family_code}/attributes/{code}][%d] patchAssetFamilyAttributesCodeNoContent ", 204)
}

func (o *PatchAssetFamilyAttributesCodeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewPatchAssetFamilyAttributesCodeUnauthorized creates a PatchAssetFamilyAttributesCodeUnauthorized with default headers values
func NewPatchAssetFamilyAttributesCodeUnauthorized() *PatchAssetFamilyAttributesCodeUnauthorized {
	return &PatchAssetFamilyAttributesCodeUnauthorized{}
}

/*PatchAssetFamilyAttributesCodeUnauthorized handles this case with default header values.

Authentication required
*/
type PatchAssetFamilyAttributesCodeUnauthorized struct {
	Payload *PatchAssetFamilyAttributesCodeUnauthorizedBody
}

func (o *PatchAssetFamilyAttributesCodeUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{asset_family_code}/attributes/{code}][%d] patchAssetFamilyAttributesCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAssetFamilyAttributesCodeUnauthorized) GetPayload() *PatchAssetFamilyAttributesCodeUnauthorizedBody {
	return o.Payload
}

func (o *PatchAssetFamilyAttributesCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetFamilyAttributesCodeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetFamilyAttributesCodeUnsupportedMediaType creates a PatchAssetFamilyAttributesCodeUnsupportedMediaType with default headers values
func NewPatchAssetFamilyAttributesCodeUnsupportedMediaType() *PatchAssetFamilyAttributesCodeUnsupportedMediaType {
	return &PatchAssetFamilyAttributesCodeUnsupportedMediaType{}
}

/*PatchAssetFamilyAttributesCodeUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchAssetFamilyAttributesCodeUnsupportedMediaType struct {
	Payload *PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody
}

func (o *PatchAssetFamilyAttributesCodeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{asset_family_code}/attributes/{code}][%d] patchAssetFamilyAttributesCodeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAssetFamilyAttributesCodeUnsupportedMediaType) GetPayload() *PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchAssetFamilyAttributesCodeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetFamilyAttributesCodeUnprocessableEntity creates a PatchAssetFamilyAttributesCodeUnprocessableEntity with default headers values
func NewPatchAssetFamilyAttributesCodeUnprocessableEntity() *PatchAssetFamilyAttributesCodeUnprocessableEntity {
	return &PatchAssetFamilyAttributesCodeUnprocessableEntity{}
}

/*PatchAssetFamilyAttributesCodeUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type PatchAssetFamilyAttributesCodeUnprocessableEntity struct {
	Payload *PatchAssetFamilyAttributesCodeUnprocessableEntityBody
}

func (o *PatchAssetFamilyAttributesCodeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{asset_family_code}/attributes/{code}][%d] patchAssetFamilyAttributesCodeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchAssetFamilyAttributesCodeUnprocessableEntity) GetPayload() *PatchAssetFamilyAttributesCodeUnprocessableEntityBody {
	return o.Payload
}

func (o *PatchAssetFamilyAttributesCodeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetFamilyAttributesCodeUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchAssetFamilyAttributesCodeBody patch asset family attributes code body
swagger:model PatchAssetFamilyAttributesCodeBody
*/
type PatchAssetFamilyAttributesCodeBody struct {

	// Extensions allowed when the attribute type is `media_file`
	AllowedExtensions []string `json:"allowed_extensions"`

	// Attribute code
	// Required: true
	Code *string `json:"code"`

	// Whether decimals are allowed when the attribute type is `number`
	DecimalsAllowed *bool `json:"decimals_allowed,omitempty"`

	// Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
	IsReadOnly *bool `json:"is_read_only,omitempty"`

	// Whether the attribute should be part of the record's completeness calculation
	IsRequiredForCompleteness *bool `json:"is_required_for_completeness,omitempty"`

	// Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
	IsRichTextEditor bool `json:"is_rich_text_editor,omitempty"`

	// Whether the UI should display a text area instead of a simple field when the attribute type is `text`
	IsTextarea *bool `json:"is_textarea,omitempty"`

	// labels
	Labels *PatchAssetFamilyAttributesCodeParamsBodyLabels `json:"labels,omitempty"`

	// Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
	MaxCharacters int64 `json:"max_characters,omitempty"`

	// Max file size in MB when the attribute type is `media_file`
	MaxFileSize string `json:"max_file_size,omitempty"`

	// Maximum value allowed when the attribute type is `number`
	MaxValue string `json:"max_value,omitempty"`

	// For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
	// Required: true
	// Enum: [image pdf youtube vimeo other]
	MediaType *string `json:"media_type"`

	// Minimum value allowed when the attribute type is `number`
	MinValue string `json:"min_value,omitempty"`

	// Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
	Prefix string `json:"prefix,omitempty"`

	// Suffix of the `media_link` attribute type. The common url suffix for the media
	Suffix string `json:"suffix,omitempty"`

	// Attribute type
	// Required: true
	// Enum: [text media_link number media_file single_option multiple_options reference_entity_single_link reference_entity_multiple_links]
	Type *string `json:"type"`

	// Regexp expression used to validate the attribute value when the attribute type is `text`
	ValidationRegexp string `json:"validation_regexp,omitempty"`

	// Validation rule type used to validate the attribute value when the attribute type is `text`
	// Enum: [email url regexp none]
	ValidationRule *string `json:"validation_rule,omitempty"`

	// Whether the attribute is scopable, i.e. can have one value by channel
	ValuePerChannel *bool `json:"value_per_channel,omitempty"`

	// Whether the attribute is localizable, i.e. can have one value by locale
	ValuePerLocale *bool `json:"value_per_locale,omitempty"`
}

// Validate validates this patch asset family attributes code body
func (o *PatchAssetFamilyAttributesCodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValidationRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyAttributesCodeBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyAttributesCodeBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

var patchAssetFamilyAttributesCodeBodyTypeMediaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["image","pdf","youtube","vimeo","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchAssetFamilyAttributesCodeBodyTypeMediaTypePropEnum = append(patchAssetFamilyAttributesCodeBodyTypeMediaTypePropEnum, v)
	}
}

const (

	// PatchAssetFamilyAttributesCodeBodyMediaTypeImage captures enum value "image"
	PatchAssetFamilyAttributesCodeBodyMediaTypeImage string = "image"

	// PatchAssetFamilyAttributesCodeBodyMediaTypePdf captures enum value "pdf"
	PatchAssetFamilyAttributesCodeBodyMediaTypePdf string = "pdf"

	// PatchAssetFamilyAttributesCodeBodyMediaTypeYoutube captures enum value "youtube"
	PatchAssetFamilyAttributesCodeBodyMediaTypeYoutube string = "youtube"

	// PatchAssetFamilyAttributesCodeBodyMediaTypeVimeo captures enum value "vimeo"
	PatchAssetFamilyAttributesCodeBodyMediaTypeVimeo string = "vimeo"

	// PatchAssetFamilyAttributesCodeBodyMediaTypeOther captures enum value "other"
	PatchAssetFamilyAttributesCodeBodyMediaTypeOther string = "other"
)

// prop value enum
func (o *PatchAssetFamilyAttributesCodeBody) validateMediaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchAssetFamilyAttributesCodeBodyTypeMediaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchAssetFamilyAttributesCodeBody) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"media_type", "body", o.MediaType); err != nil {
		return err
	}

	// value enum
	if err := o.validateMediaTypeEnum("body"+"."+"media_type", "body", *o.MediaType); err != nil {
		return err
	}

	return nil
}

var patchAssetFamilyAttributesCodeBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","media_link","number","media_file","single_option","multiple_options","reference_entity_single_link","reference_entity_multiple_links"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchAssetFamilyAttributesCodeBodyTypeTypePropEnum = append(patchAssetFamilyAttributesCodeBodyTypeTypePropEnum, v)
	}
}

const (

	// PatchAssetFamilyAttributesCodeBodyTypeText captures enum value "text"
	PatchAssetFamilyAttributesCodeBodyTypeText string = "text"

	// PatchAssetFamilyAttributesCodeBodyTypeMediaLink captures enum value "media_link"
	PatchAssetFamilyAttributesCodeBodyTypeMediaLink string = "media_link"

	// PatchAssetFamilyAttributesCodeBodyTypeNumber captures enum value "number"
	PatchAssetFamilyAttributesCodeBodyTypeNumber string = "number"

	// PatchAssetFamilyAttributesCodeBodyTypeMediaFile captures enum value "media_file"
	PatchAssetFamilyAttributesCodeBodyTypeMediaFile string = "media_file"

	// PatchAssetFamilyAttributesCodeBodyTypeSingleOption captures enum value "single_option"
	PatchAssetFamilyAttributesCodeBodyTypeSingleOption string = "single_option"

	// PatchAssetFamilyAttributesCodeBodyTypeMultipleOptions captures enum value "multiple_options"
	PatchAssetFamilyAttributesCodeBodyTypeMultipleOptions string = "multiple_options"

	// PatchAssetFamilyAttributesCodeBodyTypeReferenceEntitySingleLink captures enum value "reference_entity_single_link"
	PatchAssetFamilyAttributesCodeBodyTypeReferenceEntitySingleLink string = "reference_entity_single_link"

	// PatchAssetFamilyAttributesCodeBodyTypeReferenceEntityMultipleLinks captures enum value "reference_entity_multiple_links"
	PatchAssetFamilyAttributesCodeBodyTypeReferenceEntityMultipleLinks string = "reference_entity_multiple_links"
)

// prop value enum
func (o *PatchAssetFamilyAttributesCodeBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchAssetFamilyAttributesCodeBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchAssetFamilyAttributesCodeBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

var patchAssetFamilyAttributesCodeBodyTypeValidationRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","url","regexp","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchAssetFamilyAttributesCodeBodyTypeValidationRulePropEnum = append(patchAssetFamilyAttributesCodeBodyTypeValidationRulePropEnum, v)
	}
}

const (

	// PatchAssetFamilyAttributesCodeBodyValidationRuleEmail captures enum value "email"
	PatchAssetFamilyAttributesCodeBodyValidationRuleEmail string = "email"

	// PatchAssetFamilyAttributesCodeBodyValidationRuleURL captures enum value "url"
	PatchAssetFamilyAttributesCodeBodyValidationRuleURL string = "url"

	// PatchAssetFamilyAttributesCodeBodyValidationRuleRegexp captures enum value "regexp"
	PatchAssetFamilyAttributesCodeBodyValidationRuleRegexp string = "regexp"

	// PatchAssetFamilyAttributesCodeBodyValidationRuleNone captures enum value "none"
	PatchAssetFamilyAttributesCodeBodyValidationRuleNone string = "none"
)

// prop value enum
func (o *PatchAssetFamilyAttributesCodeBody) validateValidationRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchAssetFamilyAttributesCodeBodyTypeValidationRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchAssetFamilyAttributesCodeBody) validateValidationRule(formats strfmt.Registry) error {

	if swag.IsZero(o.ValidationRule) { // not required
		return nil
	}

	// value enum
	if err := o.validateValidationRuleEnum("body"+"."+"validation_rule", "body", *o.ValidationRule); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyAttributesCodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyAttributesCodeParamsBodyLabels Attribute labels for each locale
swagger:model PatchAssetFamilyAttributesCodeParamsBodyLabels
*/
type PatchAssetFamilyAttributesCodeParamsBodyLabels struct {

	// Attribute label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch asset family attributes code params body labels
func (o *PatchAssetFamilyAttributesCodeParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyAttributesCodeParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyAttributesCodeUnauthorizedBody patch asset family attributes code unauthorized body
swagger:model PatchAssetFamilyAttributesCodeUnauthorizedBody
*/
type PatchAssetFamilyAttributesCodeUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset family attributes code unauthorized body
func (o *PatchAssetFamilyAttributesCodeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyAttributesCodeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyAttributesCodeUnprocessableEntityBody patch asset family attributes code unprocessable entity body
swagger:model PatchAssetFamilyAttributesCodeUnprocessableEntityBody
*/
type PatchAssetFamilyAttributesCodeUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset family attributes code unprocessable entity body
func (o *PatchAssetFamilyAttributesCodeUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyAttributesCodeUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody patch asset family attributes code unsupported media type body
swagger:model PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody
*/
type PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset family attributes code unsupported media type body
func (o *PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyAttributesCodeUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package asset_family

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchAssetFamilyCodeReader is a Reader for the PatchAssetFamilyCode structure.
type PatchAssetFamilyCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAssetFamilyCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPatchAssetFamilyCodeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchAssetFamilyCodeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchAssetFamilyCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAssetFamilyCodeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchAssetFamilyCodeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAssetFamilyCodeCreated creates a PatchAssetFamilyCodeCreated with default headers values
func NewPatchAssetFamilyCodeCreated() *PatchAssetFamilyCodeCreated {
	return &PatchAssetFamilyCodeCreated{}
}

/*PatchAssetFamilyCodeCreated handles this case with default header values.

Created
*/
type PatchAssetFamilyCodeCreated struct {
	/*URI of the created resource
	 */
	Location string
}

func (o *PatchAssetFamilyCodeCreated) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{code}][%d] patchAssetFamilyCodeCreated ", 201)
}

func (o *PatchAssetFamilyCodeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewPatchAssetFamilyCodeNoContent creates a PatchAssetFamilyCodeNoContent with default headers values
func NewPatchAssetFamilyCodeNoContent() *PatchAssetFamilyCodeNoContent {
	return &PatchAssetFamilyCodeNoContent{}
}

/*PatchAssetFamilyCodeNoContent handles this case with default header values.

No content to return
*/
type PatchAssetFamilyCodeNoContent struct {
	/*URI of the updated resource
	 */
	Location string
}

func (o *PatchAssetFamilyCodeNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{code}][%d] patchAssetFamilyCodeNoContent ", 204)
}

func (o *PatchAssetFamilyCodeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewPatchAssetFamilyCodeUnauthorized creates a PatchAssetFamilyCodeUnauthorized with default headers values
func NewPatchAssetFamilyCodeUnauthorized() *PatchAssetFamilyCodeUnauthorized {
	return &PatchAssetFamilyCodeUnauthorized{}
}

/*PatchAssetFamilyCodeUnauthorized handles this case with default header values.

Authentication required
*/
type PatchAssetFamilyCodeUnauthorized struct {
	Payload *PatchAssetFamilyCodeUnauthorizedBody
}

func (o *PatchAssetFamilyCodeUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{code}][%d] patchAssetFamilyCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAssetFamilyCodeUnauthorized) GetPayload() *PatchAssetFamilyCodeUnauthorizedBody {
	return o.Payload
}

func (o *PatchAssetFamilyCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetFamilyCodeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetFamilyCodeUnsupportedMediaType creates a PatchAssetFamilyCodeUnsupportedMediaType with default headers values
func NewPatchAssetFamilyCodeUnsupportedMediaType() *PatchAssetFamilyCodeUnsupportedMediaType {
	return &PatchAssetFamilyCodeUnsupportedMediaType{}
}

/*PatchAssetFamilyCodeUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchAssetFamilyCodeUnsupportedMediaType struct {
	Payload *PatchAssetFamilyCodeUnsupportedMediaTypeBody
}

func (o *PatchAssetFamilyCodeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{code}][%d] patchAssetFamilyCodeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAssetFamilyCodeUnsupportedMediaType) GetPayload() *PatchAssetFamilyCodeUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchAssetFamilyCodeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetFamilyCodeUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetFamilyCodeUnprocessableEntity creates a PatchAssetFamilyCodeUnprocessableEntity with default headers values
func NewPatchAssetFamilyCodeUnprocessableEntity() *PatchAssetFamilyCodeUnprocessableEntity {
	return &PatchAssetFamilyCodeUnprocessableEntity{}
}

/*PatchAssetFamilyCodeUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type PatchAssetFamilyCodeUnprocessableEntity struct {
	Payload *PatchAssetFamilyCodeUnprocessableEntityBody
}

func (o *PatchAssetFamilyCodeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-families/{code}][%d] patchAssetFamilyCodeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchAssetFamilyCodeUnprocessableEntity) GetPayload() *PatchAssetFamilyCodeUnprocessableEntityBody {
	return o.Payload
}

func (o *PatchAssetFamilyCodeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetFamilyCodeUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchAssetFamilyCodeBody patch asset family code body
swagger:model PatchAssetFamilyCodeBody
*/
type PatchAssetFamilyCodeBody struct {

	// Attribute code that is used as the main media of the asset family.
	AttributeAsMainMedia *string `json:"attribute_as_main_media,omitempty"`

	// Asset family code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *PatchAssetFamilyCodeParamsBodyLabels `json:"labels,omitempty"`

	// naming convention
	NamingConvention *PatchAssetFamilyCodeParamsBodyNamingConvention `json:"naming_convention,omitempty"`

	// The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.
	ProductLinkRules []*PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0 `json:"product_link_rules"`

	// The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.
	Transformations []*PatchAssetFamilyCodeParamsBodyTransformationsItems0 `json:"transformations"`
}

// Validate validates this patch asset family code body
func (o *PatchAssetFamilyCodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNamingConvention(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductLinkRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransformations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

func (o *PatchAssetFamilyCodeBody) validateNamingConvention(formats strfmt.Registry) error {

	if swag.IsZero(o.NamingConvention) { // not required
		return nil
	}

	if o.NamingConvention != nil {
		if err := o.NamingConvention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "naming_convention")
			}
			return err
		}
	}

	return nil
}

func (o *PatchAssetFamilyCodeBody) validateProductLinkRules(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductLinkRules) { // not required
		return nil
	}

	for i := 0; i < len(o.ProductLinkRules); i++ {
		if swag.IsZero(o.ProductLinkRules[i]) { // not required
			continue
		}

		if o.ProductLinkRules[i] != nil {
			if err := o.ProductLinkRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "product_link_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PatchAssetFamilyCodeBody) validateTransformations(formats strfmt.Registry) error {

	if swag.IsZero(o.Transformations) { // not required
		return nil
	}

	for i := 0; i < len(o.Transformations); i++ {
		if swag.IsZero(o.Transformations[i]) { // not required
			continue
		}

		if o.Transformations[i] != nil {
			if err := o.Transformations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "transformations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyLabels Asset family labels for each locale
swagger:model PatchAssetFamilyCodeParamsBodyLabels
*/
type PatchAssetFamilyCodeParamsBodyLabels struct {

	// Asset family label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch asset family code params body labels
func (o *PatchAssetFamilyCodeParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyNamingConvention The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
swagger:model PatchAssetFamilyCodeParamsBodyNamingConvention
*/
type PatchAssetFamilyCodeParamsBodyNamingConvention struct {

	// Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.
	AbortAssetCreationOnError bool `json:"abort_asset_creation_on_error,omitempty"`

	// The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.
	Pattern string `json:"pattern,omitempty"`

	// The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
	Source interface{} `json:"source,omitempty"`
}

// Validate validates this patch asset family code params body naming convention
func (o *PatchAssetFamilyCodeParamsBodyNamingConvention) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyNamingConvention) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyNamingConvention) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyNamingConvention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0 patch asset family code params body product link rules items0
swagger:model PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0
*/
type PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0 struct {

	// The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.
	AssignAssetsTo []*PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0 `json:"assign_assets_to"`

	// The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.
	ProductSelections []*PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0 `json:"product_selections"`
}

// Validate validates this patch asset family code params body product link rules items0
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignAssetsTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductSelections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0) validateAssignAssetsTo(formats strfmt.Registry) error {

	if swag.IsZero(o.AssignAssetsTo) { // not required
		return nil
	}

	for i := 0; i < len(o.AssignAssetsTo); i++ {
		if swag.IsZero(o.AssignAssetsTo[i]) { // not required
			continue
		}

		if o.AssignAssetsTo[i] != nil {
			if err := o.AssignAssetsTo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assign_assets_to" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0) validateProductSelections(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductSelections) { // not required
		return nil
	}

	for i := 0; i < len(o.ProductSelections); i++ {
		if swag.IsZero(o.ProductSelections[i]) { // not required
			continue
		}

		if o.ProductSelections[i] != nil {
			if err := o.ProductSelections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_selections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0 patch asset family code params body product link rules items0 assign assets to items0
swagger:model PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0
*/
type PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0 struct {

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// channel
	Channel string `json:"channel,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// mode
	// Required: true
	Mode *string `json:"mode"`
}

// Validate validates this patch asset family code params body product link rules items0 assign assets to items0
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("attribute", "body", o.Attribute); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", o.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0AssignAssetsToItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0 patch asset family code params body product link rules items0 product selections items0
swagger:model PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0
*/
type PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0 struct {

	// channel
	Channel string `json:"channel,omitempty"`

	// field
	// Required: true
	Field *string `json:"field"`

	// locale
	Locale string `json:"locale,omitempty"`

	// operator
	// Required: true
	Operator *string `json:"operator"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this patch asset family code params body product link rules items0 product selections items0
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", o.Field); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", o.Operator); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyProductLinkRulesItems0ProductSelectionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyTransformationsItems0 patch asset family code params body transformations items0
swagger:model PatchAssetFamilyCodeParamsBodyTransformationsItems0
*/
type PatchAssetFamilyCodeParamsBodyTransformationsItems0 struct {

	// The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
	FilenamePrefix string `json:"filename_prefix,omitempty"`

	// The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
	FilenameSuffix string `json:"filename_suffix,omitempty"`

	// The name of the transformation
	// Required: true
	Label *string `json:"label"`

	// operations
	// Required: true
	Operations *PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations `json:"operations"`

	// source
	// Required: true
	Source *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source `json:"source"`

	// target
	// Required: true
	Target *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target `json:"target"`
}

// Validate validates this patch asset family code params body transformations items0
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", o.Label); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) validateOperations(formats strfmt.Registry) error {

	if err := validate.Required("operations", "body", o.Operations); err != nil {
		return err
	}

	if o.Operations != nil {
		if err := o.Operations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations")
			}
			return err
		}
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", o.Source); err != nil {
		return err
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", o.Target); err != nil {
		return err
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyTransformationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
swagger:model PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations
*/
type PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations struct {

	// parameters
	Parameters *PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters `json:"parameters,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this patch asset family code params body transformations items0 operations
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(o.Parameters) { // not required
		return nil
	}

	if o.Parameters != nil {
		if err := o.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations" + "." + "parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyTransformationsItems0Operations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters patch asset family code params body transformations items0 operations parameters
swagger:model PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters
*/
type PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters struct {

	// colorspace
	Colorspace string `json:"colorspace,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// quality
	Quality int64 `json:"quality,omitempty"`

	// ratio
	Ratio int64 `json:"ratio,omitempty"`

	// resolution unit
	ResolutionUnit string `json:"resolution-unit,omitempty"`

	// resolution x
	Resolutionx int64 `json:"resolution-x,omitempty"`

	// resolution y
	Resolutiony int64 `json:"resolution-y,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this patch asset family code params body transformations items0 operations parameters
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyTransformationsItems0OperationsParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyTransformationsItems0Source The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
swagger:model PatchAssetFamilyCodeParamsBodyTransformationsItems0Source
*/
type PatchAssetFamilyCodeParamsBodyTransformationsItems0Source struct {

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// channel
	// Required: true
	Channel *string `json:"channel"`

	// locale
	// Required: true
	Locale *string `json:"locale"`
}

// Validate validates this patch asset family code params body transformations items0 source
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("source"+"."+"attribute", "body", o.Attribute); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("source"+"."+"channel", "body", o.Channel); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("source"+"."+"locale", "body", o.Locale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Source) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyTransformationsItems0Source
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeParamsBodyTransformationsItems0Target The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
swagger:model PatchAssetFamilyCodeParamsBodyTransformationsItems0Target
*/
type PatchAssetFamilyCodeParamsBodyTransformationsItems0Target struct {

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// channel
	// Required: true
	Channel *string `json:"channel"`

	// locale
	// Required: true
	Locale *string `json:"locale"`
}

// Validate validates this patch asset family code params body transformations items0 target
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("target"+"."+"attribute", "body", o.Attribute); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("target"+"."+"channel", "body", o.Channel); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("target"+"."+"locale", "body", o.Locale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeParamsBodyTransformationsItems0Target) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeParamsBodyTransformationsItems0Target
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeUnauthorizedBody patch asset family code unauthorized body
swagger:model PatchAssetFamilyCodeUnauthorizedBody
*/
type PatchAssetFamilyCodeUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset family code unauthorized body
func (o *PatchAssetFamilyCodeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeUnprocessableEntityBody patch asset family code unprocessable entity body
swagger:model PatchAssetFamilyCodeUnprocessableEntityBody
*/
type PatchAssetFamilyCodeUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset family code unprocessable entity body
func (o *PatchAssetFamilyCodeUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetFamilyCodeUnsupportedMediaTypeBody patch asset family code unsupported media type body
swagger:model PatchAssetFamilyCodeUnsupportedMediaTypeBody
*/
type PatchAssetFamilyCodeUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset family code unsupported media type body
func (o *PatchAssetFamilyCodeUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetFamilyCodeUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetFamilyCodeUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetFamilyCodeUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

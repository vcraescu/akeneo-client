// Code generated by go-swagger; DO NOT EDIT.

package association_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new association type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for association type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AssociationTypesGet(params *AssociationTypesGetParams) (*AssociationTypesGetOK, error)

	AssociationTypesGetList(params *AssociationTypesGetListParams) (*AssociationTypesGetListOK, error)

	AssociationTypesPatch(params *AssociationTypesPatchParams) (*AssociationTypesPatchCreated, *AssociationTypesPatchNoContent, error)

	AssociationTypesPost(params *AssociationTypesPostParams) (*AssociationTypesPostCreated, error)

	SeveralAssociationTypesPatch(params *SeveralAssociationTypesPatchParams) (*SeveralAssociationTypesPatchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssociationTypesGet gets an association type

  This endpoint allows you to get the information about a given association type.
*/
func (a *Client) AssociationTypesGet(params *AssociationTypesGetParams) (*AssociationTypesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "association_types_get",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/association-types/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociationTypesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for association_types_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AssociationTypesGetList gets a list of association types

  This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
*/
func (a *Client) AssociationTypesGetList(params *AssociationTypesGetListParams) (*AssociationTypesGetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesGetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "association_types_get_list",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/association-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociationTypesGetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesGetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for association_types_get_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AssociationTypesPatch updates create an association type

  This endpoint allows you to update a given association type. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
*/
func (a *Client) AssociationTypesPatch(params *AssociationTypesPatchParams) (*AssociationTypesPatchCreated, *AssociationTypesPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "association_types_patch",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/association-types/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociationTypesPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AssociationTypesPatchCreated:
		return value, nil, nil
	case *AssociationTypesPatchNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for association_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AssociationTypesPost creates a new association type

  This endpoint allows you to create a new association type.
*/
func (a *Client) AssociationTypesPost(params *AssociationTypesPostParams) (*AssociationTypesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociationTypesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "association_types_post",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/association-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociationTypesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociationTypesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for association_types_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SeveralAssociationTypesPatch updates create several association types

  This endpoint allows you to update and/or create several association types at once.
*/
func (a *Client) SeveralAssociationTypesPatch(params *SeveralAssociationTypesPatchParams) (*SeveralAssociationTypesPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeveralAssociationTypesPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "several_association_types_patch",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/association-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SeveralAssociationTypesPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeveralAssociationTypesPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for several_association_types_patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

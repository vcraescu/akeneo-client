// Code generated by go-swagger; DO NOT EDIT.

package association_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssociationTypesGetReader is a Reader for the AssociationTypesGet structure.
type AssociationTypesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssociationTypesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssociationTypesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAssociationTypesGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssociationTypesGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAssociationTypesGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewAssociationTypesGetNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssociationTypesGetOK creates a AssociationTypesGetOK with default headers values
func NewAssociationTypesGetOK() *AssociationTypesGetOK {
	return &AssociationTypesGetOK{}
}

/*AssociationTypesGetOK handles this case with default header values.

OK
*/
type AssociationTypesGetOK struct {
	Payload *AssociationTypesGetOKBody
}

func (o *AssociationTypesGetOK) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/association-types/{code}][%d] associationTypesGetOK  %+v", 200, o.Payload)
}

func (o *AssociationTypesGetOK) GetPayload() *AssociationTypesGetOKBody {
	return o.Payload
}

func (o *AssociationTypesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesGetOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesGetUnauthorized creates a AssociationTypesGetUnauthorized with default headers values
func NewAssociationTypesGetUnauthorized() *AssociationTypesGetUnauthorized {
	return &AssociationTypesGetUnauthorized{}
}

/*AssociationTypesGetUnauthorized handles this case with default header values.

Authentication required
*/
type AssociationTypesGetUnauthorized struct {
	Payload *AssociationTypesGetUnauthorizedBody
}

func (o *AssociationTypesGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/association-types/{code}][%d] associationTypesGetUnauthorized  %+v", 401, o.Payload)
}

func (o *AssociationTypesGetUnauthorized) GetPayload() *AssociationTypesGetUnauthorizedBody {
	return o.Payload
}

func (o *AssociationTypesGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesGetUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesGetForbidden creates a AssociationTypesGetForbidden with default headers values
func NewAssociationTypesGetForbidden() *AssociationTypesGetForbidden {
	return &AssociationTypesGetForbidden{}
}

/*AssociationTypesGetForbidden handles this case with default header values.

Access forbidden
*/
type AssociationTypesGetForbidden struct {
	Payload *AssociationTypesGetForbiddenBody
}

func (o *AssociationTypesGetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/association-types/{code}][%d] associationTypesGetForbidden  %+v", 403, o.Payload)
}

func (o *AssociationTypesGetForbidden) GetPayload() *AssociationTypesGetForbiddenBody {
	return o.Payload
}

func (o *AssociationTypesGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesGetForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesGetNotFound creates a AssociationTypesGetNotFound with default headers values
func NewAssociationTypesGetNotFound() *AssociationTypesGetNotFound {
	return &AssociationTypesGetNotFound{}
}

/*AssociationTypesGetNotFound handles this case with default header values.

Resource not found
*/
type AssociationTypesGetNotFound struct {
	Payload *AssociationTypesGetNotFoundBody
}

func (o *AssociationTypesGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/association-types/{code}][%d] associationTypesGetNotFound  %+v", 404, o.Payload)
}

func (o *AssociationTypesGetNotFound) GetPayload() *AssociationTypesGetNotFoundBody {
	return o.Payload
}

func (o *AssociationTypesGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesGetNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesGetNotAcceptable creates a AssociationTypesGetNotAcceptable with default headers values
func NewAssociationTypesGetNotAcceptable() *AssociationTypesGetNotAcceptable {
	return &AssociationTypesGetNotAcceptable{}
}

/*AssociationTypesGetNotAcceptable handles this case with default header values.

Not Acceptable
*/
type AssociationTypesGetNotAcceptable struct {
	Payload *AssociationTypesGetNotAcceptableBody
}

func (o *AssociationTypesGetNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/association-types/{code}][%d] associationTypesGetNotAcceptable  %+v", 406, o.Payload)
}

func (o *AssociationTypesGetNotAcceptable) GetPayload() *AssociationTypesGetNotAcceptableBody {
	return o.Payload
}

func (o *AssociationTypesGetNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesGetNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssociationTypesGetForbiddenBody association types get forbidden body
swagger:model AssociationTypesGetForbiddenBody
*/
type AssociationTypesGetForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types get forbidden body
func (o *AssociationTypesGetForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesGetForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesGetForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesGetForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesGetNotAcceptableBody association types get not acceptable body
swagger:model AssociationTypesGetNotAcceptableBody
*/
type AssociationTypesGetNotAcceptableBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types get not acceptable body
func (o *AssociationTypesGetNotAcceptableBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesGetNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesGetNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesGetNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesGetNotFoundBody association types get not found body
swagger:model AssociationTypesGetNotFoundBody
*/
type AssociationTypesGetNotFoundBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types get not found body
func (o *AssociationTypesGetNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesGetNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesGetNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesGetNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesGetOKBody association types get o k body
swagger:model AssociationTypesGetOKBody
*/
type AssociationTypesGetOKBody struct {

	// Association type code
	// Required: true
	Code *string `json:"code"`

	// When true, the association is a quantified association
	IsQuantified *bool `json:"is_quantified,omitempty"`

	// When true, the association is a two-way association
	IsTwoWay *bool `json:"is_two_way,omitempty"`

	// labels
	Labels *AssociationTypesGetOKBodyLabels `json:"labels,omitempty"`
}

// Validate validates this association types get o k body
func (o *AssociationTypesGetOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssociationTypesGetOKBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("associationTypesGetOK"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *AssociationTypesGetOKBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associationTypesGetOK" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesGetOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesGetOKBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesGetOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesGetOKBodyLabels Association type labels for each locale
swagger:model AssociationTypesGetOKBodyLabels
*/
type AssociationTypesGetOKBodyLabels struct {

	// Association type label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this association types get o k body labels
func (o *AssociationTypesGetOKBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesGetOKBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesGetOKBodyLabels) UnmarshalBinary(b []byte) error {
	var res AssociationTypesGetOKBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesGetUnauthorizedBody association types get unauthorized body
swagger:model AssociationTypesGetUnauthorizedBody
*/
type AssociationTypesGetUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types get unauthorized body
func (o *AssociationTypesGetUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesGetUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesGetUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesGetUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

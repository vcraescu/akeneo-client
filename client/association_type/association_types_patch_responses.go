// Code generated by go-swagger; DO NOT EDIT.

package association_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssociationTypesPatchReader is a Reader for the AssociationTypesPatch structure.
type AssociationTypesPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssociationTypesPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAssociationTypesPatchCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewAssociationTypesPatchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssociationTypesPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAssociationTypesPatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssociationTypesPatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewAssociationTypesPatchUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAssociationTypesPatchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssociationTypesPatchCreated creates a AssociationTypesPatchCreated with default headers values
func NewAssociationTypesPatchCreated() *AssociationTypesPatchCreated {
	return &AssociationTypesPatchCreated{}
}

/*AssociationTypesPatchCreated handles this case with default header values.

Created
*/
type AssociationTypesPatchCreated struct {
	/*URI of the created resource
	 */
	Location string
}

func (o *AssociationTypesPatchCreated) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchCreated ", 201)
}

func (o *AssociationTypesPatchCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewAssociationTypesPatchNoContent creates a AssociationTypesPatchNoContent with default headers values
func NewAssociationTypesPatchNoContent() *AssociationTypesPatchNoContent {
	return &AssociationTypesPatchNoContent{}
}

/*AssociationTypesPatchNoContent handles this case with default header values.

No content to return
*/
type AssociationTypesPatchNoContent struct {
	/*URI of the updated resource
	 */
	Location string
}

func (o *AssociationTypesPatchNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchNoContent ", 204)
}

func (o *AssociationTypesPatchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewAssociationTypesPatchBadRequest creates a AssociationTypesPatchBadRequest with default headers values
func NewAssociationTypesPatchBadRequest() *AssociationTypesPatchBadRequest {
	return &AssociationTypesPatchBadRequest{}
}

/*AssociationTypesPatchBadRequest handles this case with default header values.

Bad request
*/
type AssociationTypesPatchBadRequest struct {
	Payload *AssociationTypesPatchBadRequestBody
}

func (o *AssociationTypesPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchBadRequest  %+v", 400, o.Payload)
}

func (o *AssociationTypesPatchBadRequest) GetPayload() *AssociationTypesPatchBadRequestBody {
	return o.Payload
}

func (o *AssociationTypesPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPatchBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPatchUnauthorized creates a AssociationTypesPatchUnauthorized with default headers values
func NewAssociationTypesPatchUnauthorized() *AssociationTypesPatchUnauthorized {
	return &AssociationTypesPatchUnauthorized{}
}

/*AssociationTypesPatchUnauthorized handles this case with default header values.

Authentication required
*/
type AssociationTypesPatchUnauthorized struct {
	Payload *AssociationTypesPatchUnauthorizedBody
}

func (o *AssociationTypesPatchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchUnauthorized  %+v", 401, o.Payload)
}

func (o *AssociationTypesPatchUnauthorized) GetPayload() *AssociationTypesPatchUnauthorizedBody {
	return o.Payload
}

func (o *AssociationTypesPatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPatchUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPatchForbidden creates a AssociationTypesPatchForbidden with default headers values
func NewAssociationTypesPatchForbidden() *AssociationTypesPatchForbidden {
	return &AssociationTypesPatchForbidden{}
}

/*AssociationTypesPatchForbidden handles this case with default header values.

Access forbidden
*/
type AssociationTypesPatchForbidden struct {
	Payload *AssociationTypesPatchForbiddenBody
}

func (o *AssociationTypesPatchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchForbidden  %+v", 403, o.Payload)
}

func (o *AssociationTypesPatchForbidden) GetPayload() *AssociationTypesPatchForbiddenBody {
	return o.Payload
}

func (o *AssociationTypesPatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPatchForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPatchUnsupportedMediaType creates a AssociationTypesPatchUnsupportedMediaType with default headers values
func NewAssociationTypesPatchUnsupportedMediaType() *AssociationTypesPatchUnsupportedMediaType {
	return &AssociationTypesPatchUnsupportedMediaType{}
}

/*AssociationTypesPatchUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type AssociationTypesPatchUnsupportedMediaType struct {
	Payload *AssociationTypesPatchUnsupportedMediaTypeBody
}

func (o *AssociationTypesPatchUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *AssociationTypesPatchUnsupportedMediaType) GetPayload() *AssociationTypesPatchUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *AssociationTypesPatchUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPatchUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPatchUnprocessableEntity creates a AssociationTypesPatchUnprocessableEntity with default headers values
func NewAssociationTypesPatchUnprocessableEntity() *AssociationTypesPatchUnprocessableEntity {
	return &AssociationTypesPatchUnprocessableEntity{}
}

/*AssociationTypesPatchUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type AssociationTypesPatchUnprocessableEntity struct {
	Payload *AssociationTypesPatchUnprocessableEntityBody
}

func (o *AssociationTypesPatchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/association-types/{code}][%d] associationTypesPatchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AssociationTypesPatchUnprocessableEntity) GetPayload() *AssociationTypesPatchUnprocessableEntityBody {
	return o.Payload
}

func (o *AssociationTypesPatchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPatchUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssociationTypesPatchBadRequestBody association types patch bad request body
swagger:model AssociationTypesPatchBadRequestBody
*/
type AssociationTypesPatchBadRequestBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types patch bad request body
func (o *AssociationTypesPatchBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPatchBody association types patch body
swagger:model AssociationTypesPatchBody
*/
type AssociationTypesPatchBody struct {

	// Association type code
	// Required: true
	Code *string `json:"code"`

	// When true, the association is a quantified association
	IsQuantified *bool `json:"is_quantified,omitempty"`

	// When true, the association is a two-way association
	IsTwoWay *bool `json:"is_two_way,omitempty"`

	// labels
	Labels *AssociationTypesPatchParamsBodyLabels `json:"labels,omitempty"`
}

// Validate validates this association types patch body
func (o *AssociationTypesPatchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssociationTypesPatchBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *AssociationTypesPatchBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPatchForbiddenBody association types patch forbidden body
swagger:model AssociationTypesPatchForbiddenBody
*/
type AssociationTypesPatchForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types patch forbidden body
func (o *AssociationTypesPatchForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPatchParamsBodyLabels Association type labels for each locale
swagger:model AssociationTypesPatchParamsBodyLabels
*/
type AssociationTypesPatchParamsBodyLabels struct {

	// Association type label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this association types patch params body labels
func (o *AssociationTypesPatchParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPatchUnauthorizedBody association types patch unauthorized body
swagger:model AssociationTypesPatchUnauthorizedBody
*/
type AssociationTypesPatchUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types patch unauthorized body
func (o *AssociationTypesPatchUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPatchUnprocessableEntityBody association types patch unprocessable entity body
swagger:model AssociationTypesPatchUnprocessableEntityBody
*/
type AssociationTypesPatchUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types patch unprocessable entity body
func (o *AssociationTypesPatchUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPatchUnsupportedMediaTypeBody association types patch unsupported media type body
swagger:model AssociationTypesPatchUnsupportedMediaTypeBody
*/
type AssociationTypesPatchUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types patch unsupported media type body
func (o *AssociationTypesPatchUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPatchUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPatchUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPatchUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

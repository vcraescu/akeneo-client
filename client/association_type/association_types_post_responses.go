// Code generated by go-swagger; DO NOT EDIT.

package association_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssociationTypesPostReader is a Reader for the AssociationTypesPost structure.
type AssociationTypesPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssociationTypesPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAssociationTypesPostCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssociationTypesPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAssociationTypesPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssociationTypesPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewAssociationTypesPostUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAssociationTypesPostUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssociationTypesPostCreated creates a AssociationTypesPostCreated with default headers values
func NewAssociationTypesPostCreated() *AssociationTypesPostCreated {
	return &AssociationTypesPostCreated{}
}

/*AssociationTypesPostCreated handles this case with default header values.

Created
*/
type AssociationTypesPostCreated struct {
	/*URI of the created resource
	 */
	Location string
}

func (o *AssociationTypesPostCreated) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/association-types][%d] associationTypesPostCreated ", 201)
}

func (o *AssociationTypesPostCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewAssociationTypesPostBadRequest creates a AssociationTypesPostBadRequest with default headers values
func NewAssociationTypesPostBadRequest() *AssociationTypesPostBadRequest {
	return &AssociationTypesPostBadRequest{}
}

/*AssociationTypesPostBadRequest handles this case with default header values.

Bad request
*/
type AssociationTypesPostBadRequest struct {
	Payload *AssociationTypesPostBadRequestBody
}

func (o *AssociationTypesPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/association-types][%d] associationTypesPostBadRequest  %+v", 400, o.Payload)
}

func (o *AssociationTypesPostBadRequest) GetPayload() *AssociationTypesPostBadRequestBody {
	return o.Payload
}

func (o *AssociationTypesPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPostBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPostUnauthorized creates a AssociationTypesPostUnauthorized with default headers values
func NewAssociationTypesPostUnauthorized() *AssociationTypesPostUnauthorized {
	return &AssociationTypesPostUnauthorized{}
}

/*AssociationTypesPostUnauthorized handles this case with default header values.

Authentication required
*/
type AssociationTypesPostUnauthorized struct {
	Payload *AssociationTypesPostUnauthorizedBody
}

func (o *AssociationTypesPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/association-types][%d] associationTypesPostUnauthorized  %+v", 401, o.Payload)
}

func (o *AssociationTypesPostUnauthorized) GetPayload() *AssociationTypesPostUnauthorizedBody {
	return o.Payload
}

func (o *AssociationTypesPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPostUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPostForbidden creates a AssociationTypesPostForbidden with default headers values
func NewAssociationTypesPostForbidden() *AssociationTypesPostForbidden {
	return &AssociationTypesPostForbidden{}
}

/*AssociationTypesPostForbidden handles this case with default header values.

Access forbidden
*/
type AssociationTypesPostForbidden struct {
	Payload *AssociationTypesPostForbiddenBody
}

func (o *AssociationTypesPostForbidden) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/association-types][%d] associationTypesPostForbidden  %+v", 403, o.Payload)
}

func (o *AssociationTypesPostForbidden) GetPayload() *AssociationTypesPostForbiddenBody {
	return o.Payload
}

func (o *AssociationTypesPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPostForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPostUnsupportedMediaType creates a AssociationTypesPostUnsupportedMediaType with default headers values
func NewAssociationTypesPostUnsupportedMediaType() *AssociationTypesPostUnsupportedMediaType {
	return &AssociationTypesPostUnsupportedMediaType{}
}

/*AssociationTypesPostUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type AssociationTypesPostUnsupportedMediaType struct {
	Payload *AssociationTypesPostUnsupportedMediaTypeBody
}

func (o *AssociationTypesPostUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/association-types][%d] associationTypesPostUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *AssociationTypesPostUnsupportedMediaType) GetPayload() *AssociationTypesPostUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *AssociationTypesPostUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPostUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssociationTypesPostUnprocessableEntity creates a AssociationTypesPostUnprocessableEntity with default headers values
func NewAssociationTypesPostUnprocessableEntity() *AssociationTypesPostUnprocessableEntity {
	return &AssociationTypesPostUnprocessableEntity{}
}

/*AssociationTypesPostUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type AssociationTypesPostUnprocessableEntity struct {
	Payload *AssociationTypesPostUnprocessableEntityBody
}

func (o *AssociationTypesPostUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/association-types][%d] associationTypesPostUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AssociationTypesPostUnprocessableEntity) GetPayload() *AssociationTypesPostUnprocessableEntityBody {
	return o.Payload
}

func (o *AssociationTypesPostUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AssociationTypesPostUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssociationTypesPostBadRequestBody association types post bad request body
swagger:model AssociationTypesPostBadRequestBody
*/
type AssociationTypesPostBadRequestBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types post bad request body
func (o *AssociationTypesPostBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPostBody association types post body
swagger:model AssociationTypesPostBody
*/
type AssociationTypesPostBody struct {

	// Association type code
	// Required: true
	Code *string `json:"code"`

	// When true, the association is a quantified association
	IsQuantified *bool `json:"is_quantified,omitempty"`

	// When true, the association is a two-way association
	IsTwoWay *bool `json:"is_two_way,omitempty"`

	// labels
	Labels *AssociationTypesPostParamsBodyLabels `json:"labels,omitempty"`
}

// Validate validates this association types post body
func (o *AssociationTypesPostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssociationTypesPostBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *AssociationTypesPostBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPostForbiddenBody association types post forbidden body
swagger:model AssociationTypesPostForbiddenBody
*/
type AssociationTypesPostForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types post forbidden body
func (o *AssociationTypesPostForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPostParamsBodyLabels Association type labels for each locale
swagger:model AssociationTypesPostParamsBodyLabels
*/
type AssociationTypesPostParamsBodyLabels struct {

	// Association type label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this association types post params body labels
func (o *AssociationTypesPostParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPostUnauthorizedBody association types post unauthorized body
swagger:model AssociationTypesPostUnauthorizedBody
*/
type AssociationTypesPostUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types post unauthorized body
func (o *AssociationTypesPostUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPostUnprocessableEntityBody association types post unprocessable entity body
swagger:model AssociationTypesPostUnprocessableEntityBody
*/
type AssociationTypesPostUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types post unprocessable entity body
func (o *AssociationTypesPostUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AssociationTypesPostUnsupportedMediaTypeBody association types post unsupported media type body
swagger:model AssociationTypesPostUnsupportedMediaTypeBody
*/
type AssociationTypesPostUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this association types post unsupported media type body
func (o *AssociationTypesPostUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssociationTypesPostUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssociationTypesPostUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res AssociationTypesPostUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

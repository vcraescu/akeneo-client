// Code generated by go-swagger; DO NOT EDIT.

package attribute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attribute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attribute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAttributes(params *GetAttributesParams) (*GetAttributesOK, error)

	GetAttributesCode(params *GetAttributesCodeParams) (*GetAttributesCodeOK, error)

	PatchAttributes(params *PatchAttributesParams) (*PatchAttributesOK, error)

	PatchAttributesCode(params *PatchAttributesCodeParams) (*PatchAttributesCodeCreated, *PatchAttributesCodeNoContent, error)

	PostAttributes(params *PostAttributesParams) (*PostAttributesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAttributes gets list of attributes

  This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
*/
func (a *Client) GetAttributes(params *GetAttributesParams) (*GetAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_attributes",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttributesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_attributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttributesCode gets an attribute

  This endpoint allows you to get the information about a given attribute.
*/
func (a *Client) GetAttributesCode(params *GetAttributesCodeParams) (*GetAttributesCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributesCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_attributes__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/attributes/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttributesCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttributesCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_attributes__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAttributes updates create several attributes

  This endpoint allows you to update and/or create several attributes at once.
*/
func (a *Client) PatchAttributes(params *PatchAttributesParams) (*PatchAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_attributes",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAttributesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_attributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAttributesCode updates create an attribute

  This endpoint allows you to update a given attribute. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
*/
func (a *Client) PatchAttributesCode(params *PatchAttributesCodeParams) (*PatchAttributesCodeCreated, *PatchAttributesCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAttributesCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_attributes__code_",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/attributes/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAttributesCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchAttributesCodeCreated:
		return value, nil, nil
	case *PatchAttributesCodeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attribute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAttributes creates a new attribute

  This endpoint allows you to create a new attribute.
*/
func (a *Client) PostAttributes(params *PostAttributesParams) (*PostAttributesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_attributes",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAttributesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAttributesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_attributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

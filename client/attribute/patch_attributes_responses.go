// Code generated by go-swagger; DO NOT EDIT.

package attribute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchAttributesReader is a Reader for the PatchAttributes structure.
type PatchAttributesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAttributesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAttributesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchAttributesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAttributesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchAttributesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAttributesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAttributesOK creates a PatchAttributesOK with default headers values
func NewPatchAttributesOK() *PatchAttributesOK {
	return &PatchAttributesOK{}
}

/*PatchAttributesOK handles this case with default header values.

OK
*/
type PatchAttributesOK struct {
	Payload *PatchAttributesOKBody
}

func (o *PatchAttributesOK) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/attributes][%d] patchAttributesOK  %+v", 200, o.Payload)
}

func (o *PatchAttributesOK) GetPayload() *PatchAttributesOKBody {
	return o.Payload
}

func (o *PatchAttributesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAttributesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAttributesUnauthorized creates a PatchAttributesUnauthorized with default headers values
func NewPatchAttributesUnauthorized() *PatchAttributesUnauthorized {
	return &PatchAttributesUnauthorized{}
}

/*PatchAttributesUnauthorized handles this case with default header values.

Authentication required
*/
type PatchAttributesUnauthorized struct {
	Payload *PatchAttributesUnauthorizedBody
}

func (o *PatchAttributesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/attributes][%d] patchAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAttributesUnauthorized) GetPayload() *PatchAttributesUnauthorizedBody {
	return o.Payload
}

func (o *PatchAttributesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAttributesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAttributesForbidden creates a PatchAttributesForbidden with default headers values
func NewPatchAttributesForbidden() *PatchAttributesForbidden {
	return &PatchAttributesForbidden{}
}

/*PatchAttributesForbidden handles this case with default header values.

Access forbidden
*/
type PatchAttributesForbidden struct {
	Payload *PatchAttributesForbiddenBody
}

func (o *PatchAttributesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/attributes][%d] patchAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchAttributesForbidden) GetPayload() *PatchAttributesForbiddenBody {
	return o.Payload
}

func (o *PatchAttributesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAttributesForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAttributesRequestEntityTooLarge creates a PatchAttributesRequestEntityTooLarge with default headers values
func NewPatchAttributesRequestEntityTooLarge() *PatchAttributesRequestEntityTooLarge {
	return &PatchAttributesRequestEntityTooLarge{}
}

/*PatchAttributesRequestEntityTooLarge handles this case with default header values.

Request Entity Too Large
*/
type PatchAttributesRequestEntityTooLarge struct {
	Payload *PatchAttributesRequestEntityTooLargeBody
}

func (o *PatchAttributesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/attributes][%d] patchAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAttributesRequestEntityTooLarge) GetPayload() *PatchAttributesRequestEntityTooLargeBody {
	return o.Payload
}

func (o *PatchAttributesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAttributesRequestEntityTooLargeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAttributesUnsupportedMediaType creates a PatchAttributesUnsupportedMediaType with default headers values
func NewPatchAttributesUnsupportedMediaType() *PatchAttributesUnsupportedMediaType {
	return &PatchAttributesUnsupportedMediaType{}
}

/*PatchAttributesUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchAttributesUnsupportedMediaType struct {
	Payload *PatchAttributesUnsupportedMediaTypeBody
}

func (o *PatchAttributesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/attributes][%d] patchAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAttributesUnsupportedMediaType) GetPayload() *PatchAttributesUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchAttributesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAttributesUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchAttributesBody patch attributes body
swagger:model PatchAttributesBody
*/
type PatchAttributesBody struct {

	// Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
	AllowedExtensions []string `json:"allowed_extensions"`

	// To make the attribute locale specfic, specify here for which locales it is specific
	AvailableLocales []string `json:"available_locales"`

	// Attribute code
	// Required: true
	Code *string `json:"code"`

	// Maximum date allowed when the attribute type is `pim_catalog_date`
	// Format: date-time
	DateMax strfmt.DateTime `json:"date_max,omitempty"`

	// Minimum date allowed when the attribute type is `pim_catalog_date`
	// Format: date-time
	DateMin strfmt.DateTime `json:"date_min,omitempty"`

	// Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
	DecimalsAllowed bool `json:"decimals_allowed,omitempty"`

	// Default metric unit when the attribute type is `pim_catalog_metric`
	DefaultMetricUnit string `json:"default_metric_unit,omitempty"`

	// Attribute group
	// Required: true
	Group *string `json:"group"`

	// group labels
	GroupLabels *PatchAttributesParamsBodyGroupLabels `json:"group_labels,omitempty"`

	// labels
	Labels *PatchAttributesParamsBodyLabels `json:"labels,omitempty"`

	// Whether the attribute is localizable, i.e. can have one value by locale
	Localizable *bool `json:"localizable,omitempty"`

	// Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
	MaxCharacters int64 `json:"max_characters,omitempty"`

	// Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
	MaxFileSize string `json:"max_file_size,omitempty"`

	// Metric family when the attribute type is `pim_catalog_metric`
	MetricFamily string `json:"metric_family,omitempty"`

	// Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
	NegativeAllowed bool `json:"negative_allowed,omitempty"`

	// Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
	NumberMax string `json:"number_max,omitempty"`

	// Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
	NumberMin string `json:"number_min,omitempty"`

	// Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
	ReferenceDataName string `json:"reference_data_name,omitempty"`

	// Whether the attribute is scopable, i.e. can have one value by channel
	Scopable *bool `json:"scopable,omitempty"`

	// Order of the attribute in its group
	SortOrder int64 `json:"sort_order,omitempty"`

	// Attribute type
	// Required: true
	// Enum: [pim_catalog_identifier pim_catalog_metric pim_catalog_number pim_catalog_reference_data_multi_select pim_catalog_reference_data_simple_select pim_catalog_simpleselect pim_catalog_multiselect pim_catalog_date pim_catalog_textarea pim_catalog_text pim_catalog_file pim_catalog_image pim_catalog_price_collection pim_catalog_boolean akeneo_reference_entity akeneo_reference_entity_collection pim_catalog_asset_collection]
	Type *string `json:"type"`

	// Whether two values for the attribute cannot be the same
	Unique bool `json:"unique,omitempty"`

	// Whether the attribute can be used as a filter for the product grid in the PIM user interface
	UseableAsGridFilter bool `json:"useable_as_grid_filter,omitempty"`

	// Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
	ValidationRegexp string `json:"validation_regexp,omitempty"`

	// Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
	ValidationRule string `json:"validation_rule,omitempty"`

	// Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
	WysiwygEnabled bool `json:"wysiwyg_enabled,omitempty"`
}

// Validate validates this patch attributes body
func (o *PatchAttributesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGroupLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAttributesBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchAttributesBody) validateDateMax(formats strfmt.Registry) error {

	if swag.IsZero(o.DateMax) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"date_max", "body", "date-time", o.DateMax.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchAttributesBody) validateDateMin(formats strfmt.Registry) error {

	if swag.IsZero(o.DateMin) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"date_min", "body", "date-time", o.DateMin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchAttributesBody) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"group", "body", o.Group); err != nil {
		return err
	}

	return nil
}

func (o *PatchAttributesBody) validateGroupLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.GroupLabels) { // not required
		return nil
	}

	if o.GroupLabels != nil {
		if err := o.GroupLabels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "group_labels")
			}
			return err
		}
	}

	return nil
}

func (o *PatchAttributesBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

var patchAttributesBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pim_catalog_identifier","pim_catalog_metric","pim_catalog_number","pim_catalog_reference_data_multi_select","pim_catalog_reference_data_simple_select","pim_catalog_simpleselect","pim_catalog_multiselect","pim_catalog_date","pim_catalog_textarea","pim_catalog_text","pim_catalog_file","pim_catalog_image","pim_catalog_price_collection","pim_catalog_boolean","akeneo_reference_entity","akeneo_reference_entity_collection","pim_catalog_asset_collection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchAttributesBodyTypeTypePropEnum = append(patchAttributesBodyTypeTypePropEnum, v)
	}
}

const (

	// PatchAttributesBodyTypePimCatalogIdentifier captures enum value "pim_catalog_identifier"
	PatchAttributesBodyTypePimCatalogIdentifier string = "pim_catalog_identifier"

	// PatchAttributesBodyTypePimCatalogMetric captures enum value "pim_catalog_metric"
	PatchAttributesBodyTypePimCatalogMetric string = "pim_catalog_metric"

	// PatchAttributesBodyTypePimCatalogNumber captures enum value "pim_catalog_number"
	PatchAttributesBodyTypePimCatalogNumber string = "pim_catalog_number"

	// PatchAttributesBodyTypePimCatalogReferenceDataMultiSelect captures enum value "pim_catalog_reference_data_multi_select"
	PatchAttributesBodyTypePimCatalogReferenceDataMultiSelect string = "pim_catalog_reference_data_multi_select"

	// PatchAttributesBodyTypePimCatalogReferenceDataSimpleSelect captures enum value "pim_catalog_reference_data_simple_select"
	PatchAttributesBodyTypePimCatalogReferenceDataSimpleSelect string = "pim_catalog_reference_data_simple_select"

	// PatchAttributesBodyTypePimCatalogSimpleselect captures enum value "pim_catalog_simpleselect"
	PatchAttributesBodyTypePimCatalogSimpleselect string = "pim_catalog_simpleselect"

	// PatchAttributesBodyTypePimCatalogMultiselect captures enum value "pim_catalog_multiselect"
	PatchAttributesBodyTypePimCatalogMultiselect string = "pim_catalog_multiselect"

	// PatchAttributesBodyTypePimCatalogDate captures enum value "pim_catalog_date"
	PatchAttributesBodyTypePimCatalogDate string = "pim_catalog_date"

	// PatchAttributesBodyTypePimCatalogTextarea captures enum value "pim_catalog_textarea"
	PatchAttributesBodyTypePimCatalogTextarea string = "pim_catalog_textarea"

	// PatchAttributesBodyTypePimCatalogText captures enum value "pim_catalog_text"
	PatchAttributesBodyTypePimCatalogText string = "pim_catalog_text"

	// PatchAttributesBodyTypePimCatalogFile captures enum value "pim_catalog_file"
	PatchAttributesBodyTypePimCatalogFile string = "pim_catalog_file"

	// PatchAttributesBodyTypePimCatalogImage captures enum value "pim_catalog_image"
	PatchAttributesBodyTypePimCatalogImage string = "pim_catalog_image"

	// PatchAttributesBodyTypePimCatalogPriceCollection captures enum value "pim_catalog_price_collection"
	PatchAttributesBodyTypePimCatalogPriceCollection string = "pim_catalog_price_collection"

	// PatchAttributesBodyTypePimCatalogBoolean captures enum value "pim_catalog_boolean"
	PatchAttributesBodyTypePimCatalogBoolean string = "pim_catalog_boolean"

	// PatchAttributesBodyTypeAkeneoReferenceEntity captures enum value "akeneo_reference_entity"
	PatchAttributesBodyTypeAkeneoReferenceEntity string = "akeneo_reference_entity"

	// PatchAttributesBodyTypeAkeneoReferenceEntityCollection captures enum value "akeneo_reference_entity_collection"
	PatchAttributesBodyTypeAkeneoReferenceEntityCollection string = "akeneo_reference_entity_collection"

	// PatchAttributesBodyTypePimCatalogAssetCollection captures enum value "pim_catalog_asset_collection"
	PatchAttributesBodyTypePimCatalogAssetCollection string = "pim_catalog_asset_collection"
)

// prop value enum
func (o *PatchAttributesBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchAttributesBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchAttributesBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesBody) UnmarshalBinary(b []byte) error {
	var res PatchAttributesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesForbiddenBody patch attributes forbidden body
swagger:model PatchAttributesForbiddenBody
*/
type PatchAttributesForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch attributes forbidden body
func (o *PatchAttributesForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PatchAttributesForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesOKBody patch attributes o k body
swagger:model PatchAttributesOKBody
*/
type PatchAttributesOKBody struct {

	// Resource code, only filled when the resource is not a product
	Code string `json:"code,omitempty"`

	// Resource identifier, only filled when the resource is a product
	Identifier string `json:"identifier,omitempty"`

	// Line number
	Line int64 `json:"line,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`

	// HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
	StatusCode int64 `json:"status_code,omitempty"`
}

// Validate validates this patch attributes o k body
func (o *PatchAttributesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesOKBody) UnmarshalBinary(b []byte) error {
	var res PatchAttributesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesParamsBodyGroupLabels Group labels for each locale
swagger:model PatchAttributesParamsBodyGroupLabels
*/
type PatchAttributesParamsBodyGroupLabels struct {

	// Group label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch attributes params body group labels
func (o *PatchAttributesParamsBodyGroupLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesParamsBodyGroupLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesParamsBodyGroupLabels) UnmarshalBinary(b []byte) error {
	var res PatchAttributesParamsBodyGroupLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesParamsBodyLabels Attribute labels for each locale
swagger:model PatchAttributesParamsBodyLabels
*/
type PatchAttributesParamsBodyLabels struct {

	// Attribute label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch attributes params body labels
func (o *PatchAttributesParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res PatchAttributesParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesRequestEntityTooLargeBody patch attributes request entity too large body
swagger:model PatchAttributesRequestEntityTooLargeBody
*/
type PatchAttributesRequestEntityTooLargeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch attributes request entity too large body
func (o *PatchAttributesRequestEntityTooLargeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesRequestEntityTooLargeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesRequestEntityTooLargeBody) UnmarshalBinary(b []byte) error {
	var res PatchAttributesRequestEntityTooLargeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesUnauthorizedBody patch attributes unauthorized body
swagger:model PatchAttributesUnauthorizedBody
*/
type PatchAttributesUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch attributes unauthorized body
func (o *PatchAttributesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchAttributesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAttributesUnsupportedMediaTypeBody patch attributes unsupported media type body
swagger:model PatchAttributesUnsupportedMediaTypeBody
*/
type PatchAttributesUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch attributes unsupported media type body
func (o *PatchAttributesUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAttributesUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAttributesUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchAttributesUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

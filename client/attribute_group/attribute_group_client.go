// Code generated by go-swagger; DO NOT EDIT.

package attribute_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attribute group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attribute group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AttributeGroupsGet(params *AttributeGroupsGetParams) (*AttributeGroupsGetOK, error)

	AttributeGroupsGetList(params *AttributeGroupsGetListParams) (*AttributeGroupsGetListOK, error)

	AttributeGroupsPatch(params *AttributeGroupsPatchParams) (*AttributeGroupsPatchCreated, *AttributeGroupsPatchNoContent, error)

	AttributeGroupsPost(params *AttributeGroupsPostParams) (*AttributeGroupsPostCreated, error)

	SeveralAttributeGroupsPatch(params *SeveralAttributeGroupsPatchParams) (*SeveralAttributeGroupsPatchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AttributeGroupsGet gets an attribute group

  This endpoint allows you to get the information about a given attribute group.
*/
func (a *Client) AttributeGroupsGet(params *AttributeGroupsGetParams) (*AttributeGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributeGroupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attribute_groups_get",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/attribute-groups/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttributeGroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributeGroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attribute_groups_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AttributeGroupsGetList gets list of attribute groups

  This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
*/
func (a *Client) AttributeGroupsGetList(params *AttributeGroupsGetListParams) (*AttributeGroupsGetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributeGroupsGetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attribute_groups_get_list",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/attribute-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttributeGroupsGetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributeGroupsGetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attribute_groups_get_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AttributeGroupsPatch updates create an attribute group

  This endpoint allows you to update a given attribute group. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
*/
func (a *Client) AttributeGroupsPatch(params *AttributeGroupsPatchParams) (*AttributeGroupsPatchCreated, *AttributeGroupsPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributeGroupsPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attribute_groups_patch",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/attribute-groups/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttributeGroupsPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AttributeGroupsPatchCreated:
		return value, nil, nil
	case *AttributeGroupsPatchNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attribute_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AttributeGroupsPost creates a new attribute group

  This endpoint allows you to create a new attribute group.
*/
func (a *Client) AttributeGroupsPost(params *AttributeGroupsPostParams) (*AttributeGroupsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttributeGroupsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attribute_groups_post",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/attribute-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttributeGroupsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttributeGroupsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attribute_groups_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SeveralAttributeGroupsPatch updates create several attribute groups

  This endpoint allows you to update and/or create several attribute groups at once.
*/
func (a *Client) SeveralAttributeGroupsPatch(params *SeveralAttributeGroupsPatchParams) (*SeveralAttributeGroupsPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeveralAttributeGroupsPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "several_attribute_groups_patch",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/attribute-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SeveralAttributeGroupsPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeveralAttributeGroupsPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for several_attribute_groups_patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

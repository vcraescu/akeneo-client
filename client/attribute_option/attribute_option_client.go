// Code generated by go-swagger; DO NOT EDIT.

package attribute_option

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attribute option API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attribute option API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAttributesAttributeCodeOptions(params *GetAttributesAttributeCodeOptionsParams) (*GetAttributesAttributeCodeOptionsOK, error)

	GetAttributesAttributeCodeOptionsCode(params *GetAttributesAttributeCodeOptionsCodeParams) (*GetAttributesAttributeCodeOptionsCodeOK, error)

	PatchAttributesAttributeCodeOptions(params *PatchAttributesAttributeCodeOptionsParams) (*PatchAttributesAttributeCodeOptionsOK, error)

	PatchAttributesAttributeCodeOptionsCode(params *PatchAttributesAttributeCodeOptionsCodeParams) (*PatchAttributesAttributeCodeOptionsCodeCreated, *PatchAttributesAttributeCodeOptionsCodeNoContent, error)

	PostAttributesAttributeCodeOptions(params *PostAttributesAttributeCodeOptionsParams) (*PostAttributesAttributeCodeOptionsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAttributesAttributeCodeOptions gets list of attribute options

  This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
*/
func (a *Client) GetAttributesAttributeCodeOptions(params *GetAttributesAttributeCodeOptionsParams) (*GetAttributesAttributeCodeOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributesAttributeCodeOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_attributes__attribute_code__options",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/attributes/{attribute_code}/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttributesAttributeCodeOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttributesAttributeCodeOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_attributes__attribute_code__options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttributesAttributeCodeOptionsCode gets an attribute option

  This endpoint allows you to get the information about a given attribute option.
*/
func (a *Client) GetAttributesAttributeCodeOptionsCode(params *GetAttributesAttributeCodeOptionsCodeParams) (*GetAttributesAttributeCodeOptionsCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributesAttributeCodeOptionsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_attributes__attribute_code__options__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/attributes/{attribute_code}/options/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttributesAttributeCodeOptionsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttributesAttributeCodeOptionsCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_attributes__attribute_code__options__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAttributesAttributeCodeOptions updates create several attribute options

  This endpoint allows you to update several attribute options at once.
*/
func (a *Client) PatchAttributesAttributeCodeOptions(params *PatchAttributesAttributeCodeOptionsParams) (*PatchAttributesAttributeCodeOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAttributesAttributeCodeOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_attributes__attribute_code__options",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/attributes/{attribute_code}/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAttributesAttributeCodeOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAttributesAttributeCodeOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_attributes__attribute_code__options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAttributesAttributeCodeOptionsCode updates create an attribute option

  This endpoint allows you to update a given attribute option. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
*/
func (a *Client) PatchAttributesAttributeCodeOptionsCode(params *PatchAttributesAttributeCodeOptionsCodeParams) (*PatchAttributesAttributeCodeOptionsCodeCreated, *PatchAttributesAttributeCodeOptionsCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAttributesAttributeCodeOptionsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_attributes__attribute_code__options__code_",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/attributes/{attribute_code}/options/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAttributesAttributeCodeOptionsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchAttributesAttributeCodeOptionsCodeCreated:
		return value, nil, nil
	case *PatchAttributesAttributeCodeOptionsCodeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attribute_option: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAttributesAttributeCodeOptions creates a new attribute option

  This endpoint allows you to create a new attribute option.
*/
func (a *Client) PostAttributesAttributeCodeOptions(params *PostAttributesAttributeCodeOptionsParams) (*PostAttributesAttributeCodeOptionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAttributesAttributeCodeOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_attributes__attribute_code__options",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/attributes/{attribute_code}/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAttributesAttributeCodeOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAttributesAttributeCodeOptionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_attributes__attribute_code__options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

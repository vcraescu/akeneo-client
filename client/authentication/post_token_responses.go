// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTokenReader is a Reader for the PostToken structure.
type PostTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostTokenUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostTokenUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostTokenOK creates a PostTokenOK with default headers values
func NewPostTokenOK() *PostTokenOK {
	return &PostTokenOK{}
}

/*PostTokenOK handles this case with default header values.

Return an authentication token
*/
type PostTokenOK struct {
	Payload *PostTokenOKBody
}

func (o *PostTokenOK) Error() string {
	return fmt.Sprintf("[POST /api/oauth/v1/token][%d] postTokenOK  %+v", 200, o.Payload)
}

func (o *PostTokenOK) GetPayload() *PostTokenOKBody {
	return o.Payload
}

func (o *PostTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTokenOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenBadRequest creates a PostTokenBadRequest with default headers values
func NewPostTokenBadRequest() *PostTokenBadRequest {
	return &PostTokenBadRequest{}
}

/*PostTokenBadRequest handles this case with default header values.

Bad request
*/
type PostTokenBadRequest struct {
	Payload *PostTokenBadRequestBody
}

func (o *PostTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/oauth/v1/token][%d] postTokenBadRequest  %+v", 400, o.Payload)
}

func (o *PostTokenBadRequest) GetPayload() *PostTokenBadRequestBody {
	return o.Payload
}

func (o *PostTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTokenBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenUnsupportedMediaType creates a PostTokenUnsupportedMediaType with default headers values
func NewPostTokenUnsupportedMediaType() *PostTokenUnsupportedMediaType {
	return &PostTokenUnsupportedMediaType{}
}

/*PostTokenUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PostTokenUnsupportedMediaType struct {
	Payload *PostTokenUnsupportedMediaTypeBody
}

func (o *PostTokenUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/oauth/v1/token][%d] postTokenUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostTokenUnsupportedMediaType) GetPayload() *PostTokenUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PostTokenUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTokenUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenUnprocessableEntity creates a PostTokenUnprocessableEntity with default headers values
func NewPostTokenUnprocessableEntity() *PostTokenUnprocessableEntity {
	return &PostTokenUnprocessableEntity{}
}

/*PostTokenUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type PostTokenUnprocessableEntity struct {
	Payload *PostTokenUnprocessableEntityBody
}

func (o *PostTokenUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/oauth/v1/token][%d] postTokenUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostTokenUnprocessableEntity) GetPayload() *PostTokenUnprocessableEntityBody {
	return o.Payload
}

func (o *PostTokenUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTokenUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostTokenBadRequestBody post token bad request body
swagger:model PostTokenBadRequestBody
*/
type PostTokenBadRequestBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this post token bad request body
func (o *PostTokenBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostTokenBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTokenBody post token body
swagger:model PostTokenBody
*/
type PostTokenBody struct {

	// Always equal to "password"
	// Required: true
	GrantType *string `json:"grant_type"`

	// Your PIM password
	// Required: true
	Password *string `json:"password"`

	// Your PIM username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this post token body
func (o *PostTokenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGrantType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenBody) validateGrantType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"grant_type", "body", o.GrantType); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenBody) UnmarshalBinary(b []byte) error {
	var res PostTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTokenOKBody post token o k body
swagger:model PostTokenOKBody
*/
type PostTokenOKBody struct {

	// Authentication token that should be given in every authenticated request to the API
	AccessToken string `json:"access_token,omitempty"`

	// Validity of the token given in seconds, 3600s = 1h by default
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// Use this token when your access token has expired. See <a href="/documentation/authentication.html#refresh-an-expired-token">Refresh an expired token</a> section for more details.
	RefreshToken string `json:"refresh_token,omitempty"`

	// Unused, always equal to "null"
	Scope string `json:"scope,omitempty"`

	// Token type, always equal to "bearer"
	TokenType string `json:"token_type,omitempty"`
}

// Validate validates this post token o k body
func (o *PostTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenOKBody) UnmarshalBinary(b []byte) error {
	var res PostTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTokenUnprocessableEntityBody post token unprocessable entity body
swagger:model PostTokenUnprocessableEntityBody
*/
type PostTokenUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this post token unprocessable entity body
func (o *PostTokenUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res PostTokenUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTokenUnsupportedMediaTypeBody post token unsupported media type body
swagger:model PostTokenUnsupportedMediaTypeBody
*/
type PostTokenUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this post token unsupported media type body
func (o *PostTokenUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PostTokenUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

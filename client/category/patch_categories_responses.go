// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchCategoriesReader is a Reader for the PatchCategories structure.
type PatchCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchCategoriesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchCategoriesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchCategoriesOK creates a PatchCategoriesOK with default headers values
func NewPatchCategoriesOK() *PatchCategoriesOK {
	return &PatchCategoriesOK{}
}

/*PatchCategoriesOK handles this case with default header values.

OK
*/
type PatchCategoriesOK struct {
	Payload *PatchCategoriesOKBody
}

func (o *PatchCategoriesOK) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/categories][%d] patchCategoriesOK  %+v", 200, o.Payload)
}

func (o *PatchCategoriesOK) GetPayload() *PatchCategoriesOKBody {
	return o.Payload
}

func (o *PatchCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchCategoriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCategoriesUnauthorized creates a PatchCategoriesUnauthorized with default headers values
func NewPatchCategoriesUnauthorized() *PatchCategoriesUnauthorized {
	return &PatchCategoriesUnauthorized{}
}

/*PatchCategoriesUnauthorized handles this case with default header values.

Authentication required
*/
type PatchCategoriesUnauthorized struct {
	Payload *PatchCategoriesUnauthorizedBody
}

func (o *PatchCategoriesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/categories][%d] patchCategoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchCategoriesUnauthorized) GetPayload() *PatchCategoriesUnauthorizedBody {
	return o.Payload
}

func (o *PatchCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchCategoriesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCategoriesForbidden creates a PatchCategoriesForbidden with default headers values
func NewPatchCategoriesForbidden() *PatchCategoriesForbidden {
	return &PatchCategoriesForbidden{}
}

/*PatchCategoriesForbidden handles this case with default header values.

Access forbidden
*/
type PatchCategoriesForbidden struct {
	Payload *PatchCategoriesForbiddenBody
}

func (o *PatchCategoriesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/categories][%d] patchCategoriesForbidden  %+v", 403, o.Payload)
}

func (o *PatchCategoriesForbidden) GetPayload() *PatchCategoriesForbiddenBody {
	return o.Payload
}

func (o *PatchCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchCategoriesForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCategoriesRequestEntityTooLarge creates a PatchCategoriesRequestEntityTooLarge with default headers values
func NewPatchCategoriesRequestEntityTooLarge() *PatchCategoriesRequestEntityTooLarge {
	return &PatchCategoriesRequestEntityTooLarge{}
}

/*PatchCategoriesRequestEntityTooLarge handles this case with default header values.

Request Entity Too Large
*/
type PatchCategoriesRequestEntityTooLarge struct {
	Payload *PatchCategoriesRequestEntityTooLargeBody
}

func (o *PatchCategoriesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/categories][%d] patchCategoriesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchCategoriesRequestEntityTooLarge) GetPayload() *PatchCategoriesRequestEntityTooLargeBody {
	return o.Payload
}

func (o *PatchCategoriesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchCategoriesRequestEntityTooLargeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCategoriesUnsupportedMediaType creates a PatchCategoriesUnsupportedMediaType with default headers values
func NewPatchCategoriesUnsupportedMediaType() *PatchCategoriesUnsupportedMediaType {
	return &PatchCategoriesUnsupportedMediaType{}
}

/*PatchCategoriesUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchCategoriesUnsupportedMediaType struct {
	Payload *PatchCategoriesUnsupportedMediaTypeBody
}

func (o *PatchCategoriesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/categories][%d] patchCategoriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchCategoriesUnsupportedMediaType) GetPayload() *PatchCategoriesUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchCategoriesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchCategoriesUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchCategoriesBody patch categories body
swagger:model PatchCategoriesBody
*/
type PatchCategoriesBody struct {

	// Category code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *PatchCategoriesParamsBodyLabels `json:"labels,omitempty"`

	// Category code of the parent's category
	Parent *string `json:"parent,omitempty"`
}

// Validate validates this patch categories body
func (o *PatchCategoriesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchCategoriesBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchCategoriesBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesBody) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchCategoriesForbiddenBody patch categories forbidden body
swagger:model PatchCategoriesForbiddenBody
*/
type PatchCategoriesForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch categories forbidden body
func (o *PatchCategoriesForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchCategoriesOKBody patch categories o k body
swagger:model PatchCategoriesOKBody
*/
type PatchCategoriesOKBody struct {

	// Resource code, only filled when the resource is not a product
	Code string `json:"code,omitempty"`

	// Resource identifier, only filled when the resource is a product
	Identifier string `json:"identifier,omitempty"`

	// Line number
	Line int64 `json:"line,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`

	// HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
	StatusCode int64 `json:"status_code,omitempty"`
}

// Validate validates this patch categories o k body
func (o *PatchCategoriesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesOKBody) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchCategoriesParamsBodyLabels Category labels for each locale
swagger:model PatchCategoriesParamsBodyLabels
*/
type PatchCategoriesParamsBodyLabels struct {

	// Category label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch categories params body labels
func (o *PatchCategoriesParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchCategoriesRequestEntityTooLargeBody patch categories request entity too large body
swagger:model PatchCategoriesRequestEntityTooLargeBody
*/
type PatchCategoriesRequestEntityTooLargeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch categories request entity too large body
func (o *PatchCategoriesRequestEntityTooLargeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesRequestEntityTooLargeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesRequestEntityTooLargeBody) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesRequestEntityTooLargeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchCategoriesUnauthorizedBody patch categories unauthorized body
swagger:model PatchCategoriesUnauthorizedBody
*/
type PatchCategoriesUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch categories unauthorized body
func (o *PatchCategoriesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchCategoriesUnsupportedMediaTypeBody patch categories unsupported media type body
swagger:model PatchCategoriesUnsupportedMediaTypeBody
*/
type PatchCategoriesUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch categories unsupported media type body
func (o *PatchCategoriesUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchCategoriesUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchCategoriesUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchCategoriesUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

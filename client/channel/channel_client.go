// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new channel API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for channel API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChannelsPatch(params *ChannelsPatchParams) (*ChannelsPatchCreated, *ChannelsPatchNoContent, error)

	ChannelsPost(params *ChannelsPostParams) (*ChannelsPostCreated, error)

	GetChannels(params *GetChannelsParams) (*GetChannelsOK, error)

	GetChannelsCode(params *GetChannelsCodeParams) (*GetChannelsCodeOK, error)

	SeveralChannelsPatch(params *SeveralChannelsPatchParams) (*SeveralChannelsPatchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChannelsPatch updates create a channel

  This endpoint allows you to update a given channel. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
*/
func (a *Client) ChannelsPatch(params *ChannelsPatchParams) (*ChannelsPatchCreated, *ChannelsPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "channels_patch",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/channels/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChannelsPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChannelsPatchCreated:
		return value, nil, nil
	case *ChannelsPatchNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for channel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChannelsPost creates a new channel

  This endpoint allows you to create a new channel.
*/
func (a *Client) ChannelsPost(params *ChannelsPostParams) (*ChannelsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "channels_post",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChannelsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for channels_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChannels gets a list of channels

  This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
*/
func (a *Client) GetChannels(params *GetChannelsParams) (*GetChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_channels",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_channels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChannelsCode gets a channel

  This endpoint allows you to get the information about a given channel.
*/
func (a *Client) GetChannelsCode(params *GetChannelsCodeParams) (*GetChannelsCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_channels__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/channels/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelsCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_channels__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SeveralChannelsPatch updates create several channels

  This endpoint allows you to update and/or create several channels at once.
*/
func (a *Client) SeveralChannelsPatch(params *SeveralChannelsPatchParams) (*SeveralChannelsPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeveralChannelsPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "several_channels_patch",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SeveralChannelsPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeveralChannelsPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for several_channels_patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelsPatchReader is a Reader for the ChannelsPatch structure.
type ChannelsPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChannelsPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewChannelsPatchCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewChannelsPatchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChannelsPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChannelsPatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChannelsPatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewChannelsPatchUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewChannelsPatchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewChannelsPatchCreated creates a ChannelsPatchCreated with default headers values
func NewChannelsPatchCreated() *ChannelsPatchCreated {
	return &ChannelsPatchCreated{}
}

/*ChannelsPatchCreated handles this case with default header values.

Created
*/
type ChannelsPatchCreated struct {
	/*URI of the created resource
	 */
	Location string
}

func (o *ChannelsPatchCreated) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchCreated ", 201)
}

func (o *ChannelsPatchCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewChannelsPatchNoContent creates a ChannelsPatchNoContent with default headers values
func NewChannelsPatchNoContent() *ChannelsPatchNoContent {
	return &ChannelsPatchNoContent{}
}

/*ChannelsPatchNoContent handles this case with default header values.

No content to return
*/
type ChannelsPatchNoContent struct {
	/*URI of the updated resource
	 */
	Location string
}

func (o *ChannelsPatchNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchNoContent ", 204)
}

func (o *ChannelsPatchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewChannelsPatchBadRequest creates a ChannelsPatchBadRequest with default headers values
func NewChannelsPatchBadRequest() *ChannelsPatchBadRequest {
	return &ChannelsPatchBadRequest{}
}

/*ChannelsPatchBadRequest handles this case with default header values.

Bad request
*/
type ChannelsPatchBadRequest struct {
	Payload *ChannelsPatchBadRequestBody
}

func (o *ChannelsPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchBadRequest  %+v", 400, o.Payload)
}

func (o *ChannelsPatchBadRequest) GetPayload() *ChannelsPatchBadRequestBody {
	return o.Payload
}

func (o *ChannelsPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPatchBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPatchUnauthorized creates a ChannelsPatchUnauthorized with default headers values
func NewChannelsPatchUnauthorized() *ChannelsPatchUnauthorized {
	return &ChannelsPatchUnauthorized{}
}

/*ChannelsPatchUnauthorized handles this case with default header values.

Authentication required
*/
type ChannelsPatchUnauthorized struct {
	Payload *ChannelsPatchUnauthorizedBody
}

func (o *ChannelsPatchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchUnauthorized  %+v", 401, o.Payload)
}

func (o *ChannelsPatchUnauthorized) GetPayload() *ChannelsPatchUnauthorizedBody {
	return o.Payload
}

func (o *ChannelsPatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPatchUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPatchForbidden creates a ChannelsPatchForbidden with default headers values
func NewChannelsPatchForbidden() *ChannelsPatchForbidden {
	return &ChannelsPatchForbidden{}
}

/*ChannelsPatchForbidden handles this case with default header values.

Access forbidden
*/
type ChannelsPatchForbidden struct {
	Payload *ChannelsPatchForbiddenBody
}

func (o *ChannelsPatchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchForbidden  %+v", 403, o.Payload)
}

func (o *ChannelsPatchForbidden) GetPayload() *ChannelsPatchForbiddenBody {
	return o.Payload
}

func (o *ChannelsPatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPatchForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPatchUnsupportedMediaType creates a ChannelsPatchUnsupportedMediaType with default headers values
func NewChannelsPatchUnsupportedMediaType() *ChannelsPatchUnsupportedMediaType {
	return &ChannelsPatchUnsupportedMediaType{}
}

/*ChannelsPatchUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type ChannelsPatchUnsupportedMediaType struct {
	Payload *ChannelsPatchUnsupportedMediaTypeBody
}

func (o *ChannelsPatchUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ChannelsPatchUnsupportedMediaType) GetPayload() *ChannelsPatchUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *ChannelsPatchUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPatchUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPatchUnprocessableEntity creates a ChannelsPatchUnprocessableEntity with default headers values
func NewChannelsPatchUnprocessableEntity() *ChannelsPatchUnprocessableEntity {
	return &ChannelsPatchUnprocessableEntity{}
}

/*ChannelsPatchUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type ChannelsPatchUnprocessableEntity struct {
	Payload *ChannelsPatchUnprocessableEntityBody
}

func (o *ChannelsPatchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/channels/{code}][%d] channelsPatchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ChannelsPatchUnprocessableEntity) GetPayload() *ChannelsPatchUnprocessableEntityBody {
	return o.Payload
}

func (o *ChannelsPatchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPatchUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsPatchBadRequestBody channels patch bad request body
swagger:model ChannelsPatchBadRequestBody
*/
type ChannelsPatchBadRequestBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels patch bad request body
func (o *ChannelsPatchBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchBody channels patch body
swagger:model ChannelsPatchBody
*/
type ChannelsPatchBody struct {

	// Code of the category tree linked to the channel
	// Required: true
	CategoryTree *string `json:"category_tree"`

	// Channel code
	// Required: true
	Code *string `json:"code"`

	// conversion units
	ConversionUnits *ChannelsPatchParamsBodyConversionUnits `json:"conversion_units,omitempty"`

	// Codes of activated currencies for the channel
	// Required: true
	Currencies []string `json:"currencies"`

	// labels
	Labels *ChannelsPatchParamsBodyLabels `json:"labels,omitempty"`

	// Codes of activated locales for the channel
	// Required: true
	Locales []string `json:"locales"`
}

// Validate validates this channels patch body
func (o *ChannelsPatchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategoryTree(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConversionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrencies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocales(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsPatchBody) validateCategoryTree(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"category_tree", "body", o.CategoryTree); err != nil {
		return err
	}

	return nil
}

func (o *ChannelsPatchBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *ChannelsPatchBody) validateConversionUnits(formats strfmt.Registry) error {

	if swag.IsZero(o.ConversionUnits) { // not required
		return nil
	}

	if o.ConversionUnits != nil {
		if err := o.ConversionUnits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "conversion_units")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsPatchBody) validateCurrencies(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"currencies", "body", o.Currencies); err != nil {
		return err
	}

	return nil
}

func (o *ChannelsPatchBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsPatchBody) validateLocales(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"locales", "body", o.Locales); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchForbiddenBody channels patch forbidden body
swagger:model ChannelsPatchForbiddenBody
*/
type ChannelsPatchForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels patch forbidden body
func (o *ChannelsPatchForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchParamsBodyConversionUnits Units to which the given metric attributes should be converted when exporting products
swagger:model ChannelsPatchParamsBodyConversionUnits
*/
type ChannelsPatchParamsBodyConversionUnits struct {

	// Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
	AttributeCode string `json:"attributeCode,omitempty"`
}

// Validate validates this channels patch params body conversion units
func (o *ChannelsPatchParamsBodyConversionUnits) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchParamsBodyConversionUnits) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchParamsBodyConversionUnits) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchParamsBodyConversionUnits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchParamsBodyLabels Channel labels for each locale
swagger:model ChannelsPatchParamsBodyLabels
*/
type ChannelsPatchParamsBodyLabels struct {

	// Channel label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this channels patch params body labels
func (o *ChannelsPatchParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchUnauthorizedBody channels patch unauthorized body
swagger:model ChannelsPatchUnauthorizedBody
*/
type ChannelsPatchUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels patch unauthorized body
func (o *ChannelsPatchUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchUnprocessableEntityBody channels patch unprocessable entity body
swagger:model ChannelsPatchUnprocessableEntityBody
*/
type ChannelsPatchUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels patch unprocessable entity body
func (o *ChannelsPatchUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPatchUnsupportedMediaTypeBody channels patch unsupported media type body
swagger:model ChannelsPatchUnsupportedMediaTypeBody
*/
type ChannelsPatchUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels patch unsupported media type body
func (o *ChannelsPatchUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPatchUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPatchUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPatchUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

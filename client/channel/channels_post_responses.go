// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelsPostReader is a Reader for the ChannelsPost structure.
type ChannelsPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChannelsPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewChannelsPostCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChannelsPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChannelsPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChannelsPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewChannelsPostUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewChannelsPostUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewChannelsPostCreated creates a ChannelsPostCreated with default headers values
func NewChannelsPostCreated() *ChannelsPostCreated {
	return &ChannelsPostCreated{}
}

/*ChannelsPostCreated handles this case with default header values.

Created
*/
type ChannelsPostCreated struct {
	/*URI of the created resource
	 */
	Location string
}

func (o *ChannelsPostCreated) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/channels][%d] channelsPostCreated ", 201)
}

func (o *ChannelsPostCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewChannelsPostBadRequest creates a ChannelsPostBadRequest with default headers values
func NewChannelsPostBadRequest() *ChannelsPostBadRequest {
	return &ChannelsPostBadRequest{}
}

/*ChannelsPostBadRequest handles this case with default header values.

Bad request
*/
type ChannelsPostBadRequest struct {
	Payload *ChannelsPostBadRequestBody
}

func (o *ChannelsPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/channels][%d] channelsPostBadRequest  %+v", 400, o.Payload)
}

func (o *ChannelsPostBadRequest) GetPayload() *ChannelsPostBadRequestBody {
	return o.Payload
}

func (o *ChannelsPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPostBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPostUnauthorized creates a ChannelsPostUnauthorized with default headers values
func NewChannelsPostUnauthorized() *ChannelsPostUnauthorized {
	return &ChannelsPostUnauthorized{}
}

/*ChannelsPostUnauthorized handles this case with default header values.

Authentication required
*/
type ChannelsPostUnauthorized struct {
	Payload *ChannelsPostUnauthorizedBody
}

func (o *ChannelsPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/channels][%d] channelsPostUnauthorized  %+v", 401, o.Payload)
}

func (o *ChannelsPostUnauthorized) GetPayload() *ChannelsPostUnauthorizedBody {
	return o.Payload
}

func (o *ChannelsPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPostUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPostForbidden creates a ChannelsPostForbidden with default headers values
func NewChannelsPostForbidden() *ChannelsPostForbidden {
	return &ChannelsPostForbidden{}
}

/*ChannelsPostForbidden handles this case with default header values.

Access forbidden
*/
type ChannelsPostForbidden struct {
	Payload *ChannelsPostForbiddenBody
}

func (o *ChannelsPostForbidden) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/channels][%d] channelsPostForbidden  %+v", 403, o.Payload)
}

func (o *ChannelsPostForbidden) GetPayload() *ChannelsPostForbiddenBody {
	return o.Payload
}

func (o *ChannelsPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPostForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPostUnsupportedMediaType creates a ChannelsPostUnsupportedMediaType with default headers values
func NewChannelsPostUnsupportedMediaType() *ChannelsPostUnsupportedMediaType {
	return &ChannelsPostUnsupportedMediaType{}
}

/*ChannelsPostUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type ChannelsPostUnsupportedMediaType struct {
	Payload *ChannelsPostUnsupportedMediaTypeBody
}

func (o *ChannelsPostUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/channels][%d] channelsPostUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ChannelsPostUnsupportedMediaType) GetPayload() *ChannelsPostUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *ChannelsPostUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPostUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsPostUnprocessableEntity creates a ChannelsPostUnprocessableEntity with default headers values
func NewChannelsPostUnprocessableEntity() *ChannelsPostUnprocessableEntity {
	return &ChannelsPostUnprocessableEntity{}
}

/*ChannelsPostUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type ChannelsPostUnprocessableEntity struct {
	Payload *ChannelsPostUnprocessableEntityBody
}

func (o *ChannelsPostUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/rest/v1/channels][%d] channelsPostUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ChannelsPostUnprocessableEntity) GetPayload() *ChannelsPostUnprocessableEntityBody {
	return o.Payload
}

func (o *ChannelsPostUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsPostUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsPostBadRequestBody channels post bad request body
swagger:model ChannelsPostBadRequestBody
*/
type ChannelsPostBadRequestBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels post bad request body
func (o *ChannelsPostBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPostBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostBody channels post body
swagger:model ChannelsPostBody
*/
type ChannelsPostBody struct {

	// Code of the category tree linked to the channel
	// Required: true
	CategoryTree *string `json:"category_tree"`

	// Channel code
	// Required: true
	Code *string `json:"code"`

	// conversion units
	ConversionUnits *ChannelsPostParamsBodyConversionUnits `json:"conversion_units,omitempty"`

	// Codes of activated currencies for the channel
	// Required: true
	Currencies []string `json:"currencies"`

	// labels
	Labels *ChannelsPostParamsBodyLabels `json:"labels,omitempty"`

	// Codes of activated locales for the channel
	// Required: true
	Locales []string `json:"locales"`
}

// Validate validates this channels post body
func (o *ChannelsPostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategoryTree(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConversionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrencies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocales(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsPostBody) validateCategoryTree(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"category_tree", "body", o.CategoryTree); err != nil {
		return err
	}

	return nil
}

func (o *ChannelsPostBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *ChannelsPostBody) validateConversionUnits(formats strfmt.Registry) error {

	if swag.IsZero(o.ConversionUnits) { // not required
		return nil
	}

	if o.ConversionUnits != nil {
		if err := o.ConversionUnits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "conversion_units")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsPostBody) validateCurrencies(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"currencies", "body", o.Currencies); err != nil {
		return err
	}

	return nil
}

func (o *ChannelsPostBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsPostBody) validateLocales(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"locales", "body", o.Locales); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostForbiddenBody channels post forbidden body
swagger:model ChannelsPostForbiddenBody
*/
type ChannelsPostForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels post forbidden body
func (o *ChannelsPostForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPostForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostParamsBodyConversionUnits Units to which the given metric attributes should be converted when exporting products
swagger:model ChannelsPostParamsBodyConversionUnits
*/
type ChannelsPostParamsBodyConversionUnits struct {

	// Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
	AttributeCode string `json:"attributeCode,omitempty"`
}

// Validate validates this channels post params body conversion units
func (o *ChannelsPostParamsBodyConversionUnits) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostParamsBodyConversionUnits) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostParamsBodyConversionUnits) UnmarshalBinary(b []byte) error {
	var res ChannelsPostParamsBodyConversionUnits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostParamsBodyLabels Channel labels for each locale
swagger:model ChannelsPostParamsBodyLabels
*/
type ChannelsPostParamsBodyLabels struct {

	// Channel label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this channels post params body labels
func (o *ChannelsPostParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res ChannelsPostParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostUnauthorizedBody channels post unauthorized body
swagger:model ChannelsPostUnauthorizedBody
*/
type ChannelsPostUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels post unauthorized body
func (o *ChannelsPostUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPostUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostUnprocessableEntityBody channels post unprocessable entity body
swagger:model ChannelsPostUnprocessableEntityBody
*/
type ChannelsPostUnprocessableEntityBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels post unprocessable entity body
func (o *ChannelsPostUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPostUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsPostUnsupportedMediaTypeBody channels post unsupported media type body
swagger:model ChannelsPostUnsupportedMediaTypeBody
*/
type ChannelsPostUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this channels post unsupported media type body
func (o *ChannelsPostUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsPostUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsPostUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res ChannelsPostUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package currency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrenciesGetReader is a Reader for the CurrenciesGet structure.
type CurrenciesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CurrenciesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCurrenciesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCurrenciesGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCurrenciesGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCurrenciesGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCurrenciesGetNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCurrenciesGetOK creates a CurrenciesGetOK with default headers values
func NewCurrenciesGetOK() *CurrenciesGetOK {
	return &CurrenciesGetOK{}
}

/*CurrenciesGetOK handles this case with default header values.

OK
*/
type CurrenciesGetOK struct {
	Payload *CurrenciesGetOKBody
}

func (o *CurrenciesGetOK) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/currencies/{code}][%d] currenciesGetOK  %+v", 200, o.Payload)
}

func (o *CurrenciesGetOK) GetPayload() *CurrenciesGetOKBody {
	return o.Payload
}

func (o *CurrenciesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CurrenciesGetOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrenciesGetUnauthorized creates a CurrenciesGetUnauthorized with default headers values
func NewCurrenciesGetUnauthorized() *CurrenciesGetUnauthorized {
	return &CurrenciesGetUnauthorized{}
}

/*CurrenciesGetUnauthorized handles this case with default header values.

Authentication required
*/
type CurrenciesGetUnauthorized struct {
	Payload *CurrenciesGetUnauthorizedBody
}

func (o *CurrenciesGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/currencies/{code}][%d] currenciesGetUnauthorized  %+v", 401, o.Payload)
}

func (o *CurrenciesGetUnauthorized) GetPayload() *CurrenciesGetUnauthorizedBody {
	return o.Payload
}

func (o *CurrenciesGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CurrenciesGetUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrenciesGetForbidden creates a CurrenciesGetForbidden with default headers values
func NewCurrenciesGetForbidden() *CurrenciesGetForbidden {
	return &CurrenciesGetForbidden{}
}

/*CurrenciesGetForbidden handles this case with default header values.

Access forbidden
*/
type CurrenciesGetForbidden struct {
	Payload *CurrenciesGetForbiddenBody
}

func (o *CurrenciesGetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/currencies/{code}][%d] currenciesGetForbidden  %+v", 403, o.Payload)
}

func (o *CurrenciesGetForbidden) GetPayload() *CurrenciesGetForbiddenBody {
	return o.Payload
}

func (o *CurrenciesGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CurrenciesGetForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrenciesGetNotFound creates a CurrenciesGetNotFound with default headers values
func NewCurrenciesGetNotFound() *CurrenciesGetNotFound {
	return &CurrenciesGetNotFound{}
}

/*CurrenciesGetNotFound handles this case with default header values.

Resource not found
*/
type CurrenciesGetNotFound struct {
	Payload *CurrenciesGetNotFoundBody
}

func (o *CurrenciesGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/currencies/{code}][%d] currenciesGetNotFound  %+v", 404, o.Payload)
}

func (o *CurrenciesGetNotFound) GetPayload() *CurrenciesGetNotFoundBody {
	return o.Payload
}

func (o *CurrenciesGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CurrenciesGetNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrenciesGetNotAcceptable creates a CurrenciesGetNotAcceptable with default headers values
func NewCurrenciesGetNotAcceptable() *CurrenciesGetNotAcceptable {
	return &CurrenciesGetNotAcceptable{}
}

/*CurrenciesGetNotAcceptable handles this case with default header values.

Not Acceptable
*/
type CurrenciesGetNotAcceptable struct {
	Payload *CurrenciesGetNotAcceptableBody
}

func (o *CurrenciesGetNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/currencies/{code}][%d] currenciesGetNotAcceptable  %+v", 406, o.Payload)
}

func (o *CurrenciesGetNotAcceptable) GetPayload() *CurrenciesGetNotAcceptableBody {
	return o.Payload
}

func (o *CurrenciesGetNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CurrenciesGetNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CurrenciesGetForbiddenBody currencies get forbidden body
swagger:model CurrenciesGetForbiddenBody
*/
type CurrenciesGetForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this currencies get forbidden body
func (o *CurrenciesGetForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CurrenciesGetForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrenciesGetForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CurrenciesGetForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CurrenciesGetNotAcceptableBody currencies get not acceptable body
swagger:model CurrenciesGetNotAcceptableBody
*/
type CurrenciesGetNotAcceptableBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this currencies get not acceptable body
func (o *CurrenciesGetNotAcceptableBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CurrenciesGetNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrenciesGetNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res CurrenciesGetNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CurrenciesGetNotFoundBody currencies get not found body
swagger:model CurrenciesGetNotFoundBody
*/
type CurrenciesGetNotFoundBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this currencies get not found body
func (o *CurrenciesGetNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CurrenciesGetNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrenciesGetNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CurrenciesGetNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CurrenciesGetOKBody currencies get o k body
swagger:model CurrenciesGetOKBody
*/
type CurrenciesGetOKBody struct {

	// Currency code
	// Required: true
	Code *string `json:"code"`

	// Whether the currency is enabled
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this currencies get o k body
func (o *CurrenciesGetOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CurrenciesGetOKBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("currenciesGetOK"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CurrenciesGetOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrenciesGetOKBody) UnmarshalBinary(b []byte) error {
	var res CurrenciesGetOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CurrenciesGetUnauthorizedBody currencies get unauthorized body
swagger:model CurrenciesGetUnauthorizedBody
*/
type CurrenciesGetUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this currencies get unauthorized body
func (o *CurrenciesGetUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CurrenciesGetUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrenciesGetUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CurrenciesGetUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

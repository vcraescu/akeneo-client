// Code generated by go-swagger; DO NOT EDIT.

package family

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchFamiliesReader is a Reader for the PatchFamilies structure.
type PatchFamiliesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchFamiliesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchFamiliesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchFamiliesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchFamiliesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchFamiliesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchFamiliesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchFamiliesOK creates a PatchFamiliesOK with default headers values
func NewPatchFamiliesOK() *PatchFamiliesOK {
	return &PatchFamiliesOK{}
}

/*PatchFamiliesOK handles this case with default header values.

OK
*/
type PatchFamiliesOK struct {
	Payload *PatchFamiliesOKBody
}

func (o *PatchFamiliesOK) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/families][%d] patchFamiliesOK  %+v", 200, o.Payload)
}

func (o *PatchFamiliesOK) GetPayload() *PatchFamiliesOKBody {
	return o.Payload
}

func (o *PatchFamiliesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchFamiliesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFamiliesUnauthorized creates a PatchFamiliesUnauthorized with default headers values
func NewPatchFamiliesUnauthorized() *PatchFamiliesUnauthorized {
	return &PatchFamiliesUnauthorized{}
}

/*PatchFamiliesUnauthorized handles this case with default header values.

Authentication required
*/
type PatchFamiliesUnauthorized struct {
	Payload *PatchFamiliesUnauthorizedBody
}

func (o *PatchFamiliesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/families][%d] patchFamiliesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchFamiliesUnauthorized) GetPayload() *PatchFamiliesUnauthorizedBody {
	return o.Payload
}

func (o *PatchFamiliesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchFamiliesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFamiliesForbidden creates a PatchFamiliesForbidden with default headers values
func NewPatchFamiliesForbidden() *PatchFamiliesForbidden {
	return &PatchFamiliesForbidden{}
}

/*PatchFamiliesForbidden handles this case with default header values.

Access forbidden
*/
type PatchFamiliesForbidden struct {
	Payload *PatchFamiliesForbiddenBody
}

func (o *PatchFamiliesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/families][%d] patchFamiliesForbidden  %+v", 403, o.Payload)
}

func (o *PatchFamiliesForbidden) GetPayload() *PatchFamiliesForbiddenBody {
	return o.Payload
}

func (o *PatchFamiliesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchFamiliesForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFamiliesRequestEntityTooLarge creates a PatchFamiliesRequestEntityTooLarge with default headers values
func NewPatchFamiliesRequestEntityTooLarge() *PatchFamiliesRequestEntityTooLarge {
	return &PatchFamiliesRequestEntityTooLarge{}
}

/*PatchFamiliesRequestEntityTooLarge handles this case with default header values.

Request Entity Too Large
*/
type PatchFamiliesRequestEntityTooLarge struct {
	Payload *PatchFamiliesRequestEntityTooLargeBody
}

func (o *PatchFamiliesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/families][%d] patchFamiliesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchFamiliesRequestEntityTooLarge) GetPayload() *PatchFamiliesRequestEntityTooLargeBody {
	return o.Payload
}

func (o *PatchFamiliesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchFamiliesRequestEntityTooLargeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFamiliesUnsupportedMediaType creates a PatchFamiliesUnsupportedMediaType with default headers values
func NewPatchFamiliesUnsupportedMediaType() *PatchFamiliesUnsupportedMediaType {
	return &PatchFamiliesUnsupportedMediaType{}
}

/*PatchFamiliesUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchFamiliesUnsupportedMediaType struct {
	Payload *PatchFamiliesUnsupportedMediaTypeBody
}

func (o *PatchFamiliesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/families][%d] patchFamiliesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchFamiliesUnsupportedMediaType) GetPayload() *PatchFamiliesUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchFamiliesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchFamiliesUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchFamiliesBody patch families body
swagger:model PatchFamiliesBody
*/
type PatchFamiliesBody struct {

	// Attribute code used as the main picture in the user interface (only since v2.0)
	AttributeAsImage *string `json:"attribute_as_image,omitempty"`

	// Attribute code used as label
	// Required: true
	AttributeAsLabel *string `json:"attribute_as_label"`

	// attribute requirements
	AttributeRequirements *PatchFamiliesParamsBodyAttributeRequirements `json:"attribute_requirements,omitempty"`

	// Attributes codes that compose the family
	Attributes []string `json:"attributes"`

	// Family code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *PatchFamiliesParamsBodyLabels `json:"labels,omitempty"`
}

// Validate validates this patch families body
func (o *PatchFamiliesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributeAsLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAttributeRequirements(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchFamiliesBody) validateAttributeAsLabel(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"attribute_as_label", "body", o.AttributeAsLabel); err != nil {
		return err
	}

	return nil
}

func (o *PatchFamiliesBody) validateAttributeRequirements(formats strfmt.Registry) error {

	if swag.IsZero(o.AttributeRequirements) { // not required
		return nil
	}

	if o.AttributeRequirements != nil {
		if err := o.AttributeRequirements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attribute_requirements")
			}
			return err
		}
	}

	return nil
}

func (o *PatchFamiliesBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchFamiliesBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesBody) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesForbiddenBody patch families forbidden body
swagger:model PatchFamiliesForbiddenBody
*/
type PatchFamiliesForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch families forbidden body
func (o *PatchFamiliesForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesOKBody patch families o k body
swagger:model PatchFamiliesOKBody
*/
type PatchFamiliesOKBody struct {

	// Resource code, only filled when the resource is not a product
	Code string `json:"code,omitempty"`

	// Resource identifier, only filled when the resource is a product
	Identifier string `json:"identifier,omitempty"`

	// Line number
	Line int64 `json:"line,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`

	// HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
	StatusCode int64 `json:"status_code,omitempty"`
}

// Validate validates this patch families o k body
func (o *PatchFamiliesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesOKBody) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesParamsBodyAttributeRequirements Attributes codes of the family that are required for the completeness calculation for each channel
swagger:model PatchFamiliesParamsBodyAttributeRequirements
*/
type PatchFamiliesParamsBodyAttributeRequirements struct {

	// channel code
	ChannelCode []string `json:"channelCode"`
}

// Validate validates this patch families params body attribute requirements
func (o *PatchFamiliesParamsBodyAttributeRequirements) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesParamsBodyAttributeRequirements) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesParamsBodyAttributeRequirements) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesParamsBodyAttributeRequirements
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesParamsBodyLabels Family labels for each locale
swagger:model PatchFamiliesParamsBodyLabels
*/
type PatchFamiliesParamsBodyLabels struct {

	// Family label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch families params body labels
func (o *PatchFamiliesParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesRequestEntityTooLargeBody patch families request entity too large body
swagger:model PatchFamiliesRequestEntityTooLargeBody
*/
type PatchFamiliesRequestEntityTooLargeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch families request entity too large body
func (o *PatchFamiliesRequestEntityTooLargeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesRequestEntityTooLargeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesRequestEntityTooLargeBody) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesRequestEntityTooLargeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesUnauthorizedBody patch families unauthorized body
swagger:model PatchFamiliesUnauthorizedBody
*/
type PatchFamiliesUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch families unauthorized body
func (o *PatchFamiliesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFamiliesUnsupportedMediaTypeBody patch families unsupported media type body
swagger:model PatchFamiliesUnsupportedMediaTypeBody
*/
type PatchFamiliesUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch families unsupported media type body
func (o *PatchFamiliesUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchFamiliesUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFamiliesUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchFamiliesUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

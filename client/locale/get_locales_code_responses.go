// Code generated by go-swagger; DO NOT EDIT.

package locale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetLocalesCodeReader is a Reader for the GetLocalesCode structure.
type GetLocalesCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLocalesCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLocalesCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLocalesCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLocalesCodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLocalesCodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetLocalesCodeNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLocalesCodeOK creates a GetLocalesCodeOK with default headers values
func NewGetLocalesCodeOK() *GetLocalesCodeOK {
	return &GetLocalesCodeOK{}
}

/*GetLocalesCodeOK handles this case with default header values.

OK
*/
type GetLocalesCodeOK struct {
	Payload *GetLocalesCodeOKBody
}

func (o *GetLocalesCodeOK) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/locales/{code}][%d] getLocalesCodeOK  %+v", 200, o.Payload)
}

func (o *GetLocalesCodeOK) GetPayload() *GetLocalesCodeOKBody {
	return o.Payload
}

func (o *GetLocalesCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetLocalesCodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalesCodeUnauthorized creates a GetLocalesCodeUnauthorized with default headers values
func NewGetLocalesCodeUnauthorized() *GetLocalesCodeUnauthorized {
	return &GetLocalesCodeUnauthorized{}
}

/*GetLocalesCodeUnauthorized handles this case with default header values.

Authentication required
*/
type GetLocalesCodeUnauthorized struct {
	Payload *GetLocalesCodeUnauthorizedBody
}

func (o *GetLocalesCodeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/locales/{code}][%d] getLocalesCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLocalesCodeUnauthorized) GetPayload() *GetLocalesCodeUnauthorizedBody {
	return o.Payload
}

func (o *GetLocalesCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetLocalesCodeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalesCodeForbidden creates a GetLocalesCodeForbidden with default headers values
func NewGetLocalesCodeForbidden() *GetLocalesCodeForbidden {
	return &GetLocalesCodeForbidden{}
}

/*GetLocalesCodeForbidden handles this case with default header values.

Access forbidden
*/
type GetLocalesCodeForbidden struct {
	Payload *GetLocalesCodeForbiddenBody
}

func (o *GetLocalesCodeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/locales/{code}][%d] getLocalesCodeForbidden  %+v", 403, o.Payload)
}

func (o *GetLocalesCodeForbidden) GetPayload() *GetLocalesCodeForbiddenBody {
	return o.Payload
}

func (o *GetLocalesCodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetLocalesCodeForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalesCodeNotFound creates a GetLocalesCodeNotFound with default headers values
func NewGetLocalesCodeNotFound() *GetLocalesCodeNotFound {
	return &GetLocalesCodeNotFound{}
}

/*GetLocalesCodeNotFound handles this case with default header values.

Resource not found
*/
type GetLocalesCodeNotFound struct {
	Payload *GetLocalesCodeNotFoundBody
}

func (o *GetLocalesCodeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/locales/{code}][%d] getLocalesCodeNotFound  %+v", 404, o.Payload)
}

func (o *GetLocalesCodeNotFound) GetPayload() *GetLocalesCodeNotFoundBody {
	return o.Payload
}

func (o *GetLocalesCodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetLocalesCodeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalesCodeNotAcceptable creates a GetLocalesCodeNotAcceptable with default headers values
func NewGetLocalesCodeNotAcceptable() *GetLocalesCodeNotAcceptable {
	return &GetLocalesCodeNotAcceptable{}
}

/*GetLocalesCodeNotAcceptable handles this case with default header values.

Not Acceptable
*/
type GetLocalesCodeNotAcceptable struct {
	Payload *GetLocalesCodeNotAcceptableBody
}

func (o *GetLocalesCodeNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/locales/{code}][%d] getLocalesCodeNotAcceptable  %+v", 406, o.Payload)
}

func (o *GetLocalesCodeNotAcceptable) GetPayload() *GetLocalesCodeNotAcceptableBody {
	return o.Payload
}

func (o *GetLocalesCodeNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetLocalesCodeNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetLocalesCodeForbiddenBody get locales code forbidden body
swagger:model GetLocalesCodeForbiddenBody
*/
type GetLocalesCodeForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get locales code forbidden body
func (o *GetLocalesCodeForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalesCodeForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalesCodeForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetLocalesCodeForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetLocalesCodeNotAcceptableBody get locales code not acceptable body
swagger:model GetLocalesCodeNotAcceptableBody
*/
type GetLocalesCodeNotAcceptableBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get locales code not acceptable body
func (o *GetLocalesCodeNotAcceptableBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalesCodeNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalesCodeNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res GetLocalesCodeNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetLocalesCodeNotFoundBody get locales code not found body
swagger:model GetLocalesCodeNotFoundBody
*/
type GetLocalesCodeNotFoundBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get locales code not found body
func (o *GetLocalesCodeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalesCodeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalesCodeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetLocalesCodeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetLocalesCodeOKBody get locales code o k body
swagger:model GetLocalesCodeOKBody
*/
type GetLocalesCodeOKBody struct {

	// Locale code
	// Required: true
	Code *string `json:"code"`

	// Whether the locale is enabled
	Enabled *bool `json:"enabled,omitempty"`
}

// Validate validates this get locales code o k body
func (o *GetLocalesCodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLocalesCodeOKBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("getLocalesCodeOK"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalesCodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalesCodeOKBody) UnmarshalBinary(b []byte) error {
	var res GetLocalesCodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetLocalesCodeUnauthorizedBody get locales code unauthorized body
swagger:model GetLocalesCodeUnauthorizedBody
*/
type GetLocalesCodeUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get locales code unauthorized body
func (o *GetLocalesCodeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLocalesCodeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLocalesCodeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetLocalesCodeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

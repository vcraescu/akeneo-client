// Code generated by go-swagger; DO NOT EDIT.

package p_a_m_asset_category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchAssetCategoriesReader is a Reader for the PatchAssetCategories structure.
type PatchAssetCategoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAssetCategoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAssetCategoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchAssetCategoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAssetCategoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchAssetCategoriesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchAssetCategoriesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAssetCategoriesOK creates a PatchAssetCategoriesOK with default headers values
func NewPatchAssetCategoriesOK() *PatchAssetCategoriesOK {
	return &PatchAssetCategoriesOK{}
}

/*PatchAssetCategoriesOK handles this case with default header values.

OK
*/
type PatchAssetCategoriesOK struct {
	Payload *PatchAssetCategoriesOKBody
}

func (o *PatchAssetCategoriesOK) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-categories][%d] patchAssetCategoriesOK  %+v", 200, o.Payload)
}

func (o *PatchAssetCategoriesOK) GetPayload() *PatchAssetCategoriesOKBody {
	return o.Payload
}

func (o *PatchAssetCategoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetCategoriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetCategoriesUnauthorized creates a PatchAssetCategoriesUnauthorized with default headers values
func NewPatchAssetCategoriesUnauthorized() *PatchAssetCategoriesUnauthorized {
	return &PatchAssetCategoriesUnauthorized{}
}

/*PatchAssetCategoriesUnauthorized handles this case with default header values.

Authentication required
*/
type PatchAssetCategoriesUnauthorized struct {
	Payload *PatchAssetCategoriesUnauthorizedBody
}

func (o *PatchAssetCategoriesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-categories][%d] patchAssetCategoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAssetCategoriesUnauthorized) GetPayload() *PatchAssetCategoriesUnauthorizedBody {
	return o.Payload
}

func (o *PatchAssetCategoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetCategoriesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetCategoriesForbidden creates a PatchAssetCategoriesForbidden with default headers values
func NewPatchAssetCategoriesForbidden() *PatchAssetCategoriesForbidden {
	return &PatchAssetCategoriesForbidden{}
}

/*PatchAssetCategoriesForbidden handles this case with default header values.

Access forbidden
*/
type PatchAssetCategoriesForbidden struct {
	Payload *PatchAssetCategoriesForbiddenBody
}

func (o *PatchAssetCategoriesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-categories][%d] patchAssetCategoriesForbidden  %+v", 403, o.Payload)
}

func (o *PatchAssetCategoriesForbidden) GetPayload() *PatchAssetCategoriesForbiddenBody {
	return o.Payload
}

func (o *PatchAssetCategoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetCategoriesForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetCategoriesRequestEntityTooLarge creates a PatchAssetCategoriesRequestEntityTooLarge with default headers values
func NewPatchAssetCategoriesRequestEntityTooLarge() *PatchAssetCategoriesRequestEntityTooLarge {
	return &PatchAssetCategoriesRequestEntityTooLarge{}
}

/*PatchAssetCategoriesRequestEntityTooLarge handles this case with default header values.

Request Entity Too Large
*/
type PatchAssetCategoriesRequestEntityTooLarge struct {
	Payload *PatchAssetCategoriesRequestEntityTooLargeBody
}

func (o *PatchAssetCategoriesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-categories][%d] patchAssetCategoriesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchAssetCategoriesRequestEntityTooLarge) GetPayload() *PatchAssetCategoriesRequestEntityTooLargeBody {
	return o.Payload
}

func (o *PatchAssetCategoriesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetCategoriesRequestEntityTooLargeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAssetCategoriesUnsupportedMediaType creates a PatchAssetCategoriesUnsupportedMediaType with default headers values
func NewPatchAssetCategoriesUnsupportedMediaType() *PatchAssetCategoriesUnsupportedMediaType {
	return &PatchAssetCategoriesUnsupportedMediaType{}
}

/*PatchAssetCategoriesUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchAssetCategoriesUnsupportedMediaType struct {
	Payload *PatchAssetCategoriesUnsupportedMediaTypeBody
}

func (o *PatchAssetCategoriesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/asset-categories][%d] patchAssetCategoriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchAssetCategoriesUnsupportedMediaType) GetPayload() *PatchAssetCategoriesUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchAssetCategoriesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAssetCategoriesUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchAssetCategoriesBody patch asset categories body
swagger:model PatchAssetCategoriesBody
*/
type PatchAssetCategoriesBody struct {

	// PAM asset category code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *PatchAssetCategoriesParamsBodyLabels `json:"labels,omitempty"`

	// PAM ssset category code of the parent's asset category
	Parent *string `json:"parent,omitempty"`
}

// Validate validates this patch asset categories body
func (o *PatchAssetCategoriesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAssetCategoriesBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PatchAssetCategoriesBody) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	if o.Labels != nil {
		if err := o.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetCategoriesForbiddenBody patch asset categories forbidden body
swagger:model PatchAssetCategoriesForbiddenBody
*/
type PatchAssetCategoriesForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset categories forbidden body
func (o *PatchAssetCategoriesForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetCategoriesOKBody patch asset categories o k body
swagger:model PatchAssetCategoriesOKBody
*/
type PatchAssetCategoriesOKBody struct {

	// Resource code, only filled when the resource is not a product
	Code string `json:"code,omitempty"`

	// Resource identifier, only filled when the resource is a product
	Identifier string `json:"identifier,omitempty"`

	// Line number
	Line int64 `json:"line,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`

	// HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
	StatusCode int64 `json:"status_code,omitempty"`
}

// Validate validates this patch asset categories o k body
func (o *PatchAssetCategoriesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesOKBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetCategoriesParamsBodyLabels PAM asset category labels for each locale
swagger:model PatchAssetCategoriesParamsBodyLabels
*/
type PatchAssetCategoriesParamsBodyLabels struct {

	// PAM asset category label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this patch asset categories params body labels
func (o *PatchAssetCategoriesParamsBodyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesParamsBodyLabels) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesParamsBodyLabels) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesParamsBodyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetCategoriesRequestEntityTooLargeBody patch asset categories request entity too large body
swagger:model PatchAssetCategoriesRequestEntityTooLargeBody
*/
type PatchAssetCategoriesRequestEntityTooLargeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset categories request entity too large body
func (o *PatchAssetCategoriesRequestEntityTooLargeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesRequestEntityTooLargeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesRequestEntityTooLargeBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesRequestEntityTooLargeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetCategoriesUnauthorizedBody patch asset categories unauthorized body
swagger:model PatchAssetCategoriesUnauthorizedBody
*/
type PatchAssetCategoriesUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset categories unauthorized body
func (o *PatchAssetCategoriesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAssetCategoriesUnsupportedMediaTypeBody patch asset categories unsupported media type body
swagger:model PatchAssetCategoriesUnsupportedMediaTypeBody
*/
type PatchAssetCategoriesUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch asset categories unsupported media type body
func (o *PatchAssetCategoriesUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchAssetCategoriesUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAssetCategoriesUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchAssetCategoriesUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

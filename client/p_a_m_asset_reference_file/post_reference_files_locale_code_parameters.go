// Code generated by go-swagger; DO NOT EDIT.

package p_a_m_asset_reference_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostReferenceFilesLocaleCodeParams creates a new PostReferenceFilesLocaleCodeParams object
// with the default values initialized.
func NewPostReferenceFilesLocaleCodeParams() *PostReferenceFilesLocaleCodeParams {
	var ()
	return &PostReferenceFilesLocaleCodeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostReferenceFilesLocaleCodeParamsWithTimeout creates a new PostReferenceFilesLocaleCodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostReferenceFilesLocaleCodeParamsWithTimeout(timeout time.Duration) *PostReferenceFilesLocaleCodeParams {
	var ()
	return &PostReferenceFilesLocaleCodeParams{

		timeout: timeout,
	}
}

// NewPostReferenceFilesLocaleCodeParamsWithContext creates a new PostReferenceFilesLocaleCodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostReferenceFilesLocaleCodeParamsWithContext(ctx context.Context) *PostReferenceFilesLocaleCodeParams {
	var ()
	return &PostReferenceFilesLocaleCodeParams{

		Context: ctx,
	}
}

// NewPostReferenceFilesLocaleCodeParamsWithHTTPClient creates a new PostReferenceFilesLocaleCodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostReferenceFilesLocaleCodeParamsWithHTTPClient(client *http.Client) *PostReferenceFilesLocaleCodeParams {
	var ()
	return &PostReferenceFilesLocaleCodeParams{
		HTTPClient: client,
	}
}

/*PostReferenceFilesLocaleCodeParams contains all the parameters to send to the API endpoint
for the post reference files locale code operation typically these are written to a http.Request
*/
type PostReferenceFilesLocaleCodeParams struct {

	/*ContentType
	  Equal to 'multipart/form-data', no other value allowed

	*/
	ContentType string
	/*AssetCode
	  Code of the asset

	*/
	AssetCode string
	/*Body*/
	Body PostReferenceFilesLocaleCodeBody
	/*LocaleCode
	  Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable

	*/
	LocaleCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithTimeout(timeout time.Duration) *PostReferenceFilesLocaleCodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithContext(ctx context.Context) *PostReferenceFilesLocaleCodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithHTTPClient(client *http.Client) *PostReferenceFilesLocaleCodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithContentType(contentType string) *PostReferenceFilesLocaleCodeParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithAssetCode adds the assetCode to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithAssetCode(assetCode string) *PostReferenceFilesLocaleCodeParams {
	o.SetAssetCode(assetCode)
	return o
}

// SetAssetCode adds the assetCode to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetAssetCode(assetCode string) {
	o.AssetCode = assetCode
}

// WithBody adds the body to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithBody(body PostReferenceFilesLocaleCodeBody) *PostReferenceFilesLocaleCodeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetBody(body PostReferenceFilesLocaleCodeBody) {
	o.Body = body
}

// WithLocaleCode adds the localeCode to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) WithLocaleCode(localeCode string) *PostReferenceFilesLocaleCodeParams {
	o.SetLocaleCode(localeCode)
	return o
}

// SetLocaleCode adds the localeCode to the post reference files locale code params
func (o *PostReferenceFilesLocaleCodeParams) SetLocaleCode(localeCode string) {
	o.LocaleCode = localeCode
}

// WriteToRequest writes these params to a swagger request
func (o *PostReferenceFilesLocaleCodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-type
	if err := r.SetHeaderParam("Content-type", o.ContentType); err != nil {
		return err
	}

	// path param asset_code
	if err := r.SetPathParam("asset_code", o.AssetCode); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param locale_code
	if err := r.SetPathParam("locale_code", o.LocaleCode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

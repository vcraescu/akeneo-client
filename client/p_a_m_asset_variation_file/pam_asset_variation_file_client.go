// Code generated by go-swagger; DO NOT EDIT.

package p_a_m_asset_variation_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new p a m asset variation file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p a m asset variation file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetVariationFilesChannelCodeLocaleCode(params *GetVariationFilesChannelCodeLocaleCodeParams) (*GetVariationFilesChannelCodeLocaleCodeOK, error)

	GetVariationFilesChannelCodeLocaleCodeDownload(params *GetVariationFilesChannelCodeLocaleCodeDownloadParams) (*GetVariationFilesChannelCodeLocaleCodeDownloadOK, error)

	PostVariationFilesChannelCodeLocaleCode(params *PostVariationFilesChannelCodeLocaleCodeParams) (*PostVariationFilesChannelCodeLocaleCodeCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetVariationFilesChannelCodeLocaleCode gets a variation file

  This endpoint allows you to get the information about a variation file of a given PAM asset.
*/
func (a *Client) GetVariationFilesChannelCodeLocaleCode(params *GetVariationFilesChannelCodeLocaleCodeParams) (*GetVariationFilesChannelCodeLocaleCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariationFilesChannelCodeLocaleCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_variation_files__channel_code__locale_code",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVariationFilesChannelCodeLocaleCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariationFilesChannelCodeLocaleCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_variation_files__channel_code__locale_code: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVariationFilesChannelCodeLocaleCodeDownload downloads a variation file

  This endpoint allows you to download a given variation file.
*/
func (a *Client) GetVariationFilesChannelCodeLocaleCodeDownload(params *GetVariationFilesChannelCodeLocaleCodeDownloadParams) (*GetVariationFilesChannelCodeLocaleCodeDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariationFilesChannelCodeLocaleCodeDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_variation_files__channel_code__locale_code__download",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVariationFilesChannelCodeLocaleCodeDownloadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariationFilesChannelCodeLocaleCodeDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_variation_files__channel_code__locale_code__download: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVariationFilesChannelCodeLocaleCode uploads a new variation file

  This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
*/
func (a *Client) PostVariationFilesChannelCodeLocaleCode(params *PostVariationFilesChannelCodeLocaleCodeParams) (*PostVariationFilesChannelCodeLocaleCodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVariationFilesChannelCodeLocaleCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_variation_files__channel_code__locale_code_",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVariationFilesChannelCodeLocaleCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVariationFilesChannelCodeLocaleCodeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_variation_files__channel_code__locale_code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

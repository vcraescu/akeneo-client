// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProductsCodeParams creates a new GetProductsCodeParams object
// with the default values initialized.
func NewGetProductsCodeParams() *GetProductsCodeParams {
	var (
		withAttributeOptionsDefault = bool(false)
		withQualityScoresDefault    = bool(false)
	)
	return &GetProductsCodeParams{
		WithAttributeOptions: &withAttributeOptionsDefault,
		WithQualityScores:    &withQualityScoresDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductsCodeParamsWithTimeout creates a new GetProductsCodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductsCodeParamsWithTimeout(timeout time.Duration) *GetProductsCodeParams {
	var (
		withAttributeOptionsDefault = bool(false)
		withQualityScoresDefault    = bool(false)
	)
	return &GetProductsCodeParams{
		WithAttributeOptions: &withAttributeOptionsDefault,
		WithQualityScores:    &withQualityScoresDefault,

		timeout: timeout,
	}
}

// NewGetProductsCodeParamsWithContext creates a new GetProductsCodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProductsCodeParamsWithContext(ctx context.Context) *GetProductsCodeParams {
	var (
		withAttributeOptionsDefault = bool(false)
		withQualityScoresDefault    = bool(false)
	)
	return &GetProductsCodeParams{
		WithAttributeOptions: &withAttributeOptionsDefault,
		WithQualityScores:    &withQualityScoresDefault,

		Context: ctx,
	}
}

// NewGetProductsCodeParamsWithHTTPClient creates a new GetProductsCodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProductsCodeParamsWithHTTPClient(client *http.Client) *GetProductsCodeParams {
	var (
		withAttributeOptionsDefault = bool(false)
		withQualityScoresDefault    = bool(false)
	)
	return &GetProductsCodeParams{
		WithAttributeOptions: &withAttributeOptionsDefault,
		WithQualityScores:    &withQualityScoresDefault,
		HTTPClient:           client,
	}
}

/*GetProductsCodeParams contains all the parameters to send to the API endpoint
for the get products code operation typically these are written to a http.Request
*/
type GetProductsCodeParams struct {

	/*Code
	  Code of the resource

	*/
	Code string
	/*WithAttributeOptions
	  Return labels of attribute options in the response. (Only available in the PIM Serenity version.)

	*/
	WithAttributeOptions *bool
	/*WithQualityScores
	  Return product quality scores in the response. (Only available in the PIM Serenity version.)

	*/
	WithQualityScores *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get products code params
func (o *GetProductsCodeParams) WithTimeout(timeout time.Duration) *GetProductsCodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get products code params
func (o *GetProductsCodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get products code params
func (o *GetProductsCodeParams) WithContext(ctx context.Context) *GetProductsCodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get products code params
func (o *GetProductsCodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get products code params
func (o *GetProductsCodeParams) WithHTTPClient(client *http.Client) *GetProductsCodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get products code params
func (o *GetProductsCodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the get products code params
func (o *GetProductsCodeParams) WithCode(code string) *GetProductsCodeParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the get products code params
func (o *GetProductsCodeParams) SetCode(code string) {
	o.Code = code
}

// WithWithAttributeOptions adds the withAttributeOptions to the get products code params
func (o *GetProductsCodeParams) WithWithAttributeOptions(withAttributeOptions *bool) *GetProductsCodeParams {
	o.SetWithAttributeOptions(withAttributeOptions)
	return o
}

// SetWithAttributeOptions adds the withAttributeOptions to the get products code params
func (o *GetProductsCodeParams) SetWithAttributeOptions(withAttributeOptions *bool) {
	o.WithAttributeOptions = withAttributeOptions
}

// WithWithQualityScores adds the withQualityScores to the get products code params
func (o *GetProductsCodeParams) WithWithQualityScores(withQualityScores *bool) *GetProductsCodeParams {
	o.SetWithQualityScores(withQualityScores)
	return o
}

// SetWithQualityScores adds the withQualityScores to the get products code params
func (o *GetProductsCodeParams) SetWithQualityScores(withQualityScores *bool) {
	o.WithQualityScores = withQualityScores
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductsCodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param code
	if err := r.SetPathParam("code", o.Code); err != nil {
		return err
	}

	if o.WithAttributeOptions != nil {

		// query param with_attribute_options
		var qrWithAttributeOptions bool
		if o.WithAttributeOptions != nil {
			qrWithAttributeOptions = *o.WithAttributeOptions
		}
		qWithAttributeOptions := swag.FormatBool(qrWithAttributeOptions)
		if qWithAttributeOptions != "" {
			if err := r.SetQueryParam("with_attribute_options", qWithAttributeOptions); err != nil {
				return err
			}
		}

	}

	if o.WithQualityScores != nil {

		// query param with_quality_scores
		var qrWithQualityScores bool
		if o.WithQualityScores != nil {
			qrWithQualityScores = *o.WithQualityScores
		}
		qWithQualityScores := swag.FormatBool(qrWithQualityScores)
		if qWithQualityScores != "" {
			if err := r.SetQueryParam("with_quality_scores", qWithQualityScores); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

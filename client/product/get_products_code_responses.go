// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetProductsCodeReader is a Reader for the GetProductsCode structure.
type GetProductsCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProductsCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProductsCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetProductsCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProductsCodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProductsCodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetProductsCodeNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProductsCodeOK creates a GetProductsCodeOK with default headers values
func NewGetProductsCodeOK() *GetProductsCodeOK {
	return &GetProductsCodeOK{}
}

/*GetProductsCodeOK handles this case with default header values.

OK
*/
type GetProductsCodeOK struct {
	Payload *GetProductsCodeOKBody
}

func (o *GetProductsCodeOK) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/products/{code}][%d] getProductsCodeOK  %+v", 200, o.Payload)
}

func (o *GetProductsCodeOK) GetPayload() *GetProductsCodeOKBody {
	return o.Payload
}

func (o *GetProductsCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProductsCodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductsCodeUnauthorized creates a GetProductsCodeUnauthorized with default headers values
func NewGetProductsCodeUnauthorized() *GetProductsCodeUnauthorized {
	return &GetProductsCodeUnauthorized{}
}

/*GetProductsCodeUnauthorized handles this case with default header values.

Authentication required
*/
type GetProductsCodeUnauthorized struct {
	Payload *GetProductsCodeUnauthorizedBody
}

func (o *GetProductsCodeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/products/{code}][%d] getProductsCodeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetProductsCodeUnauthorized) GetPayload() *GetProductsCodeUnauthorizedBody {
	return o.Payload
}

func (o *GetProductsCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProductsCodeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductsCodeForbidden creates a GetProductsCodeForbidden with default headers values
func NewGetProductsCodeForbidden() *GetProductsCodeForbidden {
	return &GetProductsCodeForbidden{}
}

/*GetProductsCodeForbidden handles this case with default header values.

Access forbidden
*/
type GetProductsCodeForbidden struct {
	Payload *GetProductsCodeForbiddenBody
}

func (o *GetProductsCodeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/products/{code}][%d] getProductsCodeForbidden  %+v", 403, o.Payload)
}

func (o *GetProductsCodeForbidden) GetPayload() *GetProductsCodeForbiddenBody {
	return o.Payload
}

func (o *GetProductsCodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProductsCodeForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductsCodeNotFound creates a GetProductsCodeNotFound with default headers values
func NewGetProductsCodeNotFound() *GetProductsCodeNotFound {
	return &GetProductsCodeNotFound{}
}

/*GetProductsCodeNotFound handles this case with default header values.

Resource not found
*/
type GetProductsCodeNotFound struct {
	Payload *GetProductsCodeNotFoundBody
}

func (o *GetProductsCodeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/products/{code}][%d] getProductsCodeNotFound  %+v", 404, o.Payload)
}

func (o *GetProductsCodeNotFound) GetPayload() *GetProductsCodeNotFoundBody {
	return o.Payload
}

func (o *GetProductsCodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProductsCodeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductsCodeNotAcceptable creates a GetProductsCodeNotAcceptable with default headers values
func NewGetProductsCodeNotAcceptable() *GetProductsCodeNotAcceptable {
	return &GetProductsCodeNotAcceptable{}
}

/*GetProductsCodeNotAcceptable handles this case with default header values.

Not Acceptable
*/
type GetProductsCodeNotAcceptable struct {
	Payload *GetProductsCodeNotAcceptableBody
}

func (o *GetProductsCodeNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/rest/v1/products/{code}][%d] getProductsCodeNotAcceptable  %+v", 406, o.Payload)
}

func (o *GetProductsCodeNotAcceptable) GetPayload() *GetProductsCodeNotAcceptableBody {
	return o.Payload
}

func (o *GetProductsCodeNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProductsCodeNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetProductsCodeForbiddenBody get products code forbidden body
swagger:model GetProductsCodeForbiddenBody
*/
type GetProductsCodeForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get products code forbidden body
func (o *GetProductsCodeForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeNotAcceptableBody get products code not acceptable body
swagger:model GetProductsCodeNotAcceptableBody
*/
type GetProductsCodeNotAcceptableBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get products code not acceptable body
func (o *GetProductsCodeNotAcceptableBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeNotFoundBody get products code not found body
swagger:model GetProductsCodeNotFoundBody
*/
type GetProductsCodeNotFoundBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get products code not found body
func (o *GetProductsCodeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBody get products code o k body
swagger:model GetProductsCodeOKBody
*/
type GetProductsCodeOKBody struct {

	// associations
	Associations *GetProductsCodeOKBodyAssociations `json:"associations,omitempty"`

	// Codes of the categories in which the product is classified
	Categories []string `json:"categories"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Whether the product is enable
	Enabled *bool `json:"enabled,omitempty"`

	// Family code from which the product inherits its attributes and attributes requirements
	Family *string `json:"family,omitempty"`

	// Codes of the groups to which the product belong
	Groups []string `json:"groups"`

	// Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
	// Required: true
	Identifier *string `json:"identifier"`

	// metadata
	Metadata *GetProductsCodeOKBodyMetadata `json:"metadata,omitempty"`

	// Code of the parent product model when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
	Parent *string `json:"parent,omitempty"`

	// Product quality scores for each channel/locale combination (only available in Serenity and when the "with_quality_scores" query parameter is set to "true")
	QualityScores interface{} `json:"quality_scores,omitempty"`

	// quantified associations
	QuantifiedAssociations *GetProductsCodeOKBodyQuantifiedAssociations `json:"quantified_associations,omitempty"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *GetProductsCodeOKBodyValues `json:"values,omitempty"`
}

// Validate validates this get products code o k body
func (o *GetProductsCodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantifiedAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsCodeOKBody) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(o.Associations) { // not required
		return nil
	}

	if o.Associations != nil {
		if err := o.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProductsCodeOK" + "." + "associations")
			}
			return err
		}
	}

	return nil
}

func (o *GetProductsCodeOKBody) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("getProductsCodeOK"+"."+"identifier", "body", o.Identifier); err != nil {
		return err
	}

	return nil
}

func (o *GetProductsCodeOKBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProductsCodeOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetProductsCodeOKBody) validateQuantifiedAssociations(formats strfmt.Registry) error {

	if swag.IsZero(o.QuantifiedAssociations) { // not required
		return nil
	}

	if o.QuantifiedAssociations != nil {
		if err := o.QuantifiedAssociations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProductsCodeOK" + "." + "quantified_associations")
			}
			return err
		}
	}

	return nil
}

func (o *GetProductsCodeOKBody) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(o.Values) { // not required
		return nil
	}

	if o.Values != nil {
		if err := o.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProductsCodeOK" + "." + "values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBody) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyAssociations Several associations related to groups, product models and/or other products, grouped by association types
swagger:model GetProductsCodeOKBodyAssociations
*/
type GetProductsCodeOKBodyAssociations struct {

	// association type code
	AssociationTypeCode *GetProductsCodeOKBodyAssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this get products code o k body associations
func (o *GetProductsCodeOKBodyAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsCodeOKBodyAssociations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(o.AssociationTypeCode) { // not required
		return nil
	}

	if o.AssociationTypeCode != nil {
		if err := o.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProductsCodeOK" + "." + "associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyAssociations) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyAssociations) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyAssociationsAssociationTypeCode get products code o k body associations association type code
swagger:model GetProductsCodeOKBodyAssociationsAssociationTypeCode
*/
type GetProductsCodeOKBodyAssociationsAssociationTypeCode struct {

	// Array of groups codes with which the product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of product identifiers with which the product is in relation
	Products []string `json:"products"`
}

// Validate validates this get products code o k body associations association type code
func (o *GetProductsCodeOKBodyAssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyAssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyAssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyAssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyMetadata More information around the product (only available since the v2.0 in the Enterprise Edition)
swagger:model GetProductsCodeOKBodyMetadata
*/
type GetProductsCodeOKBodyMetadata struct {

	// Status of the product regarding the user permissions (only available since the v2.0 in the Enterprise Edition)
	// Enum: [read_only draft_in_progress proposal_waiting_for_approval working_copy]
	WorkflowStatus string `json:"workflow_status,omitempty"`
}

// Validate validates this get products code o k body metadata
func (o *GetProductsCodeOKBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWorkflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getProductsCodeOKBodyMetadataTypeWorkflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only","draft_in_progress","proposal_waiting_for_approval","working_copy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getProductsCodeOKBodyMetadataTypeWorkflowStatusPropEnum = append(getProductsCodeOKBodyMetadataTypeWorkflowStatusPropEnum, v)
	}
}

const (

	// GetProductsCodeOKBodyMetadataWorkflowStatusReadOnly captures enum value "read_only"
	GetProductsCodeOKBodyMetadataWorkflowStatusReadOnly string = "read_only"

	// GetProductsCodeOKBodyMetadataWorkflowStatusDraftInProgress captures enum value "draft_in_progress"
	GetProductsCodeOKBodyMetadataWorkflowStatusDraftInProgress string = "draft_in_progress"

	// GetProductsCodeOKBodyMetadataWorkflowStatusProposalWaitingForApproval captures enum value "proposal_waiting_for_approval"
	GetProductsCodeOKBodyMetadataWorkflowStatusProposalWaitingForApproval string = "proposal_waiting_for_approval"

	// GetProductsCodeOKBodyMetadataWorkflowStatusWorkingCopy captures enum value "working_copy"
	GetProductsCodeOKBodyMetadataWorkflowStatusWorkingCopy string = "working_copy"
)

// prop value enum
func (o *GetProductsCodeOKBodyMetadata) validateWorkflowStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getProductsCodeOKBodyMetadataTypeWorkflowStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetProductsCodeOKBodyMetadata) validateWorkflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.WorkflowStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateWorkflowStatusEnum("getProductsCodeOK"+"."+"metadata"+"."+"workflow_status", "body", o.WorkflowStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyQuantifiedAssociations Several quantified associations related to products and/or product models, grouped by quantified association types (only available in Serenity)
swagger:model GetProductsCodeOKBodyQuantifiedAssociations
*/
type GetProductsCodeOKBodyQuantifiedAssociations struct {

	// quantified association type code
	QuantifiedAssociationTypeCode *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode `json:"quantifiedAssociationTypeCode,omitempty"`
}

// Validate validates this get products code o k body quantified associations
func (o *GetProductsCodeOKBodyQuantifiedAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuantifiedAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsCodeOKBodyQuantifiedAssociations) validateQuantifiedAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(o.QuantifiedAssociationTypeCode) { // not required
		return nil
	}

	if o.QuantifiedAssociationTypeCode != nil {
		if err := o.QuantifiedAssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProductsCodeOK" + "." + "quantified_associations" + "." + "quantifiedAssociationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociations) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociations) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyQuantifiedAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode get products code o k body quantified associations quantified association type code
swagger:model GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode
*/
type GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode struct {

	// Array of objects containing product model codes and quantities with which the product is in relation
	ProductModels []*GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 `json:"product_models"`

	// Array of objects containing product identifiers and quantities with which the product is in relation
	Products []*GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 `json:"products"`
}

// Validate validates this get products code o k body quantified associations quantified association type code
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductModels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProductModels(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductModels) { // not required
		return nil
	}

	for i := 0; i < len(o.ProductModels); i++ {
		if swag.IsZero(o.ProductModels[i]) { // not required
			continue
		}

		if o.ProductModels[i] != nil {
			if err := o.ProductModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProductsCodeOK" + "." + "quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "product_models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(o.Products) { // not required
		return nil
	}

	for i := 0; i < len(o.Products); i++ {
		if swag.IsZero(o.Products[i]) { // not required
			continue
		}

		if o.Products[i] != nil {
			if err := o.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProductsCodeOK" + "." + "quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 get products code o k body quantified associations quantified association type code product models items0
swagger:model GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
*/
type GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this get products code o k body quantified associations quantified association type code product models items0
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 get products code o k body quantified associations quantified association type code products items0
swagger:model GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
*/
type GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 struct {

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this get products code o k body quantified associations quantified association type code products items0
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyValues Product attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
swagger:model GetProductsCodeOKBodyValues
*/
type GetProductsCodeOKBodyValues struct {

	// attribute code
	AttributeCode []*GetProductsCodeOKBodyValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this get products code o k body values
func (o *GetProductsCodeOKBodyValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsCodeOKBodyValues) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(o.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(o.AttributeCode); i++ {
		if swag.IsZero(o.AttributeCode[i]) { // not required
			continue
		}

		if o.AttributeCode[i] != nil {
			if err := o.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProductsCodeOK" + "." + "values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyValues) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyValues) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyValuesAttributeCodeItems0 get products code o k body values attribute code items0
swagger:model GetProductsCodeOKBodyValuesAttributeCodeItems0
*/
type GetProductsCodeOKBodyValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// linked data
	LinkedData *GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData `json:"linked_data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this get products code o k body values attribute code items0
func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinkedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0) validateLinkedData(formats strfmt.Registry) error {

	if swag.IsZero(o.LinkedData) { // not required
		return nil
	}

	if o.LinkedData != nil {
		if err := o.LinkedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linked_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData Object containing labels of attribute options (only available in Serenity and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
swagger:model GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData
*/
type GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData struct {

	// attribute
	Attribute string `json:"attribute,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// labels
	Labels interface{} `json:"labels,omitempty"`
}

// Validate validates this get products code o k body values attribute code items0 linked data
func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeOKBodyValuesAttributeCodeItems0LinkedData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetProductsCodeUnauthorizedBody get products code unauthorized body
swagger:model GetProductsCodeUnauthorizedBody
*/
type GetProductsCodeUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this get products code unauthorized body
func (o *GetProductsCodeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsCodeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsCodeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetProductsCodeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

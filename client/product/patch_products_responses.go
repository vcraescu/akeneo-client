// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchProductsReader is a Reader for the PatchProducts structure.
type PatchProductsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProductsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchProductsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchProductsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchProductsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchProductsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchProductsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchProductsOK creates a PatchProductsOK with default headers values
func NewPatchProductsOK() *PatchProductsOK {
	return &PatchProductsOK{}
}

/*PatchProductsOK handles this case with default header values.

OK
*/
type PatchProductsOK struct {
	Payload *PatchProductsOKBody
}

func (o *PatchProductsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/products][%d] patchProductsOK  %+v", 200, o.Payload)
}

func (o *PatchProductsOK) GetPayload() *PatchProductsOKBody {
	return o.Payload
}

func (o *PatchProductsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchProductsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProductsUnauthorized creates a PatchProductsUnauthorized with default headers values
func NewPatchProductsUnauthorized() *PatchProductsUnauthorized {
	return &PatchProductsUnauthorized{}
}

/*PatchProductsUnauthorized handles this case with default header values.

Authentication required
*/
type PatchProductsUnauthorized struct {
	Payload *PatchProductsUnauthorizedBody
}

func (o *PatchProductsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/products][%d] patchProductsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchProductsUnauthorized) GetPayload() *PatchProductsUnauthorizedBody {
	return o.Payload
}

func (o *PatchProductsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchProductsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProductsForbidden creates a PatchProductsForbidden with default headers values
func NewPatchProductsForbidden() *PatchProductsForbidden {
	return &PatchProductsForbidden{}
}

/*PatchProductsForbidden handles this case with default header values.

Access forbidden
*/
type PatchProductsForbidden struct {
	Payload *PatchProductsForbiddenBody
}

func (o *PatchProductsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/products][%d] patchProductsForbidden  %+v", 403, o.Payload)
}

func (o *PatchProductsForbidden) GetPayload() *PatchProductsForbiddenBody {
	return o.Payload
}

func (o *PatchProductsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchProductsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProductsRequestEntityTooLarge creates a PatchProductsRequestEntityTooLarge with default headers values
func NewPatchProductsRequestEntityTooLarge() *PatchProductsRequestEntityTooLarge {
	return &PatchProductsRequestEntityTooLarge{}
}

/*PatchProductsRequestEntityTooLarge handles this case with default header values.

Request Entity Too Large
*/
type PatchProductsRequestEntityTooLarge struct {
	Payload *PatchProductsRequestEntityTooLargeBody
}

func (o *PatchProductsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/products][%d] patchProductsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchProductsRequestEntityTooLarge) GetPayload() *PatchProductsRequestEntityTooLargeBody {
	return o.Payload
}

func (o *PatchProductsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchProductsRequestEntityTooLargeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProductsUnsupportedMediaType creates a PatchProductsUnsupportedMediaType with default headers values
func NewPatchProductsUnsupportedMediaType() *PatchProductsUnsupportedMediaType {
	return &PatchProductsUnsupportedMediaType{}
}

/*PatchProductsUnsupportedMediaType handles this case with default header values.

Unsupported Media type
*/
type PatchProductsUnsupportedMediaType struct {
	Payload *PatchProductsUnsupportedMediaTypeBody
}

func (o *PatchProductsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/rest/v1/products][%d] patchProductsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchProductsUnsupportedMediaType) GetPayload() *PatchProductsUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PatchProductsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchProductsUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchProductsBody patch products body
swagger:model PatchProductsBody
*/
type PatchProductsBody struct {

	// associations
	Associations *PatchProductsParamsBodyAssociations `json:"associations,omitempty"`

	// Codes of the categories in which the product is classified
	Categories []string `json:"categories"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Whether the product is enable
	Enabled *bool `json:"enabled,omitempty"`

	// Family code from which the product inherits its attributes and attributes requirements
	Family *string `json:"family,omitempty"`

	// Codes of the groups to which the product belong
	Groups []string `json:"groups"`

	// Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
	// Required: true
	Identifier *string `json:"identifier"`

	// metadata
	Metadata *PatchProductsParamsBodyMetadata `json:"metadata,omitempty"`

	// Code of the parent product model when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
	Parent *string `json:"parent,omitempty"`

	// Product quality scores for each channel/locale combination (only available in Serenity and when the "with_quality_scores" query parameter is set to "true")
	QualityScores interface{} `json:"quality_scores,omitempty"`

	// quantified associations
	QuantifiedAssociations *PatchProductsParamsBodyQuantifiedAssociations `json:"quantified_associations,omitempty"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *PatchProductsParamsBodyValues `json:"values,omitempty"`
}

// Validate validates this patch products body
func (o *PatchProductsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantifiedAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchProductsBody) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(o.Associations) { // not required
		return nil
	}

	if o.Associations != nil {
		if err := o.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "associations")
			}
			return err
		}
	}

	return nil
}

func (o *PatchProductsBody) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"identifier", "body", o.Identifier); err != nil {
		return err
	}

	return nil
}

func (o *PatchProductsBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *PatchProductsBody) validateQuantifiedAssociations(formats strfmt.Registry) error {

	if swag.IsZero(o.QuantifiedAssociations) { // not required
		return nil
	}

	if o.QuantifiedAssociations != nil {
		if err := o.QuantifiedAssociations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "quantified_associations")
			}
			return err
		}
	}

	return nil
}

func (o *PatchProductsBody) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(o.Values) { // not required
		return nil
	}

	if o.Values != nil {
		if err := o.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsForbiddenBody patch products forbidden body
swagger:model PatchProductsForbiddenBody
*/
type PatchProductsForbiddenBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch products forbidden body
func (o *PatchProductsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsOKBody patch products o k body
swagger:model PatchProductsOKBody
*/
type PatchProductsOKBody struct {

	// Resource code, only filled when the resource is not a product
	Code string `json:"code,omitempty"`

	// Resource identifier, only filled when the resource is a product
	Identifier string `json:"identifier,omitempty"`

	// Line number
	Line int64 `json:"line,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`

	// HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
	StatusCode int64 `json:"status_code,omitempty"`
}

// Validate validates this patch products o k body
func (o *PatchProductsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsOKBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyAssociations Several associations related to groups, product models and/or other products, grouped by association types
swagger:model PatchProductsParamsBodyAssociations
*/
type PatchProductsParamsBodyAssociations struct {

	// association type code
	AssociationTypeCode *PatchProductsParamsBodyAssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this patch products params body associations
func (o *PatchProductsParamsBodyAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchProductsParamsBodyAssociations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(o.AssociationTypeCode) { // not required
		return nil
	}

	if o.AssociationTypeCode != nil {
		if err := o.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyAssociations) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyAssociations) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyAssociationsAssociationTypeCode patch products params body associations association type code
swagger:model PatchProductsParamsBodyAssociationsAssociationTypeCode
*/
type PatchProductsParamsBodyAssociationsAssociationTypeCode struct {

	// Array of groups codes with which the product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of product identifiers with which the product is in relation
	Products []string `json:"products"`
}

// Validate validates this patch products params body associations association type code
func (o *PatchProductsParamsBodyAssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyAssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyAssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyAssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyMetadata More information around the product (only available since the v2.0 in the Enterprise Edition)
swagger:model PatchProductsParamsBodyMetadata
*/
type PatchProductsParamsBodyMetadata struct {

	// Status of the product regarding the user permissions (only available since the v2.0 in the Enterprise Edition)
	// Enum: [read_only draft_in_progress proposal_waiting_for_approval working_copy]
	WorkflowStatus string `json:"workflow_status,omitempty"`
}

// Validate validates this patch products params body metadata
func (o *PatchProductsParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWorkflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchProductsParamsBodyMetadataTypeWorkflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only","draft_in_progress","proposal_waiting_for_approval","working_copy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchProductsParamsBodyMetadataTypeWorkflowStatusPropEnum = append(patchProductsParamsBodyMetadataTypeWorkflowStatusPropEnum, v)
	}
}

const (

	// PatchProductsParamsBodyMetadataWorkflowStatusReadOnly captures enum value "read_only"
	PatchProductsParamsBodyMetadataWorkflowStatusReadOnly string = "read_only"

	// PatchProductsParamsBodyMetadataWorkflowStatusDraftInProgress captures enum value "draft_in_progress"
	PatchProductsParamsBodyMetadataWorkflowStatusDraftInProgress string = "draft_in_progress"

	// PatchProductsParamsBodyMetadataWorkflowStatusProposalWaitingForApproval captures enum value "proposal_waiting_for_approval"
	PatchProductsParamsBodyMetadataWorkflowStatusProposalWaitingForApproval string = "proposal_waiting_for_approval"

	// PatchProductsParamsBodyMetadataWorkflowStatusWorkingCopy captures enum value "working_copy"
	PatchProductsParamsBodyMetadataWorkflowStatusWorkingCopy string = "working_copy"
)

// prop value enum
func (o *PatchProductsParamsBodyMetadata) validateWorkflowStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchProductsParamsBodyMetadataTypeWorkflowStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchProductsParamsBodyMetadata) validateWorkflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.WorkflowStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateWorkflowStatusEnum("body"+"."+"metadata"+"."+"workflow_status", "body", o.WorkflowStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyQuantifiedAssociations Several quantified associations related to products and/or product models, grouped by quantified association types (only available in Serenity)
swagger:model PatchProductsParamsBodyQuantifiedAssociations
*/
type PatchProductsParamsBodyQuantifiedAssociations struct {

	// quantified association type code
	QuantifiedAssociationTypeCode *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode `json:"quantifiedAssociationTypeCode,omitempty"`
}

// Validate validates this patch products params body quantified associations
func (o *PatchProductsParamsBodyQuantifiedAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuantifiedAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchProductsParamsBodyQuantifiedAssociations) validateQuantifiedAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(o.QuantifiedAssociationTypeCode) { // not required
		return nil
	}

	if o.QuantifiedAssociationTypeCode != nil {
		if err := o.QuantifiedAssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "quantified_associations" + "." + "quantifiedAssociationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociations) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociations) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyQuantifiedAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode patch products params body quantified associations quantified association type code
swagger:model PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode
*/
type PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode struct {

	// Array of objects containing product model codes and quantities with which the product is in relation
	ProductModels []*PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 `json:"product_models"`

	// Array of objects containing product identifiers and quantities with which the product is in relation
	Products []*PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 `json:"products"`
}

// Validate validates this patch products params body quantified associations quantified association type code
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductModels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProductModels(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductModels) { // not required
		return nil
	}

	for i := 0; i < len(o.ProductModels); i++ {
		if swag.IsZero(o.ProductModels[i]) { // not required
			continue
		}

		if o.ProductModels[i] != nil {
			if err := o.ProductModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "product_models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(o.Products) { // not required
		return nil
	}

	for i := 0; i < len(o.Products); i++ {
		if swag.IsZero(o.Products[i]) { // not required
			continue
		}

		if o.Products[i] != nil {
			if err := o.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 patch products params body quantified associations quantified association type code product models items0
swagger:model PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
*/
type PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this patch products params body quantified associations quantified association type code product models items0
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 patch products params body quantified associations quantified association type code products items0
swagger:model PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
*/
type PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 struct {

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this patch products params body quantified associations quantified association type code products items0
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyValues Product attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
swagger:model PatchProductsParamsBodyValues
*/
type PatchProductsParamsBodyValues struct {

	// attribute code
	AttributeCode []*PatchProductsParamsBodyValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this patch products params body values
func (o *PatchProductsParamsBodyValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchProductsParamsBodyValues) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(o.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(o.AttributeCode); i++ {
		if swag.IsZero(o.AttributeCode[i]) { // not required
			continue
		}

		if o.AttributeCode[i] != nil {
			if err := o.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyValues) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyValues) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyValuesAttributeCodeItems0 patch products params body values attribute code items0
swagger:model PatchProductsParamsBodyValuesAttributeCodeItems0
*/
type PatchProductsParamsBodyValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// linked data
	LinkedData *PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData `json:"linked_data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this patch products params body values attribute code items0
func (o *PatchProductsParamsBodyValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinkedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchProductsParamsBodyValuesAttributeCodeItems0) validateLinkedData(formats strfmt.Registry) error {

	if swag.IsZero(o.LinkedData) { // not required
		return nil
	}

	if o.LinkedData != nil {
		if err := o.LinkedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linked_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData Object containing labels of attribute options (only available in Serenity and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
swagger:model PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData
*/
type PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData struct {

	// attribute
	Attribute string `json:"attribute,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// labels
	Labels interface{} `json:"labels,omitempty"`
}

// Validate validates this patch products params body values attribute code items0 linked data
func (o *PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData) UnmarshalBinary(b []byte) error {
	var res PatchProductsParamsBodyValuesAttributeCodeItems0LinkedData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsRequestEntityTooLargeBody patch products request entity too large body
swagger:model PatchProductsRequestEntityTooLargeBody
*/
type PatchProductsRequestEntityTooLargeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch products request entity too large body
func (o *PatchProductsRequestEntityTooLargeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsRequestEntityTooLargeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsRequestEntityTooLargeBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsRequestEntityTooLargeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsUnauthorizedBody patch products unauthorized body
swagger:model PatchProductsUnauthorizedBody
*/
type PatchProductsUnauthorizedBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch products unauthorized body
func (o *PatchProductsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchProductsUnsupportedMediaTypeBody patch products unsupported media type body
swagger:model PatchProductsUnsupportedMediaTypeBody
*/
type PatchProductsUnsupportedMediaTypeBody struct {

	// HTTP status code
	Code int64 `json:"code,omitempty"`

	// Message explaining the error
	Message string `json:"message,omitempty"`
}

// Validate validates this patch products unsupported media type body
func (o *PatchProductsUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

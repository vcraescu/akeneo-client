// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new product API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProductsCode(params *DeleteProductsCodeParams) (*DeleteProductsCodeNoContent, error)

	GetDraftCode(params *GetDraftCodeParams) (*GetDraftCodeOK, error)

	GetProducts(params *GetProductsParams) (*GetProductsOK, error)

	GetProductsCode(params *GetProductsCodeParams) (*GetProductsCodeOK, error)

	PatchProducts(params *PatchProductsParams) (*PatchProductsOK, error)

	PatchProductsCode(params *PatchProductsCodeParams) (*PatchProductsCodeCreated, *PatchProductsCodeNoContent, error)

	PostProducts(params *PostProductsParams) (*PostProductsCreated, error)

	PostProposal(params *PostProposalParams) (*PostProposalCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteProductsCode deletes a product

  This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
*/
func (a *Client) DeleteProductsCode(params *DeleteProductsCodeParams) (*DeleteProductsCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_products__code_",
		Method:             "DELETE",
		PathPattern:        "/api/rest/v1/products/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProductsCodeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_products__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDraftCode gets a draft

  This endpoint allows you to get the information about a given draft.
*/
func (a *Client) GetDraftCode(params *GetDraftCodeParams) (*GetDraftCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDraftCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_draft__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/products/{code}/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDraftCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDraftCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_draft__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProducts gets list of products

  This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
*/
func (a *Client) GetProducts(params *GetProductsParams) (*GetProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_products",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_products: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductsCode gets a product

  This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
*/
func (a *Client) GetProductsCode(params *GetProductsCodeParams) (*GetProductsCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_products__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/products/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductsCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_products__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProducts updates create several products

  This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
*/
func (a *Client) PatchProducts(params *PatchProductsParams) (*PatchProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_products",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_products: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProductsCode updates create a product

  This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
*/
func (a *Client) PatchProductsCode(params *PatchProductsCodeParams) (*PatchProductsCodeCreated, *PatchProductsCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_products__code_",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/products/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchProductsCodeCreated:
		return value, nil, nil
	case *PatchProductsCodeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for product: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProducts creates a new product

  This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
*/
func (a *Client) PostProducts(params *PostProductsParams) (*PostProductsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_products",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProductsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProductsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_products: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProposal submits a draft for approval

  This endpoint allows you to submit a draft for approval.
*/
func (a *Client) PostProposal(params *PostProposalParams) (*PostProposalCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_proposal",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/products/{code}/proposal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProposalCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_proposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

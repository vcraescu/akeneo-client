// Code generated by go-swagger; DO NOT EDIT.

package product_media_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new product media file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product media file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetMediaFiles(params *GetMediaFilesParams) (*GetMediaFilesOK, error)

	GetMediaFilesCode(params *GetMediaFilesCodeParams) (*GetMediaFilesCodeOK, error)

	GetMediaFilesCodeDownload(params *GetMediaFilesCodeDownloadParams) (*GetMediaFilesCodeDownloadOK, error)

	PostMediaFiles(params *PostMediaFilesParams) (*PostMediaFilesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetMediaFiles gets a list of product media files

  This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
*/
func (a *Client) GetMediaFiles(params *GetMediaFilesParams) (*GetMediaFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMediaFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_media_files",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/media-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMediaFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMediaFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_media_files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMediaFilesCode gets a product media file

  This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
*/
func (a *Client) GetMediaFilesCode(params *GetMediaFilesCodeParams) (*GetMediaFilesCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMediaFilesCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_media_files__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/media-files/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMediaFilesCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMediaFilesCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_media_files__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMediaFilesCodeDownload downloads a product media file

  This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
*/
func (a *Client) GetMediaFilesCodeDownload(params *GetMediaFilesCodeDownloadParams) (*GetMediaFilesCodeDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMediaFilesCodeDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_media_files__code__download",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/media-files/{code}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMediaFilesCodeDownloadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMediaFilesCodeDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_media_files__code__download: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostMediaFiles creates a new product media file

  This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
*/
func (a *Client) PostMediaFiles(params *PostMediaFilesParams) (*PostMediaFilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMediaFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_media_files",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/media-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMediaFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMediaFilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_media_files: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

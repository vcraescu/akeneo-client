// Code generated by go-swagger; DO NOT EDIT.

package product_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new product model API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product model API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetProductModelDraftCode(params *GetProductModelDraftCodeParams) (*GetProductModelDraftCodeOK, error)

	GetProductModels(params *GetProductModelsParams) (*GetProductModelsOK, error)

	GetProductModelsCode(params *GetProductModelsCodeParams) (*GetProductModelsCodeOK, error)

	PatchProductModels(params *PatchProductModelsParams) (*PatchProductModelsOK, error)

	PatchProductModelsCode(params *PatchProductModelsCodeParams) (*PatchProductModelsCodeCreated, *PatchProductModelsCodeNoContent, error)

	PostProductModelProposal(params *PostProductModelProposalParams) (*PostProductModelProposalCreated, error)

	PostProductModels(params *PostProductModelsParams) (*PostProductModelsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetProductModelDraftCode gets a draft

  This endpoint allows you to get the information about a given product model draft.
*/
func (a *Client) GetProductModelDraftCode(params *GetProductModelDraftCodeParams) (*GetProductModelDraftCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductModelDraftCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_product_model_draft__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/product-models/{code}/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductModelDraftCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductModelDraftCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_product_model_draft__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductModels gets list of product models

  This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
*/
func (a *Client) GetProductModels(params *GetProductModelsParams) (*GetProductModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_product_models",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/product-models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_product_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductModelsCode gets a product model

  This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
*/
func (a *Client) GetProductModelsCode(params *GetProductModelsCodeParams) (*GetProductModelsCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductModelsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_product_models__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/product-models/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductModelsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductModelsCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_product_models__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProductModels updates create several product models

  This endpoint allows you to update and/or create several product models at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model's categories.
*/
func (a *Client) PatchProductModels(params *PatchProductModelsParams) (*PatchProductModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_product_models",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/product-models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchProductModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_product_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProductModelsCode updates create a product model

  This endpoint allows you to update a given product model. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model's categories.
*/
func (a *Client) PatchProductModelsCode(params *PatchProductModelsCodeParams) (*PatchProductModelsCodeCreated, *PatchProductModelsCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductModelsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_product_models__code_",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/product-models/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductModelsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchProductModelsCodeCreated:
		return value, nil, nil
	case *PatchProductModelsCodeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for product_model: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProductModelProposal submits a draft for approval

  This endpoint allows you to submit a product model draft for approval.
*/
func (a *Client) PostProductModelProposal(params *PostProductModelProposalParams) (*PostProductModelProposalCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProductModelProposalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_product_model_proposal",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/product-models/{code}/proposal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProductModelProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProductModelProposalCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_product_model_proposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProductModels creates a new product model

  This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
*/
func (a *Client) PostProductModels(params *PostProductModelsParams) (*PostProductModelsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProductModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_product_models",
		Method:             "POST",
		PathPattern:        "/api/rest/v1/product-models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProductModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProductModelsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_product_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package reference_entity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reference entity API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reference entity API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetReferenceEntities(params *GetReferenceEntitiesParams) (*GetReferenceEntitiesOK, error)

	GetReferenceEntitiesCode(params *GetReferenceEntitiesCodeParams) (*GetReferenceEntitiesCodeOK, error)

	PatchReferenceEntityCode(params *PatchReferenceEntityCodeParams) (*PatchReferenceEntityCodeCreated, *PatchReferenceEntityCodeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetReferenceEntities gets list of reference entities

  This endpoint allows you to get a list of reference entities. Reference entities are paginated.
*/
func (a *Client) GetReferenceEntities(params *GetReferenceEntitiesParams) (*GetReferenceEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReferenceEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_reference_entities",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/reference-entities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReferenceEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReferenceEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_reference_entities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReferenceEntitiesCode gets a reference entity

  This endpoint allows you to get the information about a given reference entity.
*/
func (a *Client) GetReferenceEntitiesCode(params *GetReferenceEntitiesCodeParams) (*GetReferenceEntitiesCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReferenceEntitiesCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_reference_entities__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/reference-entities/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReferenceEntitiesCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReferenceEntitiesCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_reference_entities__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchReferenceEntityCode updates create a reference entity

  This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
*/
func (a *Client) PatchReferenceEntityCode(params *PatchReferenceEntityCodeParams) (*PatchReferenceEntityCodeCreated, *PatchReferenceEntityCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReferenceEntityCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_reference_entity__code_",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/reference-entities/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchReferenceEntityCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchReferenceEntityCodeCreated:
		return value, nil, nil
	case *PatchReferenceEntityCodeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reference_entity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

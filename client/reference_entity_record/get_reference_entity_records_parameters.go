// Code generated by go-swagger; DO NOT EDIT.

package reference_entity_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetReferenceEntityRecordsParams creates a new GetReferenceEntityRecordsParams object
// with the default values initialized.
func NewGetReferenceEntityRecordsParams() *GetReferenceEntityRecordsParams {
	var (
		searchAfterDefault = string("cursor to the first page")
	)
	return &GetReferenceEntityRecordsParams{
		SearchAfter: &searchAfterDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetReferenceEntityRecordsParamsWithTimeout creates a new GetReferenceEntityRecordsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetReferenceEntityRecordsParamsWithTimeout(timeout time.Duration) *GetReferenceEntityRecordsParams {
	var (
		searchAfterDefault = string("cursor to the first page")
	)
	return &GetReferenceEntityRecordsParams{
		SearchAfter: &searchAfterDefault,

		timeout: timeout,
	}
}

// NewGetReferenceEntityRecordsParamsWithContext creates a new GetReferenceEntityRecordsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetReferenceEntityRecordsParamsWithContext(ctx context.Context) *GetReferenceEntityRecordsParams {
	var (
		searchAfterDefault = string("cursor to the first page")
	)
	return &GetReferenceEntityRecordsParams{
		SearchAfter: &searchAfterDefault,

		Context: ctx,
	}
}

// NewGetReferenceEntityRecordsParamsWithHTTPClient creates a new GetReferenceEntityRecordsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetReferenceEntityRecordsParamsWithHTTPClient(client *http.Client) *GetReferenceEntityRecordsParams {
	var (
		searchAfterDefault = string("cursor to the first page")
	)
	return &GetReferenceEntityRecordsParams{
		SearchAfter: &searchAfterDefault,
		HTTPClient:  client,
	}
}

/*GetReferenceEntityRecordsParams contains all the parameters to send to the API endpoint
for the get reference entity records operation typically these are written to a http.Request
*/
type GetReferenceEntityRecordsParams struct {

	/*Channel
	  Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-attribute-values-by-channel">Filter attribute values by channel</a> section

	*/
	Channel *string
	/*Locales
	  Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href=/documentation/filter.html#filter-attribute-values-by-locale">Filter attribute values by locale</a> section

	*/
	Locales *string
	/*ReferenceEntityCode
	  Code of the reference entity

	*/
	ReferenceEntityCode string
	/*Search
	  Filter records of the reference entity, for more details see the <a href="/documentation/filter.html#filter-reference-entity-records">Filters</a> section

	*/
	Search *string
	/*SearchAfter
	  Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section

	*/
	SearchAfter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithTimeout(timeout time.Duration) *GetReferenceEntityRecordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithContext(ctx context.Context) *GetReferenceEntityRecordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithHTTPClient(client *http.Client) *GetReferenceEntityRecordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannel adds the channel to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithChannel(channel *string) *GetReferenceEntityRecordsParams {
	o.SetChannel(channel)
	return o
}

// SetChannel adds the channel to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetChannel(channel *string) {
	o.Channel = channel
}

// WithLocales adds the locales to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithLocales(locales *string) *GetReferenceEntityRecordsParams {
	o.SetLocales(locales)
	return o
}

// SetLocales adds the locales to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetLocales(locales *string) {
	o.Locales = locales
}

// WithReferenceEntityCode adds the referenceEntityCode to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithReferenceEntityCode(referenceEntityCode string) *GetReferenceEntityRecordsParams {
	o.SetReferenceEntityCode(referenceEntityCode)
	return o
}

// SetReferenceEntityCode adds the referenceEntityCode to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetReferenceEntityCode(referenceEntityCode string) {
	o.ReferenceEntityCode = referenceEntityCode
}

// WithSearch adds the search to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithSearch(search *string) *GetReferenceEntityRecordsParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetSearch(search *string) {
	o.Search = search
}

// WithSearchAfter adds the searchAfter to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) WithSearchAfter(searchAfter *string) *GetReferenceEntityRecordsParams {
	o.SetSearchAfter(searchAfter)
	return o
}

// SetSearchAfter adds the searchAfter to the get reference entity records params
func (o *GetReferenceEntityRecordsParams) SetSearchAfter(searchAfter *string) {
	o.SearchAfter = searchAfter
}

// WriteToRequest writes these params to a swagger request
func (o *GetReferenceEntityRecordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Channel != nil {

		// query param channel
		var qrChannel string
		if o.Channel != nil {
			qrChannel = *o.Channel
		}
		qChannel := qrChannel
		if qChannel != "" {
			if err := r.SetQueryParam("channel", qChannel); err != nil {
				return err
			}
		}

	}

	if o.Locales != nil {

		// query param locales
		var qrLocales string
		if o.Locales != nil {
			qrLocales = *o.Locales
		}
		qLocales := qrLocales
		if qLocales != "" {
			if err := r.SetQueryParam("locales", qLocales); err != nil {
				return err
			}
		}

	}

	// path param reference_entity_code
	if err := r.SetPathParam("reference_entity_code", o.ReferenceEntityCode); err != nil {
		return err
	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SearchAfter != nil {

		// query param search_after
		var qrSearchAfter string
		if o.SearchAfter != nil {
			qrSearchAfter = *o.SearchAfter
		}
		qSearchAfter := qrSearchAfter
		if qSearchAfter != "" {
			if err := r.SetQueryParam("search_after", qSearchAfter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

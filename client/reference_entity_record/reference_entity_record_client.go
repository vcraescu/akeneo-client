// Code generated by go-swagger; DO NOT EDIT.

package reference_entity_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reference entity record API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reference entity record API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetReferenceEntityRecords(params *GetReferenceEntityRecordsParams) (*GetReferenceEntityRecordsOK, error)

	GetReferenceEntityRecordsCode(params *GetReferenceEntityRecordsCodeParams) (*GetReferenceEntityRecordsCodeOK, error)

	PatchReferenceEntityRecords(params *PatchReferenceEntityRecordsParams) (*PatchReferenceEntityRecordsOK, error)

	PatchReferenceEntityRecordsCode(params *PatchReferenceEntityRecordsCodeParams) (*PatchReferenceEntityRecordsCodeCreated, *PatchReferenceEntityRecordsCodeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetReferenceEntityRecords gets the list of the records of a reference entity

  This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
*/
func (a *Client) GetReferenceEntityRecords(params *GetReferenceEntityRecordsParams) (*GetReferenceEntityRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReferenceEntityRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_reference_entity_records",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/reference-entities/{reference_entity_code}/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReferenceEntityRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReferenceEntityRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_reference_entity_records: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReferenceEntityRecordsCode gets a record of a given reference entity

  This endpoint allows you to get the information about a given record for a given reference entity.
*/
func (a *Client) GetReferenceEntityRecordsCode(params *GetReferenceEntityRecordsCodeParams) (*GetReferenceEntityRecordsCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReferenceEntityRecordsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_reference_entity_records__code_",
		Method:             "GET",
		PathPattern:        "/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReferenceEntityRecordsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReferenceEntityRecordsCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_reference_entity_records__code_: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchReferenceEntityRecords updates create several reference entity records

  This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
*/
func (a *Client) PatchReferenceEntityRecords(params *PatchReferenceEntityRecordsParams) (*PatchReferenceEntityRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReferenceEntityRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_reference_entity_records",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/reference-entities/{reference_entity_code}/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchReferenceEntityRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchReferenceEntityRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_reference_entity_records: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchReferenceEntityRecordsCode updates create a record of a given reference entity

  This endpoint allows you to update a given record of a given renference entity. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
*/
func (a *Client) PatchReferenceEntityRecordsCode(params *PatchReferenceEntityRecordsCodeParams) (*PatchReferenceEntityRecordsCodeCreated, *PatchReferenceEntityRecordsCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReferenceEntityRecordsCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch_reference_entity_records__code_",
		Method:             "PATCH",
		PathPattern:        "/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchReferenceEntityRecordsCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchReferenceEntityRecordsCodeCreated:
		return value, nil, nil
	case *PatchReferenceEntityRecordsCodeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reference_entity_record: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

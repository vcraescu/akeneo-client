// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetFamilyList asset family list
//
// swagger:model AssetFamilyList
type AssetFamilyList struct {

	// links
	Links *AssetFamilyListAO0Links `json:"_links,omitempty"`

	// Attribute code that is used as the main media of the asset family.
	AttributeAsMainMedia *string `json:"attribute_as_main_media,omitempty"`

	// Asset family code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *AssetFamilyListAO1Labels `json:"labels,omitempty"`

	// naming convention
	NamingConvention *AssetFamilyListAO1NamingConvention `json:"naming_convention,omitempty"`

	// The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.
	ProductLinkRules []*AssetFamilyListProductLinkRulesItems0 `json:"product_link_rules"`

	// The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.
	Transformations []*AssetFamilyListTransformationsItems0 `json:"transformations"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetFamilyList) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Links *AssetFamilyListAO0Links `json:"_links,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Links = dataAO0.Links

	// AO1
	var dataAO1 struct {
		AttributeAsMainMedia *string `json:"attribute_as_main_media,omitempty"`

		Code *string `json:"code"`

		Labels *AssetFamilyListAO1Labels `json:"labels,omitempty"`

		NamingConvention *AssetFamilyListAO1NamingConvention `json:"naming_convention,omitempty"`

		ProductLinkRules []*AssetFamilyListProductLinkRulesItems0 `json:"product_link_rules"`

		Transformations []*AssetFamilyListTransformationsItems0 `json:"transformations"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AttributeAsMainMedia = dataAO1.AttributeAsMainMedia

	m.Code = dataAO1.Code

	m.Labels = dataAO1.Labels

	m.NamingConvention = dataAO1.NamingConvention

	m.ProductLinkRules = dataAO1.ProductLinkRules

	m.Transformations = dataAO1.Transformations

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetFamilyList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Links *AssetFamilyListAO0Links `json:"_links,omitempty"`
	}

	dataAO0.Links = m.Links

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		AttributeAsMainMedia *string `json:"attribute_as_main_media,omitempty"`

		Code *string `json:"code"`

		Labels *AssetFamilyListAO1Labels `json:"labels,omitempty"`

		NamingConvention *AssetFamilyListAO1NamingConvention `json:"naming_convention,omitempty"`

		ProductLinkRules []*AssetFamilyListProductLinkRulesItems0 `json:"product_link_rules"`

		Transformations []*AssetFamilyListTransformationsItems0 `json:"transformations"`
	}

	dataAO1.AttributeAsMainMedia = m.AttributeAsMainMedia

	dataAO1.Code = m.Code

	dataAO1.Labels = m.Labels

	dataAO1.NamingConvention = m.NamingConvention

	dataAO1.ProductLinkRules = m.ProductLinkRules

	dataAO1.Transformations = m.Transformations

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset family list
func (m *AssetFamilyList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamingConvention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductLinkRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyList) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetFamilyList) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyList) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *AssetFamilyList) validateNamingConvention(formats strfmt.Registry) error {

	if swag.IsZero(m.NamingConvention) { // not required
		return nil
	}

	if m.NamingConvention != nil {
		if err := m.NamingConvention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("naming_convention")
			}
			return err
		}
	}

	return nil
}

func (m *AssetFamilyList) validateProductLinkRules(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductLinkRules) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductLinkRules); i++ {
		if swag.IsZero(m.ProductLinkRules[i]) { // not required
			continue
		}

		if m.ProductLinkRules[i] != nil {
			if err := m.ProductLinkRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_link_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetFamilyList) validateTransformations(formats strfmt.Registry) error {

	if swag.IsZero(m.Transformations) { // not required
		return nil
	}

	for i := 0; i < len(m.Transformations); i++ {
		if swag.IsZero(m.Transformations[i]) { // not required
			continue
		}

		if m.Transformations[i] != nil {
			if err := m.Transformations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyList) UnmarshalBinary(b []byte) error {
	var res AssetFamilyList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListAO0Links asset family list a o0 links
//
// swagger:model AssetFamilyListAO0Links
type AssetFamilyListAO0Links struct {

	// self
	Self *AssetFamilyListAO0LinksSelf `json:"self,omitempty"`
}

// Validate validates this asset family list a o0 links
func (m *AssetFamilyListAO0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListAO0Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListAO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListAO0Links) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListAO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListAO0LinksSelf asset family list a o0 links self
//
// swagger:model AssetFamilyListAO0LinksSelf
type AssetFamilyListAO0LinksSelf struct {

	// URI of the resource
	Href string `json:"href,omitempty"`
}

// Validate validates this asset family list a o0 links self
func (m *AssetFamilyListAO0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListAO0LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListAO0LinksSelf) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListAO0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListAO1Labels Asset family labels for each locale
//
// swagger:model AssetFamilyListAO1Labels
type AssetFamilyListAO1Labels struct {

	// Asset family label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this asset family list a o1 labels
func (m *AssetFamilyListAO1Labels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListAO1Labels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListAO1Labels) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListAO1Labels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListAO1NamingConvention The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
//
// swagger:model AssetFamilyListAO1NamingConvention
type AssetFamilyListAO1NamingConvention struct {

	// Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.
	AbortAssetCreationOnError bool `json:"abort_asset_creation_on_error,omitempty"`

	// The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.
	Pattern string `json:"pattern,omitempty"`

	// The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
	Source interface{} `json:"source,omitempty"`
}

// Validate validates this asset family list a o1 naming convention
func (m *AssetFamilyListAO1NamingConvention) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListAO1NamingConvention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListAO1NamingConvention) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListAO1NamingConvention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListProductLinkRulesItems0 asset family list product link rules items0
//
// swagger:model AssetFamilyListProductLinkRulesItems0
type AssetFamilyListProductLinkRulesItems0 struct {

	// The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.
	AssignAssetsTo []*AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0 `json:"assign_assets_to"`

	// The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.
	ProductSelections []*AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0 `json:"product_selections"`
}

// Validate validates this asset family list product link rules items0
func (m *AssetFamilyListProductLinkRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignAssetsTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductSelections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0) validateAssignAssetsTo(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignAssetsTo) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignAssetsTo); i++ {
		if swag.IsZero(m.AssignAssetsTo[i]) { // not required
			continue
		}

		if m.AssignAssetsTo[i] != nil {
			if err := m.AssignAssetsTo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assign_assets_to" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0) validateProductSelections(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductSelections) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductSelections); i++ {
		if swag.IsZero(m.ProductSelections[i]) { // not required
			continue
		}

		if m.ProductSelections[i] != nil {
			if err := m.ProductSelections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_selections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListProductLinkRulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListProductLinkRulesItems0) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListProductLinkRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0 asset family list product link rules items0 assign assets to items0
//
// swagger:model AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0
type AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0 struct {

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// channel
	Channel string `json:"channel,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// mode
	// Required: true
	Mode *string `json:"mode"`
}

// Validate validates this asset family list product link rules items0 assign assets to items0
func (m *AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("attribute", "body", m.Attribute); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListProductLinkRulesItems0AssignAssetsToItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0 asset family list product link rules items0 product selections items0
//
// swagger:model AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0
type AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0 struct {

	// channel
	Channel string `json:"channel,omitempty"`

	// field
	// Required: true
	Field *string `json:"field"`

	// locale
	Locale string `json:"locale,omitempty"`

	// operator
	// Required: true
	Operator *string `json:"operator"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this asset family list product link rules items0 product selections items0
func (m *AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListProductLinkRulesItems0ProductSelectionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListTransformationsItems0 asset family list transformations items0
//
// swagger:model AssetFamilyListTransformationsItems0
type AssetFamilyListTransformationsItems0 struct {

	// The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
	FilenamePrefix string `json:"filename_prefix,omitempty"`

	// The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
	FilenameSuffix string `json:"filename_suffix,omitempty"`

	// The name of the transformation
	// Required: true
	Label *string `json:"label"`

	// operations
	// Required: true
	Operations *AssetFamilyListTransformationsItems0Operations `json:"operations"`

	// source
	// Required: true
	Source *AssetFamilyListTransformationsItems0Source `json:"source"`

	// target
	// Required: true
	Target *AssetFamilyListTransformationsItems0Target `json:"target"`
}

// Validate validates this asset family list transformations items0
func (m *AssetFamilyListTransformationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListTransformationsItems0) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0) validateOperations(formats strfmt.Registry) error {

	if err := validate.Required("operations", "body", m.Operations); err != nil {
		return err
	}

	if m.Operations != nil {
		if err := m.Operations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations")
			}
			return err
		}
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListTransformationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListTransformationsItems0Operations The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
//
// swagger:model AssetFamilyListTransformationsItems0Operations
type AssetFamilyListTransformationsItems0Operations struct {

	// parameters
	Parameters *AssetFamilyListTransformationsItems0OperationsParameters `json:"parameters,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this asset family list transformations items0 operations
func (m *AssetFamilyListTransformationsItems0Operations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListTransformationsItems0Operations) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations" + "." + "parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0Operations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0Operations) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListTransformationsItems0Operations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListTransformationsItems0OperationsParameters asset family list transformations items0 operations parameters
//
// swagger:model AssetFamilyListTransformationsItems0OperationsParameters
type AssetFamilyListTransformationsItems0OperationsParameters struct {

	// colorspace
	Colorspace string `json:"colorspace,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// quality
	Quality int64 `json:"quality,omitempty"`

	// ratio
	Ratio int64 `json:"ratio,omitempty"`

	// resolution unit
	ResolutionUnit string `json:"resolution-unit,omitempty"`

	// resolution x
	Resolutionx int64 `json:"resolution-x,omitempty"`

	// resolution y
	Resolutiony int64 `json:"resolution-y,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this asset family list transformations items0 operations parameters
func (m *AssetFamilyListTransformationsItems0OperationsParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0OperationsParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0OperationsParameters) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListTransformationsItems0OperationsParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListTransformationsItems0Source The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
//
// swagger:model AssetFamilyListTransformationsItems0Source
type AssetFamilyListTransformationsItems0Source struct {

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// channel
	// Required: true
	Channel *string `json:"channel"`

	// locale
	// Required: true
	Locale *string `json:"locale"`
}

// Validate validates this asset family list transformations items0 source
func (m *AssetFamilyListTransformationsItems0Source) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListTransformationsItems0Source) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("source"+"."+"attribute", "body", m.Attribute); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0Source) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("source"+"."+"channel", "body", m.Channel); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0Source) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("source"+"."+"locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0Source) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0Source) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListTransformationsItems0Source
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetFamilyListTransformationsItems0Target The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
//
// swagger:model AssetFamilyListTransformationsItems0Target
type AssetFamilyListTransformationsItems0Target struct {

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// channel
	// Required: true
	Channel *string `json:"channel"`

	// locale
	// Required: true
	Locale *string `json:"locale"`
}

// Validate validates this asset family list transformations items0 target
func (m *AssetFamilyListTransformationsItems0Target) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetFamilyListTransformationsItems0Target) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("target"+"."+"attribute", "body", m.Attribute); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0Target) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("target"+"."+"channel", "body", m.Channel); err != nil {
		return err
	}

	return nil
}

func (m *AssetFamilyListTransformationsItems0Target) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("target"+"."+"locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0Target) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetFamilyListTransformationsItems0Target) UnmarshalBinary(b []byte) error {
	var res AssetFamilyListTransformationsItems0Target
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

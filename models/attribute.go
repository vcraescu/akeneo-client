// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attribute attribute
//
// swagger:model Attribute
type Attribute struct {

	// Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
	AllowedExtensions []string `json:"allowed_extensions"`

	// To make the attribute locale specfic, specify here for which locales it is specific
	AvailableLocales []string `json:"available_locales"`

	// Attribute code
	// Required: true
	Code *string `json:"code"`

	// Maximum date allowed when the attribute type is `pim_catalog_date`
	// Format: date-time
	DateMax strfmt.DateTime `json:"date_max,omitempty"`

	// Minimum date allowed when the attribute type is `pim_catalog_date`
	// Format: date-time
	DateMin strfmt.DateTime `json:"date_min,omitempty"`

	// Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
	DecimalsAllowed bool `json:"decimals_allowed,omitempty"`

	// Default metric unit when the attribute type is `pim_catalog_metric`
	DefaultMetricUnit string `json:"default_metric_unit,omitempty"`

	// Attribute group
	// Required: true
	Group *string `json:"group"`

	// group labels
	GroupLabels *AttributeGroupLabels `json:"group_labels,omitempty"`

	// labels
	Labels *AttributeLabels `json:"labels,omitempty"`

	// Whether the attribute is localizable, i.e. can have one value by locale
	Localizable *bool `json:"localizable,omitempty"`

	// Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
	MaxCharacters int64 `json:"max_characters,omitempty"`

	// Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
	MaxFileSize string `json:"max_file_size,omitempty"`

	// Metric family when the attribute type is `pim_catalog_metric`
	MetricFamily string `json:"metric_family,omitempty"`

	// Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
	NegativeAllowed bool `json:"negative_allowed,omitempty"`

	// Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
	NumberMax string `json:"number_max,omitempty"`

	// Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
	NumberMin string `json:"number_min,omitempty"`

	// Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
	ReferenceDataName string `json:"reference_data_name,omitempty"`

	// Whether the attribute is scopable, i.e. can have one value by channel
	Scopable *bool `json:"scopable,omitempty"`

	// Order of the attribute in its group
	SortOrder int64 `json:"sort_order,omitempty"`

	// Attribute type
	// Required: true
	// Enum: [pim_catalog_identifier pim_catalog_metric pim_catalog_number pim_catalog_reference_data_multi_select pim_catalog_reference_data_simple_select pim_catalog_simpleselect pim_catalog_multiselect pim_catalog_date pim_catalog_textarea pim_catalog_text pim_catalog_file pim_catalog_image pim_catalog_price_collection pim_catalog_boolean akeneo_reference_entity akeneo_reference_entity_collection pim_catalog_asset_collection]
	Type *string `json:"type"`

	// Whether two values for the attribute cannot be the same
	Unique bool `json:"unique,omitempty"`

	// Whether the attribute can be used as a filter for the product grid in the PIM user interface
	UseableAsGridFilter bool `json:"useable_as_grid_filter,omitempty"`

	// Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
	ValidationRegexp string `json:"validation_regexp,omitempty"`

	// Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
	ValidationRule string `json:"validation_rule,omitempty"`

	// Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
	WysiwygEnabled bool `json:"wysiwyg_enabled,omitempty"`
}

// Validate validates this attribute
func (m *Attribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attribute) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateDateMax(formats strfmt.Registry) error {

	if swag.IsZero(m.DateMax) { // not required
		return nil
	}

	if err := validate.FormatOf("date_max", "body", "date-time", m.DateMax.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateDateMin(formats strfmt.Registry) error {

	if swag.IsZero(m.DateMin) { // not required
		return nil
	}

	if err := validate.FormatOf("date_min", "body", "date-time", m.DateMin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateGroupLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLabels) { // not required
		return nil
	}

	if m.GroupLabels != nil {
		if err := m.GroupLabels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group_labels")
			}
			return err
		}
	}

	return nil
}

func (m *Attribute) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

var attributeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pim_catalog_identifier","pim_catalog_metric","pim_catalog_number","pim_catalog_reference_data_multi_select","pim_catalog_reference_data_simple_select","pim_catalog_simpleselect","pim_catalog_multiselect","pim_catalog_date","pim_catalog_textarea","pim_catalog_text","pim_catalog_file","pim_catalog_image","pim_catalog_price_collection","pim_catalog_boolean","akeneo_reference_entity","akeneo_reference_entity_collection","pim_catalog_asset_collection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attributeTypeTypePropEnum = append(attributeTypeTypePropEnum, v)
	}
}

const (

	// AttributeTypePimCatalogIdentifier captures enum value "pim_catalog_identifier"
	AttributeTypePimCatalogIdentifier string = "pim_catalog_identifier"

	// AttributeTypePimCatalogMetric captures enum value "pim_catalog_metric"
	AttributeTypePimCatalogMetric string = "pim_catalog_metric"

	// AttributeTypePimCatalogNumber captures enum value "pim_catalog_number"
	AttributeTypePimCatalogNumber string = "pim_catalog_number"

	// AttributeTypePimCatalogReferenceDataMultiSelect captures enum value "pim_catalog_reference_data_multi_select"
	AttributeTypePimCatalogReferenceDataMultiSelect string = "pim_catalog_reference_data_multi_select"

	// AttributeTypePimCatalogReferenceDataSimpleSelect captures enum value "pim_catalog_reference_data_simple_select"
	AttributeTypePimCatalogReferenceDataSimpleSelect string = "pim_catalog_reference_data_simple_select"

	// AttributeTypePimCatalogSimpleselect captures enum value "pim_catalog_simpleselect"
	AttributeTypePimCatalogSimpleselect string = "pim_catalog_simpleselect"

	// AttributeTypePimCatalogMultiselect captures enum value "pim_catalog_multiselect"
	AttributeTypePimCatalogMultiselect string = "pim_catalog_multiselect"

	// AttributeTypePimCatalogDate captures enum value "pim_catalog_date"
	AttributeTypePimCatalogDate string = "pim_catalog_date"

	// AttributeTypePimCatalogTextarea captures enum value "pim_catalog_textarea"
	AttributeTypePimCatalogTextarea string = "pim_catalog_textarea"

	// AttributeTypePimCatalogText captures enum value "pim_catalog_text"
	AttributeTypePimCatalogText string = "pim_catalog_text"

	// AttributeTypePimCatalogFile captures enum value "pim_catalog_file"
	AttributeTypePimCatalogFile string = "pim_catalog_file"

	// AttributeTypePimCatalogImage captures enum value "pim_catalog_image"
	AttributeTypePimCatalogImage string = "pim_catalog_image"

	// AttributeTypePimCatalogPriceCollection captures enum value "pim_catalog_price_collection"
	AttributeTypePimCatalogPriceCollection string = "pim_catalog_price_collection"

	// AttributeTypePimCatalogBoolean captures enum value "pim_catalog_boolean"
	AttributeTypePimCatalogBoolean string = "pim_catalog_boolean"

	// AttributeTypeAkeneoReferenceEntity captures enum value "akeneo_reference_entity"
	AttributeTypeAkeneoReferenceEntity string = "akeneo_reference_entity"

	// AttributeTypeAkeneoReferenceEntityCollection captures enum value "akeneo_reference_entity_collection"
	AttributeTypeAkeneoReferenceEntityCollection string = "akeneo_reference_entity_collection"

	// AttributeTypePimCatalogAssetCollection captures enum value "pim_catalog_asset_collection"
	AttributeTypePimCatalogAssetCollection string = "pim_catalog_asset_collection"
)

// prop value enum
func (m *Attribute) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attributeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Attribute) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Attribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attribute) UnmarshalBinary(b []byte) error {
	var res Attribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AttributeGroupLabels Group labels for each locale
//
// swagger:model AttributeGroupLabels
type AttributeGroupLabels struct {

	// Group label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this attribute group labels
func (m *AttributeGroupLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttributeGroupLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeGroupLabels) UnmarshalBinary(b []byte) error {
	var res AttributeGroupLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AttributeLabels Attribute labels for each locale
//
// swagger:model AttributeLabels
type AttributeLabels struct {

	// Attribute label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this attribute labels
func (m *AttributeLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttributeLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeLabels) UnmarshalBinary(b []byte) error {
	var res AttributeLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

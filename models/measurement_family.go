// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MeasurementFamily measurement family
//
// swagger:model MeasurementFamily
type MeasurementFamily struct {

	// Measurement family code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *MeasurementFamilyLabels `json:"labels,omitempty"`

	// Unit code used as the standard unit for this measurement family
	// Required: true
	StandardUnitCode *string `json:"standard_unit_code"`

	// units
	// Required: true
	Units *MeasurementFamilyUnits `json:"units"`
}

// Validate validates this measurement family
func (m *MeasurementFamily) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardUnitCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeasurementFamily) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *MeasurementFamily) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *MeasurementFamily) validateStandardUnitCode(formats strfmt.Registry) error {

	if err := validate.Required("standard_unit_code", "body", m.StandardUnitCode); err != nil {
		return err
	}

	return nil
}

func (m *MeasurementFamily) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("units", "body", m.Units); err != nil {
		return err
	}

	if m.Units != nil {
		if err := m.Units.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("units")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamily) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamily) UnmarshalBinary(b []byte) error {
	var res MeasurementFamily
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyLabels Measurement family labels for each locale
//
// swagger:model MeasurementFamilyLabels
type MeasurementFamilyLabels struct {

	// Measurement family label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this measurement family labels
func (m *MeasurementFamilyLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyLabels) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyUnits Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
//
// swagger:model MeasurementFamilyUnits
type MeasurementFamilyUnits struct {

	// unit code
	UnitCode *MeasurementFamilyUnitsUnitCode `json:"unitCode,omitempty"`
}

// Validate validates this measurement family units
func (m *MeasurementFamilyUnits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnitCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeasurementFamilyUnits) validateUnitCode(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitCode) { // not required
		return nil
	}

	if m.UnitCode != nil {
		if err := m.UnitCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("units" + "." + "unitCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyUnits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyUnits) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyUnits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyUnitsUnitCode measurement family units unit code
//
// swagger:model MeasurementFamilyUnitsUnitCode
type MeasurementFamilyUnitsUnitCode struct {

	// Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
	Code string `json:"code,omitempty"`

	// Calculation to convert the unit into the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
	ConvertFromStandard []*MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0 `json:"convert_from_standard"`

	// labels
	Labels *MeasurementFamilyUnitsUnitCodeLabels `json:"labels,omitempty"`

	// Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
	Symbol string `json:"symbol,omitempty"`
}

// Validate validates this measurement family units unit code
func (m *MeasurementFamilyUnitsUnitCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConvertFromStandard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeasurementFamilyUnitsUnitCode) validateConvertFromStandard(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvertFromStandard) { // not required
		return nil
	}

	for i := 0; i < len(m.ConvertFromStandard); i++ {
		if swag.IsZero(m.ConvertFromStandard[i]) { // not required
			continue
		}

		if m.ConvertFromStandard[i] != nil {
			if err := m.ConvertFromStandard[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("units" + "." + "unitCode" + "." + "convert_from_standard" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeasurementFamilyUnitsUnitCode) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("units" + "." + "unitCode" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyUnitsUnitCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyUnitsUnitCode) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyUnitsUnitCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0 measurement family units unit code convert from standard items0
//
// swagger:model MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0
type MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0 struct {

	// Operator for a conversion operation to convert the unit in the standard unit
	// Enum: [mul div add sub]
	Operator string `json:"operator,omitempty"`

	// Value for a conversion operation to convert the unit in the standard unit
	Value string `json:"value,omitempty"`
}

// Validate validates this measurement family units unit code convert from standard items0
func (m *MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var measurementFamilyUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mul","div","add","sub"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementFamilyUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum = append(measurementFamilyUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum, v)
	}
}

const (

	// MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorMul captures enum value "mul"
	MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorMul string = "mul"

	// MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorDiv captures enum value "div"
	MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorDiv string = "div"

	// MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorAdd captures enum value "add"
	MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorAdd string = "add"

	// MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorSub captures enum value "sub"
	MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0OperatorSub string = "sub"
)

// prop value enum
func (m *MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, measurementFamilyUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyUnitsUnitCodeConvertFromStandardItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyUnitsUnitCodeLabels Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
//
// swagger:model MeasurementFamilyUnitsUnitCodeLabels
type MeasurementFamilyUnitsUnitCodeLabels struct {

	// Unit label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this measurement family units unit code labels
func (m *MeasurementFamilyUnitsUnitCodeLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyUnitsUnitCodeLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyUnitsUnitCodeLabels) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyUnitsUnitCodeLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

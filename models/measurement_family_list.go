// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MeasurementFamilyList measurement family list
//
// swagger:model MeasurementFamilyList
type MeasurementFamilyList struct {

	// Measurement family code
	// Required: true
	Code *string `json:"code"`

	// labels
	Labels *MeasurementFamilyListLabels `json:"labels,omitempty"`

	// Unit code used as the standard unit for this measurement family
	// Required: true
	StandardUnitCode *string `json:"standard_unit_code"`

	// units
	// Required: true
	Units *MeasurementFamilyListUnits `json:"units"`
}

// Validate validates this measurement family list
func (m *MeasurementFamilyList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardUnitCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeasurementFamilyList) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *MeasurementFamilyList) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *MeasurementFamilyList) validateStandardUnitCode(formats strfmt.Registry) error {

	if err := validate.Required("standard_unit_code", "body", m.StandardUnitCode); err != nil {
		return err
	}

	return nil
}

func (m *MeasurementFamilyList) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("units", "body", m.Units); err != nil {
		return err
	}

	if m.Units != nil {
		if err := m.Units.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("units")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyList) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyListLabels Measurement family labels for each locale
//
// swagger:model MeasurementFamilyListLabels
type MeasurementFamilyListLabels struct {

	// Measurement family label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this measurement family list labels
func (m *MeasurementFamilyListLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyListLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyListLabels) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyListLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyListUnits Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
//
// swagger:model MeasurementFamilyListUnits
type MeasurementFamilyListUnits struct {

	// unit code
	UnitCode *MeasurementFamilyListUnitsUnitCode `json:"unitCode,omitempty"`
}

// Validate validates this measurement family list units
func (m *MeasurementFamilyListUnits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnitCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeasurementFamilyListUnits) validateUnitCode(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitCode) { // not required
		return nil
	}

	if m.UnitCode != nil {
		if err := m.UnitCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("units" + "." + "unitCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyListUnits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyListUnits) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyListUnits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyListUnitsUnitCode measurement family list units unit code
//
// swagger:model MeasurementFamilyListUnitsUnitCode
type MeasurementFamilyListUnitsUnitCode struct {

	// Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
	Code string `json:"code,omitempty"`

	// Calculation to convert the unit into the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
	ConvertFromStandard []*MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0 `json:"convert_from_standard"`

	// labels
	Labels *MeasurementFamilyListUnitsUnitCodeLabels `json:"labels,omitempty"`

	// Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
	Symbol string `json:"symbol,omitempty"`
}

// Validate validates this measurement family list units unit code
func (m *MeasurementFamilyListUnitsUnitCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConvertFromStandard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeasurementFamilyListUnitsUnitCode) validateConvertFromStandard(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvertFromStandard) { // not required
		return nil
	}

	for i := 0; i < len(m.ConvertFromStandard); i++ {
		if swag.IsZero(m.ConvertFromStandard[i]) { // not required
			continue
		}

		if m.ConvertFromStandard[i] != nil {
			if err := m.ConvertFromStandard[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("units" + "." + "unitCode" + "." + "convert_from_standard" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeasurementFamilyListUnitsUnitCode) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("units" + "." + "unitCode" + "." + "labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyListUnitsUnitCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyListUnitsUnitCode) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyListUnitsUnitCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0 measurement family list units unit code convert from standard items0
//
// swagger:model MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0
type MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0 struct {

	// Operator for a conversion operation to convert the unit in the standard unit
	// Enum: [mul div add sub]
	Operator string `json:"operator,omitempty"`

	// Value for a conversion operation to convert the unit in the standard unit
	Value string `json:"value,omitempty"`
}

// Validate validates this measurement family list units unit code convert from standard items0
func (m *MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var measurementFamilyListUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mul","div","add","sub"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementFamilyListUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum = append(measurementFamilyListUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum, v)
	}
}

const (

	// MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorMul captures enum value "mul"
	MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorMul string = "mul"

	// MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorDiv captures enum value "div"
	MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorDiv string = "div"

	// MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorAdd captures enum value "add"
	MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorAdd string = "add"

	// MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorSub captures enum value "sub"
	MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0OperatorSub string = "sub"
)

// prop value enum
func (m *MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, measurementFamilyListUnitsUnitCodeConvertFromStandardItems0TypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyListUnitsUnitCodeConvertFromStandardItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MeasurementFamilyListUnitsUnitCodeLabels Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
//
// swagger:model MeasurementFamilyListUnitsUnitCodeLabels
type MeasurementFamilyListUnitsUnitCodeLabels struct {

	// Unit label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this measurement family list units unit code labels
func (m *MeasurementFamilyListUnitsUnitCodeLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MeasurementFamilyListUnitsUnitCodeLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeasurementFamilyListUnitsUnitCodeLabels) UnmarshalBinary(b []byte) error {
	var res MeasurementFamilyListUnitsUnitCodeLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

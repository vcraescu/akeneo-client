// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MediaFile media file
//
// swagger:model MediaFile
type MediaFile struct {

	// links
	Links *MediaFileAO0Links `json:"_links,omitempty"`

	// Media file code
	Code string `json:"code,omitempty"`

	// Extension of the media file
	Extension string `json:"extension,omitempty"`

	// Mime type of the media file
	MimeType string `json:"mime_type,omitempty"`

	// Original filename of the media file
	OriginalFilename string `json:"original_filename,omitempty"`

	// Size of the media file
	Size int64 `json:"size,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MediaFile) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Links *MediaFileAO0Links `json:"_links,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Links = dataAO0.Links

	// AO1
	var dataAO1 struct {
		Code string `json:"code,omitempty"`

		Extension string `json:"extension,omitempty"`

		MimeType string `json:"mime_type,omitempty"`

		OriginalFilename string `json:"original_filename,omitempty"`

		Size int64 `json:"size,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Code = dataAO1.Code

	m.Extension = dataAO1.Extension

	m.MimeType = dataAO1.MimeType

	m.OriginalFilename = dataAO1.OriginalFilename

	m.Size = dataAO1.Size

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MediaFile) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Links *MediaFileAO0Links `json:"_links,omitempty"`
	}

	dataAO0.Links = m.Links

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Code string `json:"code,omitempty"`

		Extension string `json:"extension,omitempty"`

		MimeType string `json:"mime_type,omitempty"`

		OriginalFilename string `json:"original_filename,omitempty"`

		Size int64 `json:"size,omitempty"`
	}

	dataAO1.Code = m.Code

	dataAO1.Extension = m.Extension

	dataAO1.MimeType = m.MimeType

	dataAO1.OriginalFilename = m.OriginalFilename

	dataAO1.Size = m.Size

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this media file
func (m *MediaFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaFile) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaFile) UnmarshalBinary(b []byte) error {
	var res MediaFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaFileAO0Links media file a o0 links
//
// swagger:model MediaFileAO0Links
type MediaFileAO0Links struct {

	// download
	Download *MediaFileAO0LinksDownload `json:"download,omitempty"`
}

// Validate validates this media file a o0 links
func (m *MediaFileAO0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MediaFileAO0Links) validateDownload(formats strfmt.Registry) error {

	if swag.IsZero(m.Download) { // not required
		return nil
	}

	if m.Download != nil {
		if err := m.Download.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "download")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MediaFileAO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaFileAO0Links) UnmarshalBinary(b []byte) error {
	var res MediaFileAO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MediaFileAO0LinksDownload media file a o0 links download
//
// swagger:model MediaFileAO0LinksDownload
type MediaFileAO0LinksDownload struct {

	// URI to download the binaries of the media file
	Href string `json:"href,omitempty"`
}

// Validate validates this media file a o0 links download
func (m *MediaFileAO0LinksDownload) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MediaFileAO0LinksDownload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MediaFileAO0LinksDownload) UnmarshalBinary(b []byte) error {
	var res MediaFileAO0LinksDownload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

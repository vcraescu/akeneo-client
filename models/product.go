// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product product
//
// swagger:model Product
type Product struct {

	// associations
	Associations *ProductAssociations `json:"associations,omitempty"`

	// Codes of the categories in which the product is classified
	Categories []string `json:"categories"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Whether the product is enable
	Enabled *bool `json:"enabled,omitempty"`

	// Family code from which the product inherits its attributes and attributes requirements
	Family *string `json:"family,omitempty"`

	// Codes of the groups to which the product belong
	Groups []string `json:"groups"`

	// Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
	// Required: true
	Identifier *string `json:"identifier"`

	// metadata
	Metadata *ProductMetadata `json:"metadata,omitempty"`

	// Code of the parent product model when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
	Parent *string `json:"parent,omitempty"`

	// Product quality scores for each channel/locale combination (only available in Serenity and when the "with_quality_scores" query parameter is set to "true")
	QualityScores interface{} `json:"quality_scores,omitempty"`

	// quantified associations
	QuantifiedAssociations *ProductQuantifiedAssociations `json:"quantified_associations,omitempty"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *ProductValues `json:"values,omitempty"`
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantifiedAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	if m.Associations != nil {
		if err := m.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations")
			}
			return err
		}
	}

	return nil
}

func (m *Product) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Product) validateQuantifiedAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociations) { // not required
		return nil
	}

	if m.QuantifiedAssociations != nil {
		if err := m.QuantifiedAssociations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations")
			}
			return err
		}
	}

	return nil
}

func (m *Product) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductAssociations Several associations related to groups, product models and/or other products, grouped by association types
//
// swagger:model ProductAssociations
type ProductAssociations struct {

	// association type code
	AssociationTypeCode *ProductAssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this product associations
func (m *ProductAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductAssociations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationTypeCode) { // not required
		return nil
	}

	if m.AssociationTypeCode != nil {
		if err := m.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductAssociations) UnmarshalBinary(b []byte) error {
	var res ProductAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductAssociationsAssociationTypeCode product associations association type code
//
// swagger:model ProductAssociationsAssociationTypeCode
type ProductAssociationsAssociationTypeCode struct {

	// Array of groups codes with which the product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of product identifiers with which the product is in relation
	Products []string `json:"products"`
}

// Validate validates this product associations association type code
func (m *ProductAssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductAssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductAssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductAssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductMetadata More information around the product (only available since the v2.0 in the Enterprise Edition)
//
// swagger:model ProductMetadata
type ProductMetadata struct {

	// Status of the product regarding the user permissions (only available since the v2.0 in the Enterprise Edition)
	// Enum: [read_only draft_in_progress proposal_waiting_for_approval working_copy]
	WorkflowStatus string `json:"workflow_status,omitempty"`
}

// Validate validates this product metadata
func (m *ProductMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productMetadataTypeWorkflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only","draft_in_progress","proposal_waiting_for_approval","working_copy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productMetadataTypeWorkflowStatusPropEnum = append(productMetadataTypeWorkflowStatusPropEnum, v)
	}
}

const (

	// ProductMetadataWorkflowStatusReadOnly captures enum value "read_only"
	ProductMetadataWorkflowStatusReadOnly string = "read_only"

	// ProductMetadataWorkflowStatusDraftInProgress captures enum value "draft_in_progress"
	ProductMetadataWorkflowStatusDraftInProgress string = "draft_in_progress"

	// ProductMetadataWorkflowStatusProposalWaitingForApproval captures enum value "proposal_waiting_for_approval"
	ProductMetadataWorkflowStatusProposalWaitingForApproval string = "proposal_waiting_for_approval"

	// ProductMetadataWorkflowStatusWorkingCopy captures enum value "working_copy"
	ProductMetadataWorkflowStatusWorkingCopy string = "working_copy"
)

// prop value enum
func (m *ProductMetadata) validateWorkflowStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productMetadataTypeWorkflowStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductMetadata) validateWorkflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkflowStatusEnum("metadata"+"."+"workflow_status", "body", m.WorkflowStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductMetadata) UnmarshalBinary(b []byte) error {
	var res ProductMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductQuantifiedAssociations Several quantified associations related to products and/or product models, grouped by quantified association types (only available in Serenity)
//
// swagger:model ProductQuantifiedAssociations
type ProductQuantifiedAssociations struct {

	// quantified association type code
	QuantifiedAssociationTypeCode *ProductQuantifiedAssociationsQuantifiedAssociationTypeCode `json:"quantifiedAssociationTypeCode,omitempty"`
}

// Validate validates this product quantified associations
func (m *ProductQuantifiedAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantifiedAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductQuantifiedAssociations) validateQuantifiedAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociationTypeCode) { // not required
		return nil
	}

	if m.QuantifiedAssociationTypeCode != nil {
		if err := m.QuantifiedAssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductQuantifiedAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductQuantifiedAssociations) UnmarshalBinary(b []byte) error {
	var res ProductQuantifiedAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductQuantifiedAssociationsQuantifiedAssociationTypeCode product quantified associations quantified association type code
//
// swagger:model ProductQuantifiedAssociationsQuantifiedAssociationTypeCode
type ProductQuantifiedAssociationsQuantifiedAssociationTypeCode struct {

	// Array of objects containing product model codes and quantities with which the product is in relation
	ProductModels []*ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 `json:"product_models"`

	// Array of objects containing product identifiers and quantities with which the product is in relation
	Products []*ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 `json:"products"`
}

// Validate validates this product quantified associations quantified association type code
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProductModels(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductModels) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductModels); i++ {
		if swag.IsZero(m.ProductModels[i]) { // not required
			continue
		}

		if m.ProductModels[i] != nil {
			if err := m.ProductModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "product_models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductQuantifiedAssociationsQuantifiedAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 product quantified associations quantified association type code product models items0
//
// swagger:model ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
type ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product quantified associations quantified association type code product models items0
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) UnmarshalBinary(b []byte) error {
	var res ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 product quantified associations quantified association type code products items0
//
// swagger:model ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
type ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 struct {

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product quantified associations quantified association type code products items0
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) UnmarshalBinary(b []byte) error {
	var res ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductValues Product attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
//
// swagger:model ProductValues
type ProductValues struct {

	// attribute code
	AttributeCode []*ProductValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this product values
func (m *ProductValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductValues) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeCode); i++ {
		if swag.IsZero(m.AttributeCode[i]) { // not required
			continue
		}

		if m.AttributeCode[i] != nil {
			if err := m.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductValues) UnmarshalBinary(b []byte) error {
	var res ProductValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductValuesAttributeCodeItems0 product values attribute code items0
//
// swagger:model ProductValuesAttributeCodeItems0
type ProductValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// linked data
	LinkedData *ProductValuesAttributeCodeItems0LinkedData `json:"linked_data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this product values attribute code items0
func (m *ProductValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinkedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductValuesAttributeCodeItems0) validateLinkedData(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkedData) { // not required
		return nil
	}

	if m.LinkedData != nil {
		if err := m.LinkedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linked_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res ProductValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductValuesAttributeCodeItems0LinkedData Object containing labels of attribute options (only available in Serenity and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
//
// swagger:model ProductValuesAttributeCodeItems0LinkedData
type ProductValuesAttributeCodeItems0LinkedData struct {

	// attribute
	Attribute string `json:"attribute,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// labels
	Labels interface{} `json:"labels,omitempty"`
}

// Validate validates this product values attribute code items0 linked data
func (m *ProductValuesAttributeCodeItems0LinkedData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductValuesAttributeCodeItems0LinkedData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductValuesAttributeCodeItems0LinkedData) UnmarshalBinary(b []byte) error {
	var res ProductValuesAttributeCodeItems0LinkedData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

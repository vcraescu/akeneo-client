// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductList product list
//
// swagger:model ProductList
type ProductList struct {

	// links
	Links *ProductListAO0Links `json:"_links,omitempty"`

	// associations
	Associations *ProductListAO1Associations `json:"associations,omitempty"`

	// Codes of the categories in which the product is classified
	Categories []string `json:"categories"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Whether the product is enable
	Enabled *bool `json:"enabled,omitempty"`

	// Family code from which the product inherits its attributes and attributes requirements
	Family *string `json:"family,omitempty"`

	// Codes of the groups to which the product belong
	Groups []string `json:"groups"`

	// Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
	// Required: true
	Identifier *string `json:"identifier"`

	// metadata
	Metadata *ProductListAO1Metadata `json:"metadata,omitempty"`

	// Code of the parent product model when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
	Parent *string `json:"parent,omitempty"`

	// Product quality scores for each channel/locale combination (only available in Serenity and when the "with_quality_scores" query parameter is set to "true")
	QualityScores interface{} `json:"quality_scores,omitempty"`

	// quantified associations
	QuantifiedAssociations *ProductListAO1QuantifiedAssociations `json:"quantified_associations,omitempty"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *ProductListAO1Values `json:"values,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductList) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Links *ProductListAO0Links `json:"_links,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Links = dataAO0.Links

	// AO1
	var dataAO1 struct {
		Associations *ProductListAO1Associations `json:"associations,omitempty"`

		Categories []string `json:"categories"`

		Created string `json:"created,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		Family *string `json:"family,omitempty"`

		Groups []string `json:"groups"`

		Identifier *string `json:"identifier"`

		Metadata *ProductListAO1Metadata `json:"metadata,omitempty"`

		Parent *string `json:"parent,omitempty"`

		QualityScores interface{} `json:"quality_scores,omitempty"`

		QuantifiedAssociations *ProductListAO1QuantifiedAssociations `json:"quantified_associations,omitempty"`

		Updated string `json:"updated,omitempty"`

		Values *ProductListAO1Values `json:"values,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Associations = dataAO1.Associations

	m.Categories = dataAO1.Categories

	m.Created = dataAO1.Created

	m.Enabled = dataAO1.Enabled

	m.Family = dataAO1.Family

	m.Groups = dataAO1.Groups

	m.Identifier = dataAO1.Identifier

	m.Metadata = dataAO1.Metadata

	m.Parent = dataAO1.Parent

	m.QualityScores = dataAO1.QualityScores

	m.QuantifiedAssociations = dataAO1.QuantifiedAssociations

	m.Updated = dataAO1.Updated

	m.Values = dataAO1.Values

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Links *ProductListAO0Links `json:"_links,omitempty"`
	}

	dataAO0.Links = m.Links

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Associations *ProductListAO1Associations `json:"associations,omitempty"`

		Categories []string `json:"categories"`

		Created string `json:"created,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		Family *string `json:"family,omitempty"`

		Groups []string `json:"groups"`

		Identifier *string `json:"identifier"`

		Metadata *ProductListAO1Metadata `json:"metadata,omitempty"`

		Parent *string `json:"parent,omitempty"`

		QualityScores interface{} `json:"quality_scores,omitempty"`

		QuantifiedAssociations *ProductListAO1QuantifiedAssociations `json:"quantified_associations,omitempty"`

		Updated string `json:"updated,omitempty"`

		Values *ProductListAO1Values `json:"values,omitempty"`
	}

	dataAO1.Associations = m.Associations

	dataAO1.Categories = m.Categories

	dataAO1.Created = m.Created

	dataAO1.Enabled = m.Enabled

	dataAO1.Family = m.Family

	dataAO1.Groups = m.Groups

	dataAO1.Identifier = m.Identifier

	dataAO1.Metadata = m.Metadata

	dataAO1.Parent = m.Parent

	dataAO1.QualityScores = m.QualityScores

	dataAO1.QuantifiedAssociations = m.QuantifiedAssociations

	dataAO1.Updated = m.Updated

	dataAO1.Values = m.Values

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product list
func (m *ProductList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantifiedAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductList) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ProductList) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	if m.Associations != nil {
		if err := m.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations")
			}
			return err
		}
	}

	return nil
}

func (m *ProductList) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *ProductList) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ProductList) validateQuantifiedAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociations) { // not required
		return nil
	}

	if m.QuantifiedAssociations != nil {
		if err := m.QuantifiedAssociations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations")
			}
			return err
		}
	}

	return nil
}

func (m *ProductList) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductList) UnmarshalBinary(b []byte) error {
	var res ProductList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO0Links product list a o0 links
//
// swagger:model ProductListAO0Links
type ProductListAO0Links struct {

	// self
	Self *ProductListAO0LinksSelf `json:"self,omitempty"`
}

// Validate validates this product list a o0 links
func (m *ProductListAO0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductListAO0Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO0Links) UnmarshalBinary(b []byte) error {
	var res ProductListAO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO0LinksSelf product list a o0 links self
//
// swagger:model ProductListAO0LinksSelf
type ProductListAO0LinksSelf struct {

	// URI of the resource
	Href string `json:"href,omitempty"`
}

// Validate validates this product list a o0 links self
func (m *ProductListAO0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO0LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO0LinksSelf) UnmarshalBinary(b []byte) error {
	var res ProductListAO0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1Associations Several associations related to groups, product models and/or other products, grouped by association types
//
// swagger:model ProductListAO1Associations
type ProductListAO1Associations struct {

	// association type code
	AssociationTypeCode *ProductListAO1AssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this product list a o1 associations
func (m *ProductListAO1Associations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductListAO1Associations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationTypeCode) { // not required
		return nil
	}

	if m.AssociationTypeCode != nil {
		if err := m.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1Associations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1Associations) UnmarshalBinary(b []byte) error {
	var res ProductListAO1Associations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1AssociationsAssociationTypeCode product list a o1 associations association type code
//
// swagger:model ProductListAO1AssociationsAssociationTypeCode
type ProductListAO1AssociationsAssociationTypeCode struct {

	// Array of groups codes with which the product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of product identifiers with which the product is in relation
	Products []string `json:"products"`
}

// Validate validates this product list a o1 associations association type code
func (m *ProductListAO1AssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1AssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1AssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductListAO1AssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1Metadata More information around the product (only available since the v2.0 in the Enterprise Edition)
//
// swagger:model ProductListAO1Metadata
type ProductListAO1Metadata struct {

	// Status of the product regarding the user permissions (only available since the v2.0 in the Enterprise Edition)
	// Enum: [read_only draft_in_progress proposal_waiting_for_approval working_copy]
	WorkflowStatus string `json:"workflow_status,omitempty"`
}

// Validate validates this product list a o1 metadata
func (m *ProductListAO1Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productListAO1MetadataTypeWorkflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only","draft_in_progress","proposal_waiting_for_approval","working_copy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productListAO1MetadataTypeWorkflowStatusPropEnum = append(productListAO1MetadataTypeWorkflowStatusPropEnum, v)
	}
}

const (

	// ProductListAO1MetadataWorkflowStatusReadOnly captures enum value "read_only"
	ProductListAO1MetadataWorkflowStatusReadOnly string = "read_only"

	// ProductListAO1MetadataWorkflowStatusDraftInProgress captures enum value "draft_in_progress"
	ProductListAO1MetadataWorkflowStatusDraftInProgress string = "draft_in_progress"

	// ProductListAO1MetadataWorkflowStatusProposalWaitingForApproval captures enum value "proposal_waiting_for_approval"
	ProductListAO1MetadataWorkflowStatusProposalWaitingForApproval string = "proposal_waiting_for_approval"

	// ProductListAO1MetadataWorkflowStatusWorkingCopy captures enum value "working_copy"
	ProductListAO1MetadataWorkflowStatusWorkingCopy string = "working_copy"
)

// prop value enum
func (m *ProductListAO1Metadata) validateWorkflowStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productListAO1MetadataTypeWorkflowStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductListAO1Metadata) validateWorkflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkflowStatusEnum("metadata"+"."+"workflow_status", "body", m.WorkflowStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1Metadata) UnmarshalBinary(b []byte) error {
	var res ProductListAO1Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1QuantifiedAssociations Several quantified associations related to products and/or product models, grouped by quantified association types (only available in Serenity)
//
// swagger:model ProductListAO1QuantifiedAssociations
type ProductListAO1QuantifiedAssociations struct {

	// quantified association type code
	QuantifiedAssociationTypeCode *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode `json:"quantifiedAssociationTypeCode,omitempty"`
}

// Validate validates this product list a o1 quantified associations
func (m *ProductListAO1QuantifiedAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantifiedAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductListAO1QuantifiedAssociations) validateQuantifiedAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociationTypeCode) { // not required
		return nil
	}

	if m.QuantifiedAssociationTypeCode != nil {
		if err := m.QuantifiedAssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociations) UnmarshalBinary(b []byte) error {
	var res ProductListAO1QuantifiedAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode product list a o1 quantified associations quantified association type code
//
// swagger:model ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode
type ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode struct {

	// Array of objects containing product model codes and quantities with which the product is in relation
	ProductModels []*ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 `json:"product_models"`

	// Array of objects containing product identifiers and quantities with which the product is in relation
	Products []*ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 `json:"products"`
}

// Validate validates this product list a o1 quantified associations quantified association type code
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) validateProductModels(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductModels) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductModels); i++ {
		if swag.IsZero(m.ProductModels[i]) { // not required
			continue
		}

		if m.ProductModels[i] != nil {
			if err := m.ProductModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "product_models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 product list a o1 quantified associations quantified association type code product models items0
//
// swagger:model ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
type ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product list a o1 quantified associations quantified association type code product models items0
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) UnmarshalBinary(b []byte) error {
	var res ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 product list a o1 quantified associations quantified association type code products items0
//
// swagger:model ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
type ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 struct {

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product list a o1 quantified associations quantified association type code products items0
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) UnmarshalBinary(b []byte) error {
	var res ProductListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1Values Product attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
//
// swagger:model ProductListAO1Values
type ProductListAO1Values struct {

	// attribute code
	AttributeCode []*ProductListAO1ValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this product list a o1 values
func (m *ProductListAO1Values) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductListAO1Values) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeCode); i++ {
		if swag.IsZero(m.AttributeCode[i]) { // not required
			continue
		}

		if m.AttributeCode[i] != nil {
			if err := m.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1Values) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1Values) UnmarshalBinary(b []byte) error {
	var res ProductListAO1Values
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1ValuesAttributeCodeItems0 product list a o1 values attribute code items0
//
// swagger:model ProductListAO1ValuesAttributeCodeItems0
type ProductListAO1ValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// linked data
	LinkedData *ProductListAO1ValuesAttributeCodeItems0LinkedData `json:"linked_data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this product list a o1 values attribute code items0
func (m *ProductListAO1ValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinkedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductListAO1ValuesAttributeCodeItems0) validateLinkedData(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkedData) { // not required
		return nil
	}

	if m.LinkedData != nil {
		if err := m.LinkedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linked_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1ValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1ValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res ProductListAO1ValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductListAO1ValuesAttributeCodeItems0LinkedData Object containing labels of attribute options (only available in Serenity and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
//
// swagger:model ProductListAO1ValuesAttributeCodeItems0LinkedData
type ProductListAO1ValuesAttributeCodeItems0LinkedData struct {

	// attribute
	Attribute string `json:"attribute,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// labels
	Labels interface{} `json:"labels,omitempty"`
}

// Validate validates this product list a o1 values attribute code items0 linked data
func (m *ProductListAO1ValuesAttributeCodeItems0LinkedData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductListAO1ValuesAttributeCodeItems0LinkedData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductListAO1ValuesAttributeCodeItems0LinkedData) UnmarshalBinary(b []byte) error {
	var res ProductListAO1ValuesAttributeCodeItems0LinkedData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

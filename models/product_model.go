// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductModel product model
//
// swagger:model ProductModel
type ProductModel struct {

	// associations
	Associations *ProductModelAssociations `json:"associations,omitempty"`

	// Codes of the categories in which the product model is categorized
	Categories []string `json:"categories"`

	// Product model code
	// Required: true
	Code *string `json:"code"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Family code  from which the product inherits its attributes and attributes requirements (since the 3.2)
	Family string `json:"family,omitempty"`

	// Family variant code from which the product model inherits its attributes and variant attributes
	// Required: true
	FamilyVariant *string `json:"family_variant"`

	// metadata
	Metadata *ProductModelMetadata `json:"metadata,omitempty"`

	// Code of the parent product model. This parent can be modified since the 2.3.
	Parent *string `json:"parent,omitempty"`

	// quantified associations
	QuantifiedAssociations *ProductModelQuantifiedAssociations `json:"quantified_associations,omitempty"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *ProductModelValues `json:"values,omitempty"`
}

// Validate validates this product model
func (m *ProductModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyVariant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantifiedAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModel) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	if m.Associations != nil {
		if err := m.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModel) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ProductModel) validateFamilyVariant(formats strfmt.Registry) error {

	if err := validate.Required("family_variant", "body", m.FamilyVariant); err != nil {
		return err
	}

	return nil
}

func (m *ProductModel) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModel) validateQuantifiedAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociations) { // not required
		return nil
	}

	if m.QuantifiedAssociations != nil {
		if err := m.QuantifiedAssociations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModel) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModel) UnmarshalBinary(b []byte) error {
	var res ProductModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelAssociations Several associations related to groups, product and/or other product models, grouped by association types
//
// swagger:model ProductModelAssociations
type ProductModelAssociations struct {

	// association type code
	AssociationTypeCode *ProductModelAssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this product model associations
func (m *ProductModelAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelAssociations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationTypeCode) { // not required
		return nil
	}

	if m.AssociationTypeCode != nil {
		if err := m.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelAssociations) UnmarshalBinary(b []byte) error {
	var res ProductModelAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelAssociationsAssociationTypeCode product model associations association type code
//
// swagger:model ProductModelAssociationsAssociationTypeCode
type ProductModelAssociationsAssociationTypeCode struct {

	// Array of groups codes with which the product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of product identifiers with which the product is in relation
	Products []string `json:"products"`
}

// Validate validates this product model associations association type code
func (m *ProductModelAssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelAssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelAssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductModelAssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelMetadata More information around the product model (only available since the v2.3 in the Enterprise Edition)
//
// swagger:model ProductModelMetadata
type ProductModelMetadata struct {

	// Status of the product model regarding the user permissions (only available since the v2.3 in the Enterprise Edition)
	// Enum: [read_only draft_in_progress proposal_waiting_for_approval working_copy]
	WorkflowStatus string `json:"workflow_status,omitempty"`
}

// Validate validates this product model metadata
func (m *ProductModelMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productModelMetadataTypeWorkflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only","draft_in_progress","proposal_waiting_for_approval","working_copy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productModelMetadataTypeWorkflowStatusPropEnum = append(productModelMetadataTypeWorkflowStatusPropEnum, v)
	}
}

const (

	// ProductModelMetadataWorkflowStatusReadOnly captures enum value "read_only"
	ProductModelMetadataWorkflowStatusReadOnly string = "read_only"

	// ProductModelMetadataWorkflowStatusDraftInProgress captures enum value "draft_in_progress"
	ProductModelMetadataWorkflowStatusDraftInProgress string = "draft_in_progress"

	// ProductModelMetadataWorkflowStatusProposalWaitingForApproval captures enum value "proposal_waiting_for_approval"
	ProductModelMetadataWorkflowStatusProposalWaitingForApproval string = "proposal_waiting_for_approval"

	// ProductModelMetadataWorkflowStatusWorkingCopy captures enum value "working_copy"
	ProductModelMetadataWorkflowStatusWorkingCopy string = "working_copy"
)

// prop value enum
func (m *ProductModelMetadata) validateWorkflowStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productModelMetadataTypeWorkflowStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductModelMetadata) validateWorkflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkflowStatusEnum("metadata"+"."+"workflow_status", "body", m.WorkflowStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelMetadata) UnmarshalBinary(b []byte) error {
	var res ProductModelMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelQuantifiedAssociations Several quantified associations related to products and/or product models, grouped by quantified association types (only available in Serenity)
//
// swagger:model ProductModelQuantifiedAssociations
type ProductModelQuantifiedAssociations struct {

	// quantified association type code
	QuantifiedAssociationTypeCode *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode `json:"quantifiedAssociationTypeCode,omitempty"`
}

// Validate validates this product model quantified associations
func (m *ProductModelQuantifiedAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantifiedAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelQuantifiedAssociations) validateQuantifiedAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociationTypeCode) { // not required
		return nil
	}

	if m.QuantifiedAssociationTypeCode != nil {
		if err := m.QuantifiedAssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociations) UnmarshalBinary(b []byte) error {
	var res ProductModelQuantifiedAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode product model quantified associations quantified association type code
//
// swagger:model ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode
type ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode struct {

	// Array of objects containing product model codes and quantities with which the product model is in relation
	ProductModels []*ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 `json:"product_models"`

	// Array of objects containing product identifiers and quantities with which the product model is in relation
	Products []*ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 `json:"products"`
}

// Validate validates this product model quantified associations quantified association type code
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProductModels(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductModels) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductModels); i++ {
		if swag.IsZero(m.ProductModels[i]) { // not required
			continue
		}

		if m.ProductModels[i] != nil {
			if err := m.ProductModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "product_models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 product model quantified associations quantified association type code product models items0
//
// swagger:model ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
type ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product model quantified associations quantified association type code product models items0
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) UnmarshalBinary(b []byte) error {
	var res ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 product model quantified associations quantified association type code products items0
//
// swagger:model ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
type ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 struct {

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product model quantified associations quantified association type code products items0
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) UnmarshalBinary(b []byte) error {
	var res ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelValues Product model attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
//
// swagger:model ProductModelValues
type ProductModelValues struct {

	// attribute code
	AttributeCode []*ProductModelValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this product model values
func (m *ProductModelValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelValues) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeCode); i++ {
		if swag.IsZero(m.AttributeCode[i]) { // not required
			continue
		}

		if m.AttributeCode[i] != nil {
			if err := m.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelValues) UnmarshalBinary(b []byte) error {
	var res ProductModelValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelValuesAttributeCodeItems0 product model values attribute code items0
//
// swagger:model ProductModelValuesAttributeCodeItems0
type ProductModelValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this product model values attribute code items0
func (m *ProductModelValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res ProductModelValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

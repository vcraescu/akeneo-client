// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductModelList product model list
//
// swagger:model ProductModelList
type ProductModelList struct {

	// links
	Links *ProductModelListAO0Links `json:"_links,omitempty"`

	// associations
	Associations *ProductModelListAO1Associations `json:"associations,omitempty"`

	// Codes of the categories in which the product model is categorized
	Categories []string `json:"categories"`

	// Product model code
	// Required: true
	Code *string `json:"code"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Family code  from which the product inherits its attributes and attributes requirements (since the 3.2)
	Family string `json:"family,omitempty"`

	// Family variant code from which the product model inherits its attributes and variant attributes
	// Required: true
	FamilyVariant *string `json:"family_variant"`

	// metadata
	Metadata *ProductModelListAO1Metadata `json:"metadata,omitempty"`

	// Code of the parent product model. This parent can be modified since the 2.3.
	Parent *string `json:"parent,omitempty"`

	// quantified associations
	QuantifiedAssociations *ProductModelListAO1QuantifiedAssociations `json:"quantified_associations,omitempty"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *ProductModelListAO1Values `json:"values,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductModelList) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Links *ProductModelListAO0Links `json:"_links,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Links = dataAO0.Links

	// AO1
	var dataAO1 struct {
		Associations *ProductModelListAO1Associations `json:"associations,omitempty"`

		Categories []string `json:"categories"`

		Code *string `json:"code"`

		Created string `json:"created,omitempty"`

		Family string `json:"family,omitempty"`

		FamilyVariant *string `json:"family_variant"`

		Metadata *ProductModelListAO1Metadata `json:"metadata,omitempty"`

		Parent *string `json:"parent,omitempty"`

		QuantifiedAssociations *ProductModelListAO1QuantifiedAssociations `json:"quantified_associations,omitempty"`

		Updated string `json:"updated,omitempty"`

		Values *ProductModelListAO1Values `json:"values,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Associations = dataAO1.Associations

	m.Categories = dataAO1.Categories

	m.Code = dataAO1.Code

	m.Created = dataAO1.Created

	m.Family = dataAO1.Family

	m.FamilyVariant = dataAO1.FamilyVariant

	m.Metadata = dataAO1.Metadata

	m.Parent = dataAO1.Parent

	m.QuantifiedAssociations = dataAO1.QuantifiedAssociations

	m.Updated = dataAO1.Updated

	m.Values = dataAO1.Values

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductModelList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Links *ProductModelListAO0Links `json:"_links,omitempty"`
	}

	dataAO0.Links = m.Links

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Associations *ProductModelListAO1Associations `json:"associations,omitempty"`

		Categories []string `json:"categories"`

		Code *string `json:"code"`

		Created string `json:"created,omitempty"`

		Family string `json:"family,omitempty"`

		FamilyVariant *string `json:"family_variant"`

		Metadata *ProductModelListAO1Metadata `json:"metadata,omitempty"`

		Parent *string `json:"parent,omitempty"`

		QuantifiedAssociations *ProductModelListAO1QuantifiedAssociations `json:"quantified_associations,omitempty"`

		Updated string `json:"updated,omitempty"`

		Values *ProductModelListAO1Values `json:"values,omitempty"`
	}

	dataAO1.Associations = m.Associations

	dataAO1.Categories = m.Categories

	dataAO1.Code = m.Code

	dataAO1.Created = m.Created

	dataAO1.Family = m.Family

	dataAO1.FamilyVariant = m.FamilyVariant

	dataAO1.Metadata = m.Metadata

	dataAO1.Parent = m.Parent

	dataAO1.QuantifiedAssociations = m.QuantifiedAssociations

	dataAO1.Updated = m.Updated

	dataAO1.Values = m.Values

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product model list
func (m *ProductModelList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyVariant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantifiedAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelList) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModelList) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	if m.Associations != nil {
		if err := m.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModelList) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ProductModelList) validateFamilyVariant(formats strfmt.Registry) error {

	if err := validate.Required("family_variant", "body", m.FamilyVariant); err != nil {
		return err
	}

	return nil
}

func (m *ProductModelList) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModelList) validateQuantifiedAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociations) { // not required
		return nil
	}

	if m.QuantifiedAssociations != nil {
		if err := m.QuantifiedAssociations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations")
			}
			return err
		}
	}

	return nil
}

func (m *ProductModelList) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelList) UnmarshalBinary(b []byte) error {
	var res ProductModelList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO0Links product model list a o0 links
//
// swagger:model ProductModelListAO0Links
type ProductModelListAO0Links struct {

	// self
	Self *ProductModelListAO0LinksSelf `json:"self,omitempty"`
}

// Validate validates this product model list a o0 links
func (m *ProductModelListAO0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelListAO0Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO0Links) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO0LinksSelf product model list a o0 links self
//
// swagger:model ProductModelListAO0LinksSelf
type ProductModelListAO0LinksSelf struct {

	// URI of the resource
	Href string `json:"href,omitempty"`
}

// Validate validates this product model list a o0 links self
func (m *ProductModelListAO0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO0LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO0LinksSelf) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1Associations Several associations related to groups, product and/or other product models, grouped by association types
//
// swagger:model ProductModelListAO1Associations
type ProductModelListAO1Associations struct {

	// association type code
	AssociationTypeCode *ProductModelListAO1AssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this product model list a o1 associations
func (m *ProductModelListAO1Associations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelListAO1Associations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationTypeCode) { // not required
		return nil
	}

	if m.AssociationTypeCode != nil {
		if err := m.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1Associations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1Associations) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1Associations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1AssociationsAssociationTypeCode product model list a o1 associations association type code
//
// swagger:model ProductModelListAO1AssociationsAssociationTypeCode
type ProductModelListAO1AssociationsAssociationTypeCode struct {

	// Array of groups codes with which the product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of product identifiers with which the product is in relation
	Products []string `json:"products"`
}

// Validate validates this product model list a o1 associations association type code
func (m *ProductModelListAO1AssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1AssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1AssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1AssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1Metadata More information around the product model (only available since the v2.3 in the Enterprise Edition)
//
// swagger:model ProductModelListAO1Metadata
type ProductModelListAO1Metadata struct {

	// Status of the product model regarding the user permissions (only available since the v2.3 in the Enterprise Edition)
	// Enum: [read_only draft_in_progress proposal_waiting_for_approval working_copy]
	WorkflowStatus string `json:"workflow_status,omitempty"`
}

// Validate validates this product model list a o1 metadata
func (m *ProductModelListAO1Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkflowStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productModelListAO1MetadataTypeWorkflowStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only","draft_in_progress","proposal_waiting_for_approval","working_copy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productModelListAO1MetadataTypeWorkflowStatusPropEnum = append(productModelListAO1MetadataTypeWorkflowStatusPropEnum, v)
	}
}

const (

	// ProductModelListAO1MetadataWorkflowStatusReadOnly captures enum value "read_only"
	ProductModelListAO1MetadataWorkflowStatusReadOnly string = "read_only"

	// ProductModelListAO1MetadataWorkflowStatusDraftInProgress captures enum value "draft_in_progress"
	ProductModelListAO1MetadataWorkflowStatusDraftInProgress string = "draft_in_progress"

	// ProductModelListAO1MetadataWorkflowStatusProposalWaitingForApproval captures enum value "proposal_waiting_for_approval"
	ProductModelListAO1MetadataWorkflowStatusProposalWaitingForApproval string = "proposal_waiting_for_approval"

	// ProductModelListAO1MetadataWorkflowStatusWorkingCopy captures enum value "working_copy"
	ProductModelListAO1MetadataWorkflowStatusWorkingCopy string = "working_copy"
)

// prop value enum
func (m *ProductModelListAO1Metadata) validateWorkflowStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productModelListAO1MetadataTypeWorkflowStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductModelListAO1Metadata) validateWorkflowStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkflowStatusEnum("metadata"+"."+"workflow_status", "body", m.WorkflowStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1Metadata) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1QuantifiedAssociations Several quantified associations related to products and/or product models, grouped by quantified association types (only available in Serenity)
//
// swagger:model ProductModelListAO1QuantifiedAssociations
type ProductModelListAO1QuantifiedAssociations struct {

	// quantified association type code
	QuantifiedAssociationTypeCode *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode `json:"quantifiedAssociationTypeCode,omitempty"`
}

// Validate validates this product model list a o1 quantified associations
func (m *ProductModelListAO1QuantifiedAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantifiedAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelListAO1QuantifiedAssociations) validateQuantifiedAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.QuantifiedAssociationTypeCode) { // not required
		return nil
	}

	if m.QuantifiedAssociationTypeCode != nil {
		if err := m.QuantifiedAssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociations) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1QuantifiedAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode product model list a o1 quantified associations quantified association type code
//
// swagger:model ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode
type ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode struct {

	// Array of objects containing product model codes and quantities with which the product model is in relation
	ProductModels []*ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 `json:"product_models"`

	// Array of objects containing product identifiers and quantities with which the product model is in relation
	Products []*ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 `json:"products"`
}

// Validate validates this product model list a o1 quantified associations quantified association type code
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) validateProductModels(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductModels) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductModels); i++ {
		if swag.IsZero(m.ProductModels[i]) { // not required
			continue
		}

		if m.ProductModels[i] != nil {
			if err := m.ProductModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "product_models" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quantified_associations" + "." + "quantifiedAssociationTypeCode" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 product model list a o1 quantified associations quantified association type code product models items0
//
// swagger:model ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
type ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product model list a o1 quantified associations quantified association type code product models items0
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 product model list a o1 quantified associations quantified association type code products items0
//
// swagger:model ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
type ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0 struct {

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// quantity
	Quantity int64 `json:"quantity,omitempty"`
}

// Validate validates this product model list a o1 quantified associations quantified association type code products items0
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1Values Product model attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
//
// swagger:model ProductModelListAO1Values
type ProductModelListAO1Values struct {

	// attribute code
	AttributeCode []*ProductModelListAO1ValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this product model list a o1 values
func (m *ProductModelListAO1Values) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductModelListAO1Values) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeCode); i++ {
		if swag.IsZero(m.AttributeCode[i]) { // not required
			continue
		}

		if m.AttributeCode[i] != nil {
			if err := m.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1Values) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1Values) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1Values
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductModelListAO1ValuesAttributeCodeItems0 product model list a o1 values attribute code items0
//
// swagger:model ProductModelListAO1ValuesAttributeCodeItems0
type ProductModelListAO1ValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this product model list a o1 values attribute code items0
func (m *ProductModelListAO1ValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductModelListAO1ValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductModelListAO1ValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res ProductModelListAO1ValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublishedProduct published product
//
// swagger:model PublishedProduct
type PublishedProduct struct {

	// associations
	Associations *PublishedProductAssociations `json:"associations,omitempty"`

	// Codes of the categories in which the published product is classified
	Categories []string `json:"categories"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Whether the published product is enable
	Enabled *bool `json:"enabled,omitempty"`

	// Family code from which the published product inherits its attributes and attributes requirements
	Family *string `json:"family,omitempty"`

	// Codes of the groups to which the published product belong
	Groups []string `json:"groups"`

	// Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
	// Required: true
	Identifier *string `json:"identifier"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *PublishedProductValues `json:"values,omitempty"`
}

// Validate validates this published product
func (m *PublishedProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProduct) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	if m.Associations != nil {
		if err := m.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations")
			}
			return err
		}
	}

	return nil
}

func (m *PublishedProduct) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *PublishedProduct) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProduct) UnmarshalBinary(b []byte) error {
	var res PublishedProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductAssociations Several associations related to groups and/or other published products, grouped by association types
//
// swagger:model PublishedProductAssociations
type PublishedProductAssociations struct {

	// association type code
	AssociationTypeCode *PublishedProductAssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this published product associations
func (m *PublishedProductAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProductAssociations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationTypeCode) { // not required
		return nil
	}

	if m.AssociationTypeCode != nil {
		if err := m.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductAssociations) UnmarshalBinary(b []byte) error {
	var res PublishedProductAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductAssociationsAssociationTypeCode published product associations association type code
//
// swagger:model PublishedProductAssociationsAssociationTypeCode
type PublishedProductAssociationsAssociationTypeCode struct {

	// Array of groups codes with which the published product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of published product identifiers with which the published product is in relation
	Products []string `json:"products"`
}

// Validate validates this published product associations association type code
func (m *PublishedProductAssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductAssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductAssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res PublishedProductAssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductValues Published product attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
//
// swagger:model PublishedProductValues
type PublishedProductValues struct {

	// attribute code
	AttributeCode []*PublishedProductValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this published product values
func (m *PublishedProductValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProductValues) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeCode); i++ {
		if swag.IsZero(m.AttributeCode[i]) { // not required
			continue
		}

		if m.AttributeCode[i] != nil {
			if err := m.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductValues) UnmarshalBinary(b []byte) error {
	var res PublishedProductValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductValuesAttributeCodeItems0 published product values attribute code items0
//
// swagger:model PublishedProductValuesAttributeCodeItems0
type PublishedProductValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this published product values attribute code items0
func (m *PublishedProductValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res PublishedProductValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

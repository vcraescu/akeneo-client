// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublishedProductList published product list
//
// swagger:model PublishedProductList
type PublishedProductList struct {

	// links
	Links *PublishedProductListAO0Links `json:"_links,omitempty"`

	// associations
	Associations *PublishedProductListAO1Associations `json:"associations,omitempty"`

	// Codes of the categories in which the published product is classified
	Categories []string `json:"categories"`

	// Date of creation
	Created string `json:"created,omitempty"`

	// Whether the published product is enable
	Enabled *bool `json:"enabled,omitempty"`

	// Family code from which the published product inherits its attributes and attributes requirements
	Family *string `json:"family,omitempty"`

	// Codes of the groups to which the published product belong
	Groups []string `json:"groups"`

	// Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
	// Required: true
	Identifier *string `json:"identifier"`

	// Date of the last update
	Updated string `json:"updated,omitempty"`

	// values
	Values *PublishedProductListAO1Values `json:"values,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PublishedProductList) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Links *PublishedProductListAO0Links `json:"_links,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Links = dataAO0.Links

	// AO1
	var dataAO1 struct {
		Associations *PublishedProductListAO1Associations `json:"associations,omitempty"`

		Categories []string `json:"categories"`

		Created string `json:"created,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		Family *string `json:"family,omitempty"`

		Groups []string `json:"groups"`

		Identifier *string `json:"identifier"`

		Updated string `json:"updated,omitempty"`

		Values *PublishedProductListAO1Values `json:"values,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Associations = dataAO1.Associations

	m.Categories = dataAO1.Categories

	m.Created = dataAO1.Created

	m.Enabled = dataAO1.Enabled

	m.Family = dataAO1.Family

	m.Groups = dataAO1.Groups

	m.Identifier = dataAO1.Identifier

	m.Updated = dataAO1.Updated

	m.Values = dataAO1.Values

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PublishedProductList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Links *PublishedProductListAO0Links `json:"_links,omitempty"`
	}

	dataAO0.Links = m.Links

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Associations *PublishedProductListAO1Associations `json:"associations,omitempty"`

		Categories []string `json:"categories"`

		Created string `json:"created,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		Family *string `json:"family,omitempty"`

		Groups []string `json:"groups"`

		Identifier *string `json:"identifier"`

		Updated string `json:"updated,omitempty"`

		Values *PublishedProductListAO1Values `json:"values,omitempty"`
	}

	dataAO1.Associations = m.Associations

	dataAO1.Categories = m.Categories

	dataAO1.Created = m.Created

	dataAO1.Enabled = m.Enabled

	dataAO1.Family = m.Family

	dataAO1.Groups = m.Groups

	dataAO1.Identifier = m.Identifier

	dataAO1.Updated = m.Updated

	dataAO1.Values = m.Values

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this published product list
func (m *PublishedProductList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProductList) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PublishedProductList) validateAssociations(formats strfmt.Registry) error {

	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	if m.Associations != nil {
		if err := m.Associations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations")
			}
			return err
		}
	}

	return nil
}

func (m *PublishedProductList) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *PublishedProductList) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductList) UnmarshalBinary(b []byte) error {
	var res PublishedProductList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductListAO0Links published product list a o0 links
//
// swagger:model PublishedProductListAO0Links
type PublishedProductListAO0Links struct {

	// self
	Self *PublishedProductListAO0LinksSelf `json:"self,omitempty"`
}

// Validate validates this published product list a o0 links
func (m *PublishedProductListAO0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProductListAO0Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductListAO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductListAO0Links) UnmarshalBinary(b []byte) error {
	var res PublishedProductListAO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductListAO0LinksSelf published product list a o0 links self
//
// swagger:model PublishedProductListAO0LinksSelf
type PublishedProductListAO0LinksSelf struct {

	// URI of the resource
	Href string `json:"href,omitempty"`
}

// Validate validates this published product list a o0 links self
func (m *PublishedProductListAO0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductListAO0LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductListAO0LinksSelf) UnmarshalBinary(b []byte) error {
	var res PublishedProductListAO0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductListAO1Associations Several associations related to groups and/or other published products, grouped by association types
//
// swagger:model PublishedProductListAO1Associations
type PublishedProductListAO1Associations struct {

	// association type code
	AssociationTypeCode *PublishedProductListAO1AssociationsAssociationTypeCode `json:"associationTypeCode,omitempty"`
}

// Validate validates this published product list a o1 associations
func (m *PublishedProductListAO1Associations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociationTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProductListAO1Associations) validateAssociationTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationTypeCode) { // not required
		return nil
	}

	if m.AssociationTypeCode != nil {
		if err := m.AssociationTypeCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associations" + "." + "associationTypeCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductListAO1Associations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductListAO1Associations) UnmarshalBinary(b []byte) error {
	var res PublishedProductListAO1Associations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductListAO1AssociationsAssociationTypeCode published product list a o1 associations association type code
//
// swagger:model PublishedProductListAO1AssociationsAssociationTypeCode
type PublishedProductListAO1AssociationsAssociationTypeCode struct {

	// Array of groups codes with which the published product is in relation
	Groups []string `json:"groups"`

	// Array of product model codes with which the product is in relation (only available since the v2.1)
	ProductModels []string `json:"product_models"`

	// Array of published product identifiers with which the published product is in relation
	Products []string `json:"products"`
}

// Validate validates this published product list a o1 associations association type code
func (m *PublishedProductListAO1AssociationsAssociationTypeCode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductListAO1AssociationsAssociationTypeCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductListAO1AssociationsAssociationTypeCode) UnmarshalBinary(b []byte) error {
	var res PublishedProductListAO1AssociationsAssociationTypeCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductListAO1Values Published product attributes values, see <a href='/concepts/products.html#focus-on-the-products-values'>Product values</a> section for more details
//
// swagger:model PublishedProductListAO1Values
type PublishedProductListAO1Values struct {

	// attribute code
	AttributeCode []*PublishedProductListAO1ValuesAttributeCodeItems0 `json:"attributeCode"`
}

// Validate validates this published product list a o1 values
func (m *PublishedProductListAO1Values) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedProductListAO1Values) validateAttributeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeCode) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeCode); i++ {
		if swag.IsZero(m.AttributeCode[i]) { // not required
			continue
		}

		if m.AttributeCode[i] != nil {
			if err := m.AttributeCode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + "attributeCode" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductListAO1Values) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductListAO1Values) UnmarshalBinary(b []byte) error {
	var res PublishedProductListAO1Values
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublishedProductListAO1ValuesAttributeCodeItems0 published product list a o1 values attribute code items0
//
// swagger:model PublishedProductListAO1ValuesAttributeCodeItems0
type PublishedProductListAO1ValuesAttributeCodeItems0 struct {

	// Product value
	Data interface{} `json:"data,omitempty"`

	// Locale code of the product value
	Locale string `json:"locale,omitempty"`

	// Channel code of the product value
	Scope string `json:"scope,omitempty"`
}

// Validate validates this published product list a o1 values attribute code items0
func (m *PublishedProductListAO1ValuesAttributeCodeItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublishedProductListAO1ValuesAttributeCodeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedProductListAO1ValuesAttributeCodeItems0) UnmarshalBinary(b []byte) error {
	var res PublishedProductListAO1ValuesAttributeCodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

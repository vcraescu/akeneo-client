// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReferenceEntityAttribute reference entity attribute
//
// swagger:model ReferenceEntityAttribute
type ReferenceEntityAttribute struct {

	// Extensions allowed when the attribute type is `image`
	AllowedExtensions []string `json:"allowed_extensions"`

	// Attribute code
	// Required: true
	Code *string `json:"code"`

	// Whether decimals are allowed when the attribute type is `number`
	DecimalsAllowed *bool `json:"decimals_allowed,omitempty"`

	// Whether the attribute should be part of the record's completeness calculation
	IsRequiredForCompleteness *bool `json:"is_required_for_completeness,omitempty"`

	// Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
	IsRichTextEditor bool `json:"is_rich_text_editor,omitempty"`

	// Whether the UI should display a text area instead of a simple field when the attribute type is `text`
	IsTextarea *bool `json:"is_textarea,omitempty"`

	// labels
	Labels *ReferenceEntityAttributeLabels `json:"labels,omitempty"`

	// Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
	MaxCharacters int64 `json:"max_characters,omitempty"`

	// Max file size in MB when the attribute type is `image`
	MaxFileSize string `json:"max_file_size,omitempty"`

	// Maximum value allowed when the attribute type is `number`
	MaxValue string `json:"max_value,omitempty"`

	// Minimum value allowed when the attribute type is `number`
	MinValue string `json:"min_value,omitempty"`

	// Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
	ReferenceEntityCode string `json:"reference_entity_code,omitempty"`

	// Attribute type
	// Required: true
	// Enum: [text image number single_option multiple_options reference_entity_single_link reference_entity_multiple_links]
	Type *string `json:"type"`

	// Regexp expression used to validate the attribute value when the attribute type is `text`
	ValidationRegexp string `json:"validation_regexp,omitempty"`

	// Validation rule type used to validate the attribute value when the attribute type is `text`
	// Enum: [email url regexp none]
	ValidationRule *string `json:"validation_rule,omitempty"`

	// Whether the attribute is scopable, i.e. can have one value by channel
	ValuePerChannel *bool `json:"value_per_channel,omitempty"`

	// Whether the attribute is localizable, i.e. can have one value by locale
	ValuePerLocale *bool `json:"value_per_locale,omitempty"`
}

// Validate validates this reference entity attribute
func (m *ReferenceEntityAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReferenceEntityAttribute) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ReferenceEntityAttribute) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

var referenceEntityAttributeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","image","number","single_option","multiple_options","reference_entity_single_link","reference_entity_multiple_links"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		referenceEntityAttributeTypeTypePropEnum = append(referenceEntityAttributeTypeTypePropEnum, v)
	}
}

const (

	// ReferenceEntityAttributeTypeText captures enum value "text"
	ReferenceEntityAttributeTypeText string = "text"

	// ReferenceEntityAttributeTypeImage captures enum value "image"
	ReferenceEntityAttributeTypeImage string = "image"

	// ReferenceEntityAttributeTypeNumber captures enum value "number"
	ReferenceEntityAttributeTypeNumber string = "number"

	// ReferenceEntityAttributeTypeSingleOption captures enum value "single_option"
	ReferenceEntityAttributeTypeSingleOption string = "single_option"

	// ReferenceEntityAttributeTypeMultipleOptions captures enum value "multiple_options"
	ReferenceEntityAttributeTypeMultipleOptions string = "multiple_options"

	// ReferenceEntityAttributeTypeReferenceEntitySingleLink captures enum value "reference_entity_single_link"
	ReferenceEntityAttributeTypeReferenceEntitySingleLink string = "reference_entity_single_link"

	// ReferenceEntityAttributeTypeReferenceEntityMultipleLinks captures enum value "reference_entity_multiple_links"
	ReferenceEntityAttributeTypeReferenceEntityMultipleLinks string = "reference_entity_multiple_links"
)

// prop value enum
func (m *ReferenceEntityAttribute) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, referenceEntityAttributeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReferenceEntityAttribute) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var referenceEntityAttributeTypeValidationRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","url","regexp","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		referenceEntityAttributeTypeValidationRulePropEnum = append(referenceEntityAttributeTypeValidationRulePropEnum, v)
	}
}

const (

	// ReferenceEntityAttributeValidationRuleEmail captures enum value "email"
	ReferenceEntityAttributeValidationRuleEmail string = "email"

	// ReferenceEntityAttributeValidationRuleURL captures enum value "url"
	ReferenceEntityAttributeValidationRuleURL string = "url"

	// ReferenceEntityAttributeValidationRuleRegexp captures enum value "regexp"
	ReferenceEntityAttributeValidationRuleRegexp string = "regexp"

	// ReferenceEntityAttributeValidationRuleNone captures enum value "none"
	ReferenceEntityAttributeValidationRuleNone string = "none"
)

// prop value enum
func (m *ReferenceEntityAttribute) validateValidationRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, referenceEntityAttributeTypeValidationRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReferenceEntityAttribute) validateValidationRule(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidationRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationRuleEnum("validation_rule", "body", *m.ValidationRule); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReferenceEntityAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReferenceEntityAttribute) UnmarshalBinary(b []byte) error {
	var res ReferenceEntityAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReferenceEntityAttributeLabels Attribute labels for each locale
//
// swagger:model ReferenceEntityAttributeLabels
type ReferenceEntityAttributeLabels struct {

	// Attribute label for the locale `localeCode`
	LocaleCode string `json:"localeCode,omitempty"`
}

// Validate validates this reference entity attribute labels
func (m *ReferenceEntityAttributeLabels) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReferenceEntityAttributeLabels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReferenceEntityAttributeLabels) UnmarshalBinary(b []byte) error {
	var res ReferenceEntityAttributeLabels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
